v0.9.6
- Documentation update
- Minor fixes for AVX512 version of operators

v0.9.5
- Refactor of perf utils to support floating point types.
- Added perf tests for Double256 and Float256.
- Friend operators for Double256 (for future testing).

v0.9.4
- Trigonometric functions on Linux (GCC & Clang) are now using Sleef library to perform computation

v0.9.0
- Added performance tests for raw AVX2/AVX512 functions for some types.
- REMOVED pointer checks for pointer constructor, load, save and saveAligned methods (performance optimization).
- Fixed performance tests typo in raw function used for modulo operator test.

v0.8.3
- Fixed right shift operators for affected types.
- Fixed right shift test so that sub zero values are tested properly.

v0.8.2
- Added AVX512 variant for / and % operators for Int256, Short256, UInt256, Char256, Uchar256 (work in progress) classes.
- Added test to perf utils for testing comparison (== !=) operators.

v0.8.1.4
- Updated Double256 class to use SIMD in == and != operators with fix for -0.0 and 0.0 comparison.
- Updated documentation.
- Removed unnecessary *.cpp files for header-only classes.

v0.8.1.3
- Ported _mm256_div_epi64 to GCC and Clang. Disclaimer: during testing the function appeared to be slower than handwritten "naive" solution.

v0.8.1.2
- Fixed load, save and saveAligned methods for some types. They are all expected to behave the same way.
- Fixed << and <<= operator for Uchar256 when using AVX512.
- Minor changes to debug exception messages.

v0.8.1.1
- Added CPU name and features check using CPUID. Replaced popen with compiler and OS agnostic method.
- Some methods of Char256 are using AVX512 when selected in CMake options.
- Fixed << and <<= operator for Char256 when using AVX512.
- Changed Int256 / and /= operator to use AVX512 when selected in CMake options.

v0.8.1
- Added _mm256_div_epi32 function to provide division for int32_t vectors using AVX2.
- Changes avxmath.hpp so that all trigonometric functions will return valid results, though on GCC and Clang it will be sequential (this will be changed in future versions)
- (At least for now) removed: inverse, hyperbolic and inverse hyperbolic trigonometric functions 

v0.7.2
- Argument names refactor
- Optimized == operator for Float256 and verified double zero comp (-0.0f == 0.0f).
- Added documentation

v0.7.0
- Fixed Int256 modulo operator
- Enhanced performance of modulo for Int256

v0.6.1
- Extending documentation
- Changed CMakeLists.txt to use custom output folder for libraries and binaries

v0.6.0
- avx::UInt256 division has been fixed (verification in progress).
- Fixed reporting issue in test utils which displayed wrong object for literal verification.
- Minor changes to deep tests.

v0.5.2
- Fixed avx::Uchar256 using wrong pointer type in saveAligned method.
- Created deep test utility for testing division of AVX2 vectors.
- Following types have been verified against non SIMD counterparts in division:
  - avx::Char256 (verified OK)
  - avx::UChar256 (verified OK)
  - avx::Short256 (verified OK)
  - avx::UShort (verified OK)

v0.5.0
- Added load() method to load data from memory into vectors.
- Optimized ==, != operators for integer types.
- Added new universal test to validate == and != operators.
- Organized performance tests and added #define to check which validation failed.