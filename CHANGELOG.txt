v0.8.1.2
- Fixed load, save and saveAligned methods for some types. They are all expected to behave the same way.
- Fixed << and <<= operator for Uchar256 when using AVX512.
- Minor changes to debug exception messages.

v0.8.1.1
- Added CPU name and features check using CPUID. Replaced popen with compiler and OS agnostic method.
- Some methods of Char256 are using AVX512 when selected in CMake options.
- Fixed << and <<= operator for Char256 when using AVX512.
- Changed Int256 / and /= operator to use AVX512 when selected in CMake options.

v0.8.1
- Added _mm256_div_epi32 function to provide division for int32_t vectors using AVX2.
- Changes avxmath.hpp so that all trigonometric functions will return valid results, though on GCC and Clang it will be sequential (this will be changed in future versions)
- (At least for now) removed: inverse, hyperbolic and inverse hyperbolic trigonometric functions 

v0.7.2
- Argument names refactor
- Optimized == operator for Float256 and verified double zero comp (-0.0f == 0.0f).
- Added documentation

v0.7.0
- Fixed Int256 modulo operator
- Enhanced performance of modulo for Int256

v0.6.1
- Extending documentation
- Changed CMakeLists.txt to use custom output folder for libraries and binaries

v0.6.0
- avx::UInt256 division has been fixed (verification in progress).
- Fixed reporting issue in test utils which displayed wrong object for literal verification.
- Minor changes to deep tests.

v0.5.2
- Fixed avx::Uchar256 using wrong pointer type in saveAligned method.
- Created deep test utility for testing division of AVX2 vectors.
- Following types have been verified against non SIMD counterparts in division:
  - avx::Char256 (verified OK)
  - avx::UChar256 (verified OK)
  - avx::Short256 (verified OK)
  - avx::UShort (verified OK)

v0.5.0
- Added load() method to load data from memory into vectors.
- Optimized ==, != operators for integer types.
- Added new universal test to validate == and != operators.
- Organized performance tests and added #define to check which validation failed.