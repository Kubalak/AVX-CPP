<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_short256" kind="class" language="C++" prot="public">
    <compoundname>avx::UShort256</compoundname>
    <includes refid="ushort256_8hpp" local="no">ushort256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_short256_1a4b9c61a4fd69168c155b0cae14c7885f" prot="public" static="no">
        <type>unsigned short</type>
        <definition>using avx::UShort256::storedType =  unsigned short</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::UShort256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="33" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_short256_1a602dca94773ece5c762f077b42b36d7c" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::UShort256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::UShort256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="21" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_short256_1a6e91aa10ff2611c50ccfa12104b3ac96" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>const int</type>
        <definition>const int avx::UShort256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::UShort256::size</qualifiedname>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="28" column="40" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0b91b7655f0c73c892fdc60edb9bd6e2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>() noexcept</argsstring>
        <name>UShort256</name>
        <qualifiedname>avx::UShort256::UShort256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Sets zero to whole vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="38" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1abba5cfa206d1dad592a5c4d2e6cecea9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const UShort256 &amp;init) noexcept</argsstring>
        <name>UShort256</name>
        <qualifiedname>avx::UShort256::UShort256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with value from other vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="45" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a955cd424048504ae2251defd42d6792d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>UShort256</name>
        <qualifiedname>avx::UShort256::UShort256</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector but using <computeroutput>__m256i</computeroutput> type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="52" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1abe71ddb96be361430760be9ca6c84388" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const std::array&lt; unsigned short, 16 &gt; &amp;init) noexcept</argsstring>
        <name>UShort256</name>
        <qualifiedname>avx::UShort256::UShort256</qualifiedname>
        <param>
          <type>const std::array&lt; unsigned short, 16 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize vector with values read from an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="59" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a85b79fe378f9016e455c0d9622485f32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(std::initializer_list&lt; unsigned short &gt; init)</argsstring>
        <name>UShort256</name>
        <qualifiedname>avx::UShort256::UShort256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; unsigned short &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from initializer_list of int values. If the list contains fewer than 16 elements, remaining elements are set to zero. If the list contains more than 16 elements, only the first 16 are used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list of int values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="67" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="67" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ab6bfa5a4989e5c4a7c766c37cd4c5141" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const unsigned short *pSrc)</argsstring>
        <name>UShort256</name>
        <qualifiedname>avx::UShort256::UShort256</qualifiedname>
        <param>
          <type>const unsigned short *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize vector with values using pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid address containing at least 16 <computeroutput>unsigned short</computeroutput> numbers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="93" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="93" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a4421b9be00a4916a17ba4bd1cfe2b406" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const unsigned short b) noexcept</argsstring>
        <name>UShort256</name>
        <qualifiedname>avx::UShort256::UShort256</qualifiedname>
        <param>
          <type>const unsigned short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes all vector fields with single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>A literal value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="107" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a45b3d57045345cad9a69a70ce459a940" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::load</definition>
        <argsstring>(const unsigned short *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::UShort256::load</qualifiedname>
        <param>
          <type>const unsigned short *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="114" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a931ec8f87195e19811ecbc69dbe231fe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::save</definition>
        <argsstring>(std::array&lt; unsigned short, 16 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::UShort256::save</qualifiedname>
        <param>
          <type>std::array&lt; unsigned short, 16 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="127" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a65b550387b3910104bc6f371212bf771" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::save</definition>
        <argsstring>(unsigned short *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::UShort256::save</qualifiedname>
        <param>
          <type>unsigned short *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (16x <computeroutput>unsigned short</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="138" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="138" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a4f1e44a6450ad4ee4506ef6b045b9acc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::saveAligned</definition>
        <argsstring>(unsigned short *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::UShort256::saveAligned</qualifiedname>
        <param>
          <type>unsigned short *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (16x <computeroutput>unsigned short</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="154" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="154" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a4236650e83c48983bce51d7e2129b9ae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::UShort256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::UShort256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="168" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a37f1ccc6844f7348f2d837937f6c12b9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::UShort256::set</qualifiedname>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="174" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ac85f7a7efc92ccabbddedcc745a0b9ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short avx::UShort256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::UShort256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 15. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="183" column="28" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a9d99726c244a367e89f75cfccec520b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UShort256::operator==</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::UShort256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal or <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="200" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aa0e60f3e4de26f993c0ce4ef03617e38" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UShort256::operator==</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::UShort256::operator==</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal to passed value <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="211" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a76f462119aebe016b4d3b5d7188f7b83" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UShort256::operator!=</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::UShort256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="223" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a148c104ccec326523189ae7f0cd46b39" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UShort256::operator!=</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::UShort256::operator!=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="234" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aa344be83189c30778bc571265ea218b7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator+</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::UShort256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="240" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a9f175149996062a659eafdbcbe54e43d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator+</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::UShort256::operator+</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="244" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a3fb81c0cc9ae6ddf4670bba7a974049d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator+=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::UShort256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="248" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ae07b021d72e05a890384289419494981" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator+=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::UShort256::operator+=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="253" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a54e0fbf6cb47ba8f21278e7caedf488c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator-</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::UShort256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="258" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a5b9c3c6c44057ae3b314b007483faca2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator-</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::UShort256::operator-</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="262" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ac4a9466d4396b80deacf703e8934b21b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator-=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::UShort256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="266" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a2730ec02aea3cbfa1e524fb205b1126c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator-=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::UShort256::operator-=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="271" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a8ce92287486b4607a7572fdab35bd20d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator*</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::UShort256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="276" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="276" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ad4de9f3588b9f78c63d694557e31a26c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator*</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::UShort256::operator*</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="295" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="295" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1adb841fb428a544afc0d1445e4bc7276b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator*=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::UShort256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="312" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="312" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a7eccf88461189831966fd0e1844f58bf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator*=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::UShort256::operator*=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="332" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="332" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aa50ba20c9d3c28f73e0498d4eef2e43c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator/</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::UShort256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs an integer division.</para>
<para>NOTE: Value is first casted to <computeroutput>int</computeroutput> and then to <computeroutput>float</computeroutput> and inverse using <computeroutput>_mm256_cvttps_epi32</computeroutput> to return integer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisors vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of integer division with truncation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="357" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="357" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0d09fa219aafb160cbd740130702c4e7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator/</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::UShort256::operator/</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs an integer division.</para>
<para>NOTE: Value is first casted to <computeroutput>int</computeroutput> and then to <computeroutput>float</computeroutput> and inverse using <computeroutput>_mm256_cvttps_epi32</computeroutput> to return integer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of integer division with truncation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="399" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="399" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a192400c8dc1f812f568b22c052746ea4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator/=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::UShort256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="430" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="430" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ac57b35964179a123f28669805e42340f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator/=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::UShort256::operator/=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="466" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="466" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a9056c1ee0ed658e9a93cf2865653e0f0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator%</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::UShort256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation. The implemented algorithm works as shown below:</para>
<para>mod(a, b) -&gt; a - b * (a / b) where <computeroutput>/</computeroutput> is an integer division. Due to SIMD (AVX2) limitations values are casted to two float vectors and then divided.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulo result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="508" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="508" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0f863c03ebf5c44b80ee800ddedcd993" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator%</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::UShort256::operator%</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation. The implemented algorithm works as shown below:</para>
<para>mod(a, b) -&gt; a - b * (a / b) where <computeroutput>/</computeroutput> is an integer division. Due to SIMD (AVX2) limitations values are casted to two float vectors and then divided.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulo result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="547" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="547" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1af4c1315c34c4840ed7071f23d5567fd4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator%=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::UShort256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation. The implemented algorithm works as shown below:</para>
<para>mod(a, b) -&gt; a - b * (a / b) where <computeroutput>/</computeroutput> is an integer division. Due to SIMD (AVX2) limitations values are casted to two float vectors and then divided.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="581" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="581" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a762f2b7c9bcc642b393ccf36824532e0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator%=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::UShort256::operator%=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation. The implemented algorithm works as shown below:</para>
<para>mod(a, b) -&gt; a - b * (a / b) where <computeroutput>/</computeroutput> is an integer division. Due to SIMD (AVX2) limitations values are casted to two float vectors and then divided.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="620" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="620" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a245bc722cb6ed16934b0a544a5fbb0ab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator|</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::UShort256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> New vector being result of bitwise OR with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="651" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="651" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ad15b87b6b9f68fb98bfd84ad8fc6ee04" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator|</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::UShort256::operator|</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to OR with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> New vector being result of bitwise OR with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="660" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="660" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a2cd367e5a8165466153144faf7907672" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator|=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::UShort256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR assignment operator. Applies bitwise OR between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="670" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a42f9b040fd98457ff1194a140fcf3a20" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator|=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::UShort256::operator|=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR assignment operator with scalar. Applies bitwise OR between this vector and the given value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to OR with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="681" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="681" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a28717195dcfc5f81f8c2c9dcd5680ee8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&amp;</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::UShort256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> New vector being result of bitwise AND with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="691" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="691" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1abd67657ded66c2e764e2345a765e4f25" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&amp;</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::UShort256::operator&amp;</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to AND with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> New vector being result of bitwise AND with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="700" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="700" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a64c1f727f6391003f3ec52ddffbea635" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator&amp;=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::UShort256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND assignment operator. Applies bitwise AND between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="710" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="710" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1afd0661bb16f73cc59b6545d645bb0e1c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator&amp;=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::UShort256::operator&amp;=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND assignment operator with scalar. Applies bitwise AND between this vector and the given value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to AND with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="721" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="721" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0a82039db3a199c50ba59eb18bde62f6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator^</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::UShort256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> New vector being result of bitwise XOR with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="731" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="731" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aa6b1ab4cd5b1b25f4400174fe823365a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator^</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::UShort256::operator^</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to XOR with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> New vector being result of bitwise XOR with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="740" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="740" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aff6bd2703acccb9f2edb0e982c72fd96" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator^=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::UShort256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR assignment operator. Applies bitwise XOR between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="750" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="750" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a85b3674058f5d8703013ed4f97aee65c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator^=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::UShort256::operator^=</qualifiedname>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR assignment operator with scalar. Applies bitwise XOR between this vector and the given value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to XOR with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="761" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="761" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a59bbc605d79396d4208f69b1b3a3ec38" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&lt;&lt;</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UShort256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs left bitwise shift of corresponding values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector that specifies number of bits to shift (for each 16-bit value). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value of <computeroutput>v</computeroutput> shifted by number of bits specfied in <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="771" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="771" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a802dbff7c367bc6a410f8898a49705ed" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;shift) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UShort256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="798" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="798" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ad71226e012821fcda752fbc0a8b072ec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator&lt;&lt;=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::UShort256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="802" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="802" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a502584e8ae293286da2774a8407d210d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;shift) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::UShort256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="824" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="824" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a458a965400c81b0bbaa3b7fcab8f8028" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&gt;&gt;</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::UShort256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="829" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="829" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a08e0e0b2e94a68784f52b8bc6e6d09e8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;shift) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::UShort256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="850" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="850" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a5102383d42ad35a8ed89900858e58d56" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator&gt;&gt;=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::UShort256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="854" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="854" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a5fbd1101ee9388ea899421219f2af499" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256 &amp; avx::UShort256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;shift) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::UShort256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="876" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="876" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ae3fec3bfc3a67b7b16f5ed30a5f36c10" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::UShort256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise NOT operator. <simplesect kind="return"><para><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> New vector with all bits inverted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="885" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="885" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a8b02114f7ddd83e51ed7ad7a5ee12861" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UShort256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::UShort256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns string representation of vector. Printing will result in Short256(&lt;vector_values&gt;) eg. Short256(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) <simplesect kind="return"><para>String representation of underlying vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="894" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="894" bodyend="903"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>unsigned short</computeroutput>. Can hold 16 individual <computeroutput>unsigned short</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" line="19" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ushort256.hpp" bodystart="19" bodyend="904"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_short256_1a4236650e83c48983bce51d7e2129b9ae" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_short256_1a45b3d57045345cad9a69a70ce459a940" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_short256_1a76f462119aebe016b4d3b5d7188f7b83" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_short256_1a148c104ccec326523189ae7f0cd46b39" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_short256_1a9056c1ee0ed658e9a93cf2865653e0f0" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_short256_1a0f863c03ebf5c44b80ee800ddedcd993" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_short256_1af4c1315c34c4840ed7071f23d5567fd4" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_short256_1a762f2b7c9bcc642b393ccf36824532e0" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_short256_1a28717195dcfc5f81f8c2c9dcd5680ee8" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_short256_1abd67657ded66c2e764e2345a765e4f25" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_short256_1a64c1f727f6391003f3ec52ddffbea635" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_short256_1afd0661bb16f73cc59b6545d645bb0e1c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_short256_1a8ce92287486b4607a7572fdab35bd20d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_short256_1ad4de9f3588b9f78c63d694557e31a26c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_short256_1adb841fb428a544afc0d1445e4bc7276b" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_short256_1a7eccf88461189831966fd0e1844f58bf" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_short256_1aa344be83189c30778bc571265ea218b7" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_short256_1a9f175149996062a659eafdbcbe54e43d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_short256_1a3fb81c0cc9ae6ddf4670bba7a974049d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_short256_1ae07b021d72e05a890384289419494981" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_short256_1a54e0fbf6cb47ba8f21278e7caedf488c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_short256_1a5b9c3c6c44057ae3b314b007483faca2" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_short256_1ac4a9466d4396b80deacf703e8934b21b" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_short256_1a2730ec02aea3cbfa1e524fb205b1126c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_short256_1aa50ba20c9d3c28f73e0498d4eef2e43c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_short256_1a0d09fa219aafb160cbd740130702c4e7" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_short256_1a192400c8dc1f812f568b22c052746ea4" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_short256_1ac57b35964179a123f28669805e42340f" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_short256_1a59bbc605d79396d4208f69b1b3a3ec38" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_short256_1a802dbff7c367bc6a410f8898a49705ed" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_short256_1ad71226e012821fcda752fbc0a8b072ec" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_short256_1a502584e8ae293286da2774a8407d210d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_short256_1a9d99726c244a367e89f75cfccec520b5" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_short256_1aa0e60f3e4de26f993c0ce4ef03617e38" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_short256_1a458a965400c81b0bbaa3b7fcab8f8028" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_short256_1a08e0e0b2e94a68784f52b8bc6e6d09e8" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_short256_1a5102383d42ad35a8ed89900858e58d56" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_short256_1a5fbd1101ee9388ea899421219f2af499" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_short256_1ac85f7a7efc92ccabbddedcc745a0b9ab" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_short256_1a0a82039db3a199c50ba59eb18bde62f6" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_short256_1aa6b1ab4cd5b1b25f4400174fe823365a" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_short256_1aff6bd2703acccb9f2edb0e982c72fd96" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_short256_1a85b3674058f5d8703013ed4f97aee65c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_short256_1a245bc722cb6ed16934b0a544a5fbb0ab" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_short256_1ad15b87b6b9f68fb98bfd84ad8fc6ee04" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_short256_1a2cd367e5a8165466153144faf7907672" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_short256_1a42f9b040fd98457ff1194a140fcf3a20" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_short256_1ae3fec3bfc3a67b7b16f5ed30a5f36c10" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_short256_1a931ec8f87195e19811ecbc69dbe231fe" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_short256_1a65b550387b3910104bc6f371212bf771" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_short256_1a4f1e44a6450ad4ee4506ef6b045b9acc" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_short256_1a37f1ccc6844f7348f2d837937f6c12b9" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_short256_1a6e91aa10ff2611c50ccfa12104b3ac96" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_short256_1a4b9c61a4fd69168c155b0cae14c7885f" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_short256_1a8b02114f7ddd83e51ed7ad7a5ee12861" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_short256_1a0b91b7655f0c73c892fdc60edb9bd6e2" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1abba5cfa206d1dad592a5c4d2e6cecea9" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a955cd424048504ae2251defd42d6792d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1abe71ddb96be361430760be9ca6c84388" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a85b79fe378f9016e455c0d9622485f32" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1ab6bfa5a4989e5c4a7c766c37cd4c5141" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a4421b9be00a4916a17ba4bd1cfe2b406" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a602dca94773ece5c762f077b42b36d7c" prot="private" virt="non-virtual"><scope>avx::UShort256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
