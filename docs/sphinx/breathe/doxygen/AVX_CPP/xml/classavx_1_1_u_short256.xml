<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_short256" kind="class" language="C++" prot="public">
    <compoundname>avx::UShort256</compoundname>
    <includes refid="ushort256_8hpp" local="no">ushort256.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_short256_1a4b9c61a4fd69168c155b0cae14c7885f" prot="public" static="no">
        <type>unsigned short</type>
        <definition>using avx::UShort256::storedType =  unsigned short</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="25" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_short256_1a602dca94773ece5c762f077b42b36d7c" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::UShort256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="21" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_short256_1a6e91aa10ff2611c50ccfa12104b3ac96" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const int</type>
        <definition>constexpr const int avx::UShort256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="24" column="40" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0b91b7655f0c73c892fdc60edb9bd6e2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>() noexcept</argsstring>
        <name>UShort256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Sets zero to whole vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="30" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1abba5cfa206d1dad592a5c4d2e6cecea9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const UShort256 &amp;init) noexcept</argsstring>
        <name>UShort256</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with value from other vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="37" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a955cd424048504ae2251defd42d6792d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>UShort256</name>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector but using <computeroutput>__m256i</computeroutput> type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="44" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1abe71ddb96be361430760be9ca6c84388" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const std::array&lt; unsigned short, 16 &gt; &amp;init) noexcept</argsstring>
        <name>UShort256</name>
        <param>
          <type>const std::array&lt; unsigned short, 16 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize vector with values read from an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="51" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a85b79fe378f9016e455c0d9622485f32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(std::initializer_list&lt; unsigned short &gt; init)</argsstring>
        <name>UShort256</name>
        <param>
          <type>std::initializer_list&lt; unsigned short &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="53" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="53" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a02295906b2d9a64d2b4001037620feef" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const unsigned short *addr)</argsstring>
        <name>UShort256</name>
        <param>
          <type>const unsigned short *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize vector with values using pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid address containing at least 16 <computeroutput>unsigned short</computeroutput> numbers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in debug mode and <computeroutput>addr</computeroutput> is <computeroutput>nullptr</computeroutput>. Otherwise if <computeroutput>addr</computeroutput> is nullptr vector will be filled with 0&apos;s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="79" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a4421b9be00a4916a17ba4bd1cfe2b406" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UShort256::UShort256</definition>
        <argsstring>(const unsigned short b) noexcept</argsstring>
        <name>UShort256</name>
        <param>
          <type>const unsigned short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes all vector fields with single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>A literal value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="99" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a121566233a55371b4019dfc88a9b556d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::load</definition>
        <argsstring>(const unsigned short *pSrc) N_THROW_REL</argsstring>
        <name>load</name>
        <param>
          <type>const unsigned short *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="106" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a931ec8f87195e19811ecbc69dbe231fe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::save</definition>
        <argsstring>(std::array&lt; unsigned short, 16 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <param>
          <type>std::array&lt; unsigned short, 16 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="119" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a8919c8b605304999b8934216562f2762" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::save</definition>
        <argsstring>(unsigned short *pDest) const N_THROW_REL</argsstring>
        <name>save</name>
        <param>
          <type>unsigned short *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (16x <computeroutput>unsigned short</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="130" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="130" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ac15bfd33bb4d5b93583ebbac064aa970" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::saveAligned</definition>
        <argsstring>(unsigned short *pDest) const N_THROW_REL</argsstring>
        <name>saveAligned</name>
        <param>
          <type>unsigned short *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (16x <computeroutput>unsigned short</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="146" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="146" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a4236650e83c48983bce51d7e2129b9ae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::UShort256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="160" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a37f1ccc6844f7348f2d837937f6c12b9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UShort256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="166" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ac85f7a7efc92ccabbddedcc745a0b9ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short avx::UShort256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 15. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="175" column="28" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a9d99726c244a367e89f75cfccec520b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UShort256::operator==</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal or <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="192" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aa0e60f3e4de26f993c0ce4ef03617e38" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UShort256::operator==</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal to passed value <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="203" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a76f462119aebe016b4d3b5d7188f7b83" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UShort256::operator!=</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="215" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a148c104ccec326523189ae7f0cd46b39" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UShort256::operator!=</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="226" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aa344be83189c30778bc571265ea218b7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator+</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="232" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a9f175149996062a659eafdbcbe54e43d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator+</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="236" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0e57fe19e84fcd9f33626116864f1acf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator+=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="240" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a15dbec5a1d3ff29ee8e6c1dccff1696a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator+=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="245" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a54e0fbf6cb47ba8f21278e7caedf488c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator-</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="250" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a5b9c3c6c44057ae3b314b007483faca2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator-</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="254" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1acbadb328b2851d85f41f91b3a1e3ddf8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator-=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="258" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a30bf0523287ce17e645f143b28f396b4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator-=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="263" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a8ce92287486b4607a7572fdab35bd20d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator*</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="268" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="268" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ad4de9f3588b9f78c63d694557e31a26c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator*</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="287" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="287" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ac8579ae1730b62209a831ac56e0e52c3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator*=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="304" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="304" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aadf6f7d74661f10a45245c03168e6db8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator*=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="324" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="324" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aa50ba20c9d3c28f73e0498d4eef2e43c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator/</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs an integer division.</para>
<para>NOTE: Value is first casted to <computeroutput>int</computeroutput> and then to <computeroutput>float</computeroutput> and inverse to return integer result which has not been yet tested for performance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisors vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of integer division with truncation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="349" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="349" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0d09fa219aafb160cbd740130702c4e7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator/</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs an integer division.</para>
<para>NOTE: Value is first casted to <computeroutput>int</computeroutput> and then to <computeroutput>float</computeroutput> and inverse to return integer result which has not been yet tested for performance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of integer division with truncation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="380" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="380" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a39e3774a4f3f1533b57f3ff8a2de2485" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator/=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="400" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="400" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a1eb3aef8e33cbc5cb1f0a93a19c2c359" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator/=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="425" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="425" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a9056c1ee0ed658e9a93cf2865653e0f0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator%</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation. The implemented algorithm works as shown below:</para>
<para>mod(a, b) -&gt; a - b * (a / b) where <computeroutput>/</computeroutput> is an integer division. Due to SIMD (AVX2) limitations values are casted to two float vectors and then divided.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulo result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="456" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="456" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0f863c03ebf5c44b80ee800ddedcd993" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator%</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation. The implemented algorithm works as shown below:</para>
<para>mod(a, b) -&gt; a - b * (a / b) where <computeroutput>/</computeroutput> is an integer division. Due to SIMD (AVX2) limitations values are casted to two float vectors and then divided.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulo result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="495" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="495" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a5fc5aefddffd3e994465940750aaa192" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator%=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation. The implemented algorithm works as shown below:</para>
<para>mod(a, b) -&gt; a - b * (a / b) where <computeroutput>/</computeroutput> is an integer division. Due to SIMD (AVX2) limitations values are casted to two float vectors and then divided.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="529" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="529" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a43132144083a784074cc6642ffbf8633" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator%=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation. The implemented algorithm works as shown below:</para>
<para>mod(a, b) -&gt; a - b * (a / b) where <computeroutput>/</computeroutput> is an integer division. Due to SIMD (AVX2) limitations values are casted to two float vectors and then divided.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="568" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="568" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a245bc722cb6ed16934b0a544a5fbb0ab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator|</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="594" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="594" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ad15b87b6b9f68fb98bfd84ad8fc6ee04" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator|</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="598" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="598" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a8083926be001c17f8b2cabe8328d02a0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator|=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="602" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="602" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a7b667df8622a4bd863d2f6488fbf244f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator|=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="607" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="607" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a28717195dcfc5f81f8c2c9dcd5680ee8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&amp;</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="612" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="612" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1abd67657ded66c2e764e2345a765e4f25" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&amp;</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="616" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="616" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a552d14e730a8a9a111517bd2bffa5419" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator&amp;=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="620" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="620" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a24df386947d4bc0327cbb33c8315ae58" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator&amp;=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="625" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="625" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a0a82039db3a199c50ba59eb18bde62f6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator^</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="630" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="630" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aa6b1ab4cd5b1b25f4400174fe823365a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator^</definition>
        <argsstring>(const unsigned short &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="634" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="634" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1af3c3ea4367f2bc9974792fa9f72c2f3b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator^=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="638" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="638" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1aea2d748e70719523baf9830c2f00f4e7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator^=</definition>
        <argsstring>(const unsigned short &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="643" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="643" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a59bbc605d79396d4208f69b1b3a3ec38" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&lt;&lt;</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs left bitwise shift of corresponding values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector that specifies number of bits to shift (for each 16-bit value). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value of <computeroutput>v</computeroutput> shifted by number of bits specfied in <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="653" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="653" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a802dbff7c367bc6a410f8898a49705ed" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;shift) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="680" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="680" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a1e18ad41e66db4a0cfb92c73c0632405" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator&lt;&lt;=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="684" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="684" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a20f264e1b1a192a02862672f95564c46" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;shift) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="706" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="706" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a458a965400c81b0bbaa3b7fcab8f8028" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&gt;&gt;</definition>
        <argsstring>(const UShort256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="711" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="711" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a08e0e0b2e94a68784f52b8bc6e6d09e8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;shift) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="732" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="732" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a32e375d05f894bfbb5797606f25ca461" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator&gt;&gt;=</definition>
        <argsstring>(const UShort256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="736" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="736" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1abd00ada83bb3cbb04cead07fd1ae9da7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref> &amp;</type>
        <definition>UShort256&amp; avx::UShort256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;shift) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="758" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="758" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1ae3fec3bfc3a67b7b16f5ed30a5f36c10" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_short256" kindref="compound">UShort256</ref></type>
        <definition>UShort256 avx::UShort256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="763" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="763" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_short256_1a8b02114f7ddd83e51ed7ad7a5ee12861" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UShort256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="767" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="767" bodyend="776"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>unsigned short</computeroutput>. Can hold 16 individual <computeroutput>unsigned short</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" line="19" column="5" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ushort256.hpp" bodystart="19" bodyend="777"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_short256_1a4236650e83c48983bce51d7e2129b9ae" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_short256_1a121566233a55371b4019dfc88a9b556d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_short256_1a76f462119aebe016b4d3b5d7188f7b83" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_short256_1a148c104ccec326523189ae7f0cd46b39" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_short256_1a9056c1ee0ed658e9a93cf2865653e0f0" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_short256_1a0f863c03ebf5c44b80ee800ddedcd993" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_short256_1a5fc5aefddffd3e994465940750aaa192" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_short256_1a43132144083a784074cc6642ffbf8633" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_short256_1a28717195dcfc5f81f8c2c9dcd5680ee8" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_short256_1abd67657ded66c2e764e2345a765e4f25" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_short256_1a552d14e730a8a9a111517bd2bffa5419" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_short256_1a24df386947d4bc0327cbb33c8315ae58" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_short256_1a8ce92287486b4607a7572fdab35bd20d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_short256_1ad4de9f3588b9f78c63d694557e31a26c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_short256_1ac8579ae1730b62209a831ac56e0e52c3" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_short256_1aadf6f7d74661f10a45245c03168e6db8" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_short256_1aa344be83189c30778bc571265ea218b7" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_short256_1a9f175149996062a659eafdbcbe54e43d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_short256_1a0e57fe19e84fcd9f33626116864f1acf" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_short256_1a15dbec5a1d3ff29ee8e6c1dccff1696a" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_short256_1a54e0fbf6cb47ba8f21278e7caedf488c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_short256_1a5b9c3c6c44057ae3b314b007483faca2" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_short256_1acbadb328b2851d85f41f91b3a1e3ddf8" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_short256_1a30bf0523287ce17e645f143b28f396b4" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_short256_1aa50ba20c9d3c28f73e0498d4eef2e43c" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_short256_1a0d09fa219aafb160cbd740130702c4e7" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_short256_1a39e3774a4f3f1533b57f3ff8a2de2485" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_short256_1a1eb3aef8e33cbc5cb1f0a93a19c2c359" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_short256_1a59bbc605d79396d4208f69b1b3a3ec38" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_short256_1a802dbff7c367bc6a410f8898a49705ed" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_short256_1a1e18ad41e66db4a0cfb92c73c0632405" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_short256_1a20f264e1b1a192a02862672f95564c46" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_short256_1a9d99726c244a367e89f75cfccec520b5" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_short256_1aa0e60f3e4de26f993c0ce4ef03617e38" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_short256_1a458a965400c81b0bbaa3b7fcab8f8028" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_short256_1a08e0e0b2e94a68784f52b8bc6e6d09e8" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_short256_1a32e375d05f894bfbb5797606f25ca461" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_short256_1abd00ada83bb3cbb04cead07fd1ae9da7" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_short256_1ac85f7a7efc92ccabbddedcc745a0b9ab" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_short256_1a0a82039db3a199c50ba59eb18bde62f6" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_short256_1aa6b1ab4cd5b1b25f4400174fe823365a" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_short256_1af3c3ea4367f2bc9974792fa9f72c2f3b" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_short256_1aea2d748e70719523baf9830c2f00f4e7" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_short256_1a245bc722cb6ed16934b0a544a5fbb0ab" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_short256_1ad15b87b6b9f68fb98bfd84ad8fc6ee04" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_short256_1a8083926be001c17f8b2cabe8328d02a0" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_short256_1a7b667df8622a4bd863d2f6488fbf244f" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_short256_1ae3fec3bfc3a67b7b16f5ed30a5f36c10" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_short256_1a931ec8f87195e19811ecbc69dbe231fe" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_short256_1a8919c8b605304999b8934216562f2762" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_short256_1ac15bfd33bb4d5b93583ebbac064aa970" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_short256_1a37f1ccc6844f7348f2d837937f6c12b9" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_short256_1a6e91aa10ff2611c50ccfa12104b3ac96" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_short256_1a4b9c61a4fd69168c155b0cae14c7885f" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_short256_1a8b02114f7ddd83e51ed7ad7a5ee12861" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_short256_1a0b91b7655f0c73c892fdc60edb9bd6e2" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1abba5cfa206d1dad592a5c4d2e6cecea9" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a955cd424048504ae2251defd42d6792d" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1abe71ddb96be361430760be9ca6c84388" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a85b79fe378f9016e455c0d9622485f32" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a02295906b2d9a64d2b4001037620feef" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a4421b9be00a4916a17ba4bd1cfe2b406" prot="public" virt="non-virtual"><scope>avx::UShort256</scope><name>UShort256</name></member>
      <member refid="classavx_1_1_u_short256_1a602dca94773ece5c762f077b42b36d7c" prot="private" virt="non-virtual"><scope>avx::UShort256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
