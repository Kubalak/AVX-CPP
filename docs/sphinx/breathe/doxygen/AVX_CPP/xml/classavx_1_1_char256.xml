<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_char256" kind="class" language="C++" prot="public">
    <compoundname>avx::Char256</compoundname>
    <includes refid="char256_8hpp" local="no">char256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_char256_1add9f9f0a4bbe00c61577b5d54fdcba41" prot="public" static="no">
        <type>char</type>
        <definition>using avx::Char256::storedType =  char</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::Char256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="80" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_char256_1a2bf316ef8b4bdf470fea6072568c1b42" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::Char256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::Char256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="33" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_char256_1a0087a614a8b59ff5aa02c6463807b135" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::Char256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::Char256::size</qualifiedname>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="75" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classavx_1_1_char256_1a6faeb9a2479ab7ae21f605e8287f0b82" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::pair&lt; __m256i, __m256i &gt;</type>
        <definition>static std::pair&lt; __m256i, __m256i &gt; avx::Char256::_sig_ext_epi8_epi16</definition>
        <argsstring>(const __m256i &amp;vec) noexcept</argsstring>
        <name>_sig_ext_epi8_epi16</name>
        <qualifiedname>avx::Char256::_sig_ext_epi8_epi16</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign extend to two vectors containing 16 <computeroutput>short</computeroutput> values each.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing 32 <computeroutput>epi8</computeroutput> aka <computeroutput>char</computeroutput> values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of sign extended <computeroutput>epi16</computeroutput> aka <computeroutput>short</computeroutput> values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="40" column="30" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="40" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a8d633a013cac83406568f36a90de03bd" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::pair&lt; __m256i, __m256i &gt;</type>
        <definition>static std::pair&lt; __m256i, __m256i &gt; avx::Char256::_sig_ext_epi16_epi32</definition>
        <argsstring>(const __m256i &amp;vec) noexcept</argsstring>
        <name>_sig_ext_epi16_epi32</name>
        <qualifiedname>avx::Char256::_sig_ext_epi16_epi32</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign extend to two vectors containing 16 <computeroutput>short</computeroutput> values each.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing 32 <computeroutput>epi8</computeroutput> aka <computeroutput>char</computeroutput> values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of sign extended <computeroutput>epi16</computeroutput> aka <computeroutput>short</computeroutput> values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="58" column="30" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="58" bodyend="68"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_char256_1a3b240165857b1aa158bea2a94b301b3a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates object and fills with 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="85" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a7be047a1dd459e7e6946f9cffd883933" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const char init) noexcept</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <param>
          <type>const char</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with provided value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be broadcasted to vector content. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="92" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a1d6781466d32005fd644c029f2dd8424" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with <computeroutput>__m256i</computeroutput> vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="98" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a01d04381cab2fd2f52e36613e0960c11" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const Char256 &amp;init) noexcept</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with another object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which content will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="104" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a658e49c48b392023eca1ff090a033f30" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const char *pSrc)</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with first 32 bytes of data stored under <computeroutput>addr</computeroutput>. Data does not need to be aligned to a 32 byte boundary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory holding data (minimum 32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="113" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="113" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aba75a768f286411e78c8961a4fac6c3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const char *pSrc, unsigned int count)</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object using first <computeroutput>count</computeroutput> bytes from <computeroutput>pSrc</computeroutput> or 32 bytes if <computeroutput>count</computeroutput> &gt; 32. Data does not need to be aligned to 32 byte boundary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer from which data will be loaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes held by <computeroutput>pSrc</computeroutput>. For less than 32 remaining bytes will be filled with 0&apos;s. Otherwise first 32 bytes will be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if in debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. If in release, then no pointer checks are performed to improve performance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="130" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="130" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ac0a493c55bd68578ba5aeed59a936fe9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const std::string &amp;init) noexcept</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes with first 32 bytes read from string. If <computeroutput>init</computeroutput> is less than 32 bytes long missing values will be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing initial data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="154" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="154" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a8f149f4031fbe4bd18b48e59d7f5c2d7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const std::array&lt; char, 32 &gt; &amp;init) noexcept</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <param>
          <type>const std::array&lt; char, 32 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with array of 32 bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing initial data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="174" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a465dc1e3a5588e72c94c264214fe678a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(std::initializer_list&lt; char &gt; init)</argsstring>
        <name>Char256</name>
        <qualifiedname>avx::Char256::Char256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; char &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object using initializer list. The number of elements in list is not limited but only a maximum of first 32 will be used. If size of list is less than 32 bytes missing values will be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list of values to assign. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="182" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="182" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a88ee0bc85f72a8788905151b42e175c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::load</definition>
        <argsstring>(const char *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::Char256::load</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. If in Release mode no pointer checks are performed to improve performance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="207" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a0c00f3b507899e47274126acf21f006f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::save</definition>
        <argsstring>(std::array&lt; char, 32 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::Char256::save</qualifiedname>
        <param>
          <type>std::array&lt; char, 32 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="220" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a8578ef8fb1342c195de0a7b45ccb4e74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::save</definition>
        <argsstring>(char *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::Char256::save</qualifiedname>
        <param>
          <type>char *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (32x <computeroutput>char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve performance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="231" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="231" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a9963cc73beb54f8b8ccfb60cb2bfcbd5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::saveAligned</definition>
        <argsstring>(char *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::Char256::saveAligned</qualifiedname>
        <param>
          <type>char *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (32x <computeroutput>char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve performance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="247" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="247" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a458a653a43d298050f783368c24c383b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::Char256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::Char256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="260" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a1246ed93b8ed8b02dbb31d431ccbdd26" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::Char256::set</qualifiedname>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="266" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a2d54457a200cd29d8517ef30bbf9b88b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char avx::Char256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::Char256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. Returns element under given <computeroutput>index</computeroutput>. Does not support value assignment through this method (e.g. aV[0] = 1 won&apos;t work). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 31. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>index is not within the correct range and build type is debug <computeroutput>std::out_of_range</computeroutput> will be thrown. Otherwise bitwise AND will prevent index to be out of range. Side effect is that only 5 LSBs are used from <computeroutput>index</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="275" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="275" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a23886b5455d62cddde9d40f911870baf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Char256::operator==</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Char256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare with other vector for equality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If ALL values are the same then it will return <computeroutput>true</computeroutput>, otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="292" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a822e927d9af3595666e641687ab73538" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Char256::operator==</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Char256::operator==</qualifiedname>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare if ALL values in vector are the same as provided in <computeroutput>b</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If ALL values in vector are equal to <computeroutput>b</computeroutput> then will return <computeroutput>true</computeroutput>, otherwise <computeroutput>false</computeroutput> will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="303" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="303" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a6d5950c4ee5b9f22d1184f02e5252ea5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Char256::operator!=</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Char256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vectors for inequality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If ANY value doesn&apos;t match then <computeroutput>true</computeroutput> will be returned. Otherwise will return <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="315" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ad5d9eb23bcd8523ba8b05bfba3b56cde" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Char256::operator!=</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Char256::operator!=</qualifiedname>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vector with scalar for inequality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If ANY value doesn&apos;t match with <computeroutput>b</computeroutput> then <computeroutput>true</computeroutput> will be returned. Otherwise will return <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="326" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="326" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ad560ca2459ef6736c30d3c579c182a62" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator+</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Char256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two vectors. Simple call to <computeroutput>_mm256_add_epi8</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New object being a result of addition of vectors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="338" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="338" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a2cbbdd8321ff53ff5c8d027e00289fb3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator+</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Char256::operator+</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a scalar to vector. Similar to one using <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> but creates intermediate vector filled with value of <computeroutput>b</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New object being a result of adding value of <computeroutput>b</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="348" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1add8842c6d784982b19a971f63cf5b0fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator+=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Char256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds second vector and returns reference to existing vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the same object after performing addition (<computeroutput>*this</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="358" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a9e13911a16fd7b8a7734d4598869f917" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator+=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Char256::operator+=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a scalar to vector and returns reference to existing vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the same object after performing addition (<computeroutput>*this</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="370" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a47c27ad04bca6ee18f1d302302ac4898" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator-</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Char256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="376" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="376" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aac39a191268be9849ce85be1b7b60bf5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator-</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Char256::operator-</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="381" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="381" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a64c70862d644196e4cb33018e8a40819" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator-=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Char256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="386" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="386" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aaebe4a1e079ea90c62d072470a834db8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator-=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Char256::operator-=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="392" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a23e0cbfd2d8e7939dccd3f82e4c156db" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator*</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Char256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="398" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="398" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a7f965fbbbffa7c5cd7e5511d0ef53405" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator*</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Char256::operator*</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="428" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="428" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aee00bbbf76526abe6e7bd90f0801102a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator*=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Char256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="456" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="456" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a3a859f7895aa1968b163c2d81ff631b5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator*=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Char256::operator*=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="487" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="487" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1acf9fe3fa7b243f448130b98e30eebad8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator/</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Char256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="516" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="516" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a792b000aa862ebe929fd61f5482bfbb1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator/</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Char256::operator/</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="619" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="619" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a9c5f7a2a83b15b4dcfacecf81823a52c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator/=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Char256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="670" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="670" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a0f76bfd6a9ad845fd6776c58d4aef180" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator/=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Char256::operator/=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="740" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="740" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a4fa9f866ae390072f7f422450f440e33" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator%</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::Char256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="792" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="792" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a9f3c6adb3316e6098cc5ad0b7631759f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator%</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::Char256::operator%</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="865" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="865" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aebe7c325a08be65b9c7b161a8dc79922" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator%=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::Char256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="931" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="931" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aa32a261afa29237b2fa7b0a3fd72769b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator%=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::Char256::operator%=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1005" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1005" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1af22e568d0dabd72f3c585f850f1c503d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&amp;</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::Char256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1072" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1072" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a9d52e1aaa05f44abab150264e40c66d5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&amp;</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::Char256::operator&amp;</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1077" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1077" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a91eaefef0f5746b4d1dc019b086e0514" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator&amp;=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::Char256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1082" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1082" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a717dbc28c803825192fb3680ce27a760" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator&amp;=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::Char256::operator&amp;=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1088" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1088" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a237773844c230f7d24fc88377dc2f893" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator|</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::Char256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1094" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1094" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1adae77942add3ce1cac335d5d3f0c4807" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator|</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::Char256::operator|</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1099" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1099" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a663c47fffe0ac0276766c4c9cda727ac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator|=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::Char256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1104" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1104" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a8549879198c79ee02477e31d3271a5e2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator|=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::Char256::operator|=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1110" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1110" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a633a69a24427b02221ea77e8d99cd026" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator^</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::Char256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1116" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1116" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1af5d929550bd9830cf5e5b42d0e7aa2f2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator^</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::Char256::operator^</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1121" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1121" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a1d8761f90a20b102abf95ca6a0a5991d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator^=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::Char256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1126" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1126" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a21b1fd8842015d4a8514465ed212f706" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator^=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::Char256::operator^=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1132" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1132" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aeef62e39f0ef06d436cee0243705df53" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&lt;&lt;</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Char256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1138" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1138" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1adf1bb05a792b453f55f848ac88b8c704" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Char256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1177" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1177" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a430edde60d9b7c27c6abb8dc2ae43c55" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator&lt;&lt;=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::Char256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1193" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1193" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1af8dc092c13c6567e260df1b307a4c553" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::Char256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1236" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1236" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a2229c81d5e1240ffdf6aac02324e3de0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&gt;&gt;</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::Char256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1257" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1257" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a157c85e68e7094335acdb41e3825b735" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::Char256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1341" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1341" bodyend="1355"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a46cfd58dac31b700b44fecaab20fc510" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator&gt;&gt;=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::Char256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1358" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1358" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a1bbb12fddae3ac35fe6d7519db1bbdee" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256 &amp; avx::Char256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::Char256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1417" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1417" bodyend="1432"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ad7a80a687dd4bd0a39196d066d608419" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::Char256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise NOT.</para>
<para><simplesect kind="return"><para>New object with inversed bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1439" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1439" bodyend="1441"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ab4548801ba655542992f25e8d6351b78" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Char256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::Char256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A string representation of internal vector contents. All 32 stored values will be printed out.</para>
<para><simplesect kind="return"><para>String in the following format (for default constructor): &quot;Char256(0, 0, [...], 0)&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1448" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1448" bodyend="1457"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a3d1da06fe493ad0846fc8730a42c8fa9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Char256::toString</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toString</name>
        <qualifiedname>avx::Char256::toString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a string from internal vector. This function is safe even if data is not null-terminated.</para>
<para><simplesect kind="return"><para>String filled with contents of internal vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1465" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="1465" bodyend="1472"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_char256_1a39c584ba88b0f05147b21fdbd4355aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Char256 &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Char256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints content of vector as raw string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream, to which content will be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector, whose value will be written to stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to <computeroutput>os</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="1480" column="20" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.cpp" bodystart="4" bodyend="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class representing vectorized version of <computeroutput>char</computeroutput>. It can hold 32 individual <computeroutput>char</computeroutput> variables. Provides support for arithmetic and bitwise operators. <computeroutput><ref refid="classavx_1_1_char256_1ab4548801ba655542992f25e8d6351b78" kindref="member">str()</ref></computeroutput> method returns stored data as string. Supports printing directly to stream (cout). Class representing vectorized version of <computeroutput>char</computeroutput>. It can hold 32 individual <computeroutput>char</computeroutput> variables. Provides support for arithmetic and bitwise operators. <computeroutput><ref refid="classavx_1_1_char256_1ab4548801ba655542992f25e8d6351b78" kindref="member">str()</ref></computeroutput> method returns stored data as string. Supports printing directly to stream (cout). </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" line="30" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/char256.hpp" bodystart="30" bodyend="1482"/>
    <listofallmembers>
      <member refid="classavx_1_1_char256_1a8d633a013cac83406568f36a90de03bd" prot="private" virt="non-virtual"><scope>avx::Char256</scope><name>_sig_ext_epi16_epi32</name></member>
      <member refid="classavx_1_1_char256_1a6faeb9a2479ab7ae21f605e8287f0b82" prot="private" virt="non-virtual"><scope>avx::Char256</scope><name>_sig_ext_epi8_epi16</name></member>
      <member refid="classavx_1_1_char256_1a3b240165857b1aa158bea2a94b301b3a" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a7be047a1dd459e7e6946f9cffd883933" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a1d6781466d32005fd644c029f2dd8424" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a01d04381cab2fd2f52e36613e0960c11" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a658e49c48b392023eca1ff090a033f30" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1aba75a768f286411e78c8961a4fac6c3d" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1ac0a493c55bd68578ba5aeed59a936fe9" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a8f149f4031fbe4bd18b48e59d7f5c2d7" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a465dc1e3a5588e72c94c264214fe678a" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a458a653a43d298050f783368c24c383b" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>get</name></member>
      <member refid="classavx_1_1_char256_1a88ee0bc85f72a8788905151b42e175c2" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>load</name></member>
      <member refid="classavx_1_1_char256_1a6d5950c4ee5b9f22d1184f02e5252ea5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_char256_1ad5d9eb23bcd8523ba8b05bfba3b56cde" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_char256_1a4fa9f866ae390072f7f422450f440e33" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_char256_1a9f3c6adb3316e6098cc5ad0b7631759f" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_char256_1aebe7c325a08be65b9c7b161a8dc79922" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_char256_1aa32a261afa29237b2fa7b0a3fd72769b" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_char256_1af22e568d0dabd72f3c585f850f1c503d" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_char256_1a9d52e1aaa05f44abab150264e40c66d5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_char256_1a91eaefef0f5746b4d1dc019b086e0514" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_char256_1a717dbc28c803825192fb3680ce27a760" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_char256_1a23e0cbfd2d8e7939dccd3f82e4c156db" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_char256_1a7f965fbbbffa7c5cd7e5511d0ef53405" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_char256_1aee00bbbf76526abe6e7bd90f0801102a" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_char256_1a3a859f7895aa1968b163c2d81ff631b5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_char256_1ad560ca2459ef6736c30d3c579c182a62" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_char256_1a2cbbdd8321ff53ff5c8d027e00289fb3" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_char256_1add8842c6d784982b19a971f63cf5b0fa" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_char256_1a9e13911a16fd7b8a7734d4598869f917" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_char256_1a47c27ad04bca6ee18f1d302302ac4898" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_char256_1aac39a191268be9849ce85be1b7b60bf5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_char256_1a64c70862d644196e4cb33018e8a40819" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_char256_1aaebe4a1e079ea90c62d072470a834db8" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_char256_1acf9fe3fa7b243f448130b98e30eebad8" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_char256_1a792b000aa862ebe929fd61f5482bfbb1" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_char256_1a9c5f7a2a83b15b4dcfacecf81823a52c" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_char256_1a0f76bfd6a9ad845fd6776c58d4aef180" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_char256_1aeef62e39f0ef06d436cee0243705df53" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_char256_1adf1bb05a792b453f55f848ac88b8c704" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_char256_1a39c584ba88b0f05147b21fdbd4355aaf" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_char256_1a430edde60d9b7c27c6abb8dc2ae43c55" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_char256_1af8dc092c13c6567e260df1b307a4c553" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_char256_1a23886b5455d62cddde9d40f911870baf" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_char256_1a822e927d9af3595666e641687ab73538" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_char256_1a2229c81d5e1240ffdf6aac02324e3de0" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_char256_1a157c85e68e7094335acdb41e3825b735" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_char256_1a46cfd58dac31b700b44fecaab20fc510" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_char256_1a1bbb12fddae3ac35fe6d7519db1bbdee" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_char256_1a2d54457a200cd29d8517ef30bbf9b88b" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_char256_1a633a69a24427b02221ea77e8d99cd026" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_char256_1af5d929550bd9830cf5e5b42d0e7aa2f2" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_char256_1a1d8761f90a20b102abf95ca6a0a5991d" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_char256_1a21b1fd8842015d4a8514465ed212f706" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_char256_1a237773844c230f7d24fc88377dc2f893" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_char256_1adae77942add3ce1cac335d5d3f0c4807" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_char256_1a663c47fffe0ac0276766c4c9cda727ac" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_char256_1a8549879198c79ee02477e31d3271a5e2" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_char256_1ad7a80a687dd4bd0a39196d066d608419" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_char256_1a0c00f3b507899e47274126acf21f006f" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>save</name></member>
      <member refid="classavx_1_1_char256_1a8578ef8fb1342c195de0a7b45ccb4e74" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>save</name></member>
      <member refid="classavx_1_1_char256_1a9963cc73beb54f8b8ccfb60cb2bfcbd5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_char256_1a1246ed93b8ed8b02dbb31d431ccbdd26" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>set</name></member>
      <member refid="classavx_1_1_char256_1a0087a614a8b59ff5aa02c6463807b135" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>size</name></member>
      <member refid="classavx_1_1_char256_1add9f9f0a4bbe00c61577b5d54fdcba41" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_char256_1ab4548801ba655542992f25e8d6351b78" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>str</name></member>
      <member refid="classavx_1_1_char256_1a3d1da06fe493ad0846fc8730a42c8fa9" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>toString</name></member>
      <member refid="classavx_1_1_char256_1a2bf316ef8b4bdf470fea6072568c1b42" prot="private" virt="non-virtual"><scope>avx::Char256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
