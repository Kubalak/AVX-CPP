<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classavx_1_1_char256" kind="class" language="C++" prot="public">
    <compoundname>avx::Char256</compoundname>
    <includes refid="char256_8hpp" local="no">char256.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_char256_1add9f9f0a4bbe00c61577b5d54fdcba41" prot="public" static="no">
        <type>char</type>
        <definition>using avx::Char256::storedType =  char</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="80" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_char256_1a2bf316ef8b4bdf470fea6072568c1b42" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::Char256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="33" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_char256_1a0087a614a8b59ff5aa02c6463807b135" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int avx::Char256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="75" column="34" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classavx_1_1_char256_1a424d725e3619a89e2566c28a41fb4966" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::pair&lt; __m256i, __m256i &gt;</type>
        <definition>static std::pair&lt;__m256i,__m256i&gt; avx::Char256::_sig_ext_epi8_epi16</definition>
        <argsstring>(const __m256i &amp;vec) noexcept</argsstring>
        <name>_sig_ext_epi8_epi16</name>
        <param>
          <type>const __m256i &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign extend to two vectors containing 16 <computeroutput>short</computeroutput> values each.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing 32 <computeroutput>epi8</computeroutput> aka <computeroutput>char</computeroutput> values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of sign extended <computeroutput>epi16</computeroutput> aka <computeroutput>short</computeroutput> values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="40" column="30" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="40" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1abb04f58a7a8efb411d9a395f94cbf9b3" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::pair&lt; __m256i, __m256i &gt;</type>
        <definition>static std::pair&lt;__m256i,__m256i&gt; avx::Char256::_sig_ext_epi16_epi32</definition>
        <argsstring>(const __m256i &amp;vec) noexcept</argsstring>
        <name>_sig_ext_epi16_epi32</name>
        <param>
          <type>const __m256i &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign extend to two vectors containing 16 <computeroutput>short</computeroutput> values each.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing 32 <computeroutput>epi8</computeroutput> aka <computeroutput>char</computeroutput> values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of sign extended <computeroutput>epi16</computeroutput> aka <computeroutput>short</computeroutput> values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="58" column="30" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="58" bodyend="68"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_char256_1a3b240165857b1aa158bea2a94b301b3a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Char256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates object and fills with 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="85" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a7be047a1dd459e7e6946f9cffd883933" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const char init) noexcept</argsstring>
        <name>Char256</name>
        <param>
          <type>const char</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with provided value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be broadcasted to vector content. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="92" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a1d6781466d32005fd644c029f2dd8424" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>Char256</name>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with <computeroutput>__m256i</computeroutput> vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="98" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a01d04381cab2fd2f52e36613e0960c11" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const Char256 &amp;init) noexcept</argsstring>
        <name>Char256</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with another object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which content will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="104" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a658e49c48b392023eca1ff090a033f30" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const char *pSrc)</argsstring>
        <name>Char256</name>
        <param>
          <type>const char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with first 32 bytes of data stored under <computeroutput>addr</computeroutput>. Data does not need to be aligned to a 32 byte boundary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory holding data (minimum 32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>used in debug mode if <computeroutput>addr</computeroutput> is <computeroutput>nullptr</computeroutput> then <computeroutput>std::invalid_argument</computeroutput> will be thrown. Otherwise if <computeroutput>nullptr</computeroutput> is passed it will initialize vector with 0s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="113" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ac0a493c55bd68578ba5aeed59a936fe9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const std::string &amp;init) noexcept</argsstring>
        <name>Char256</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes with first 32 bytes read from string. If <computeroutput>init</computeroutput> is less than 32 bytes long missing values will be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing initial data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="133" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="133" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a8f149f4031fbe4bd18b48e59d7f5c2d7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(const std::array&lt; char, 32 &gt; &amp;init) noexcept</argsstring>
        <name>Char256</name>
        <param>
          <type>const std::array&lt; char, 32 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with array of 32 bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing initial data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="153" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a465dc1e3a5588e72c94c264214fe678a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Char256::Char256</definition>
        <argsstring>(std::initializer_list&lt; char &gt; init)</argsstring>
        <name>Char256</name>
        <param>
          <type>std::initializer_list&lt; char &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object using initializer list. The number of elements in list is not limited but only a maximum of first 32 will be used. If size of list is less than 32 bytes missing values will be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list of values to assign. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="161" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="161" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1afd859d164ff1212fc145809b6fdcb4e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::load</definition>
        <argsstring>(const char *pSrc) N_THROW_REL</argsstring>
        <name>load</name>
        <param>
          <type>const char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="186" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a0c00f3b507899e47274126acf21f006f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::save</definition>
        <argsstring>(std::array&lt; char, 32 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <param>
          <type>std::array&lt; char, 32 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="199" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a26cb526b1d2931b956bcf08e138b246c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::save</definition>
        <argsstring>(char *pDest) const N_THROW_REL</argsstring>
        <name>save</name>
        <param>
          <type>char *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (32x <computeroutput>char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="210" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="210" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a1c1de6483ddad6b40e4b30beb2db74af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::saveAligned</definition>
        <argsstring>(char *pDest) const N_THROW_REL</argsstring>
        <name>saveAligned</name>
        <param>
          <type>char *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (32x <computeroutput>char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="226" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="226" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a458a653a43d298050f783368c24c383b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::Char256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="239" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="239" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a1246ed93b8ed8b02dbb31d431ccbdd26" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Char256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="245" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a2d54457a200cd29d8517ef30bbf9b88b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char avx::Char256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. Returns element under given <computeroutput>index</computeroutput>. Does not support value assignment through this method (e.g. aV[0] = 1 won&apos;t work). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 31. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>index is not within the correct range and build type is debug <computeroutput>std::out_of_range</computeroutput> will be thrown. Otherwise bitwise AND will prevent index to be out of range. Side effect is that in case of out of index it will behave like <computeroutput>index % 32</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="254" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="254" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a23886b5455d62cddde9d40f911870baf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Char256::operator==</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare with other vector for equality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If ALL values are the same then it will return <computeroutput>true</computeroutput>, otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="271" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a822e927d9af3595666e641687ab73538" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Char256::operator==</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare if ALL values in vector are the same as provided in <computeroutput>b</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If ALL values in vector are equal to <computeroutput>b</computeroutput> then will return <computeroutput>true</computeroutput>, otherwise <computeroutput>false</computeroutput> will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="282" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a6d5950c4ee5b9f22d1184f02e5252ea5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Char256::operator!=</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vectors for inequality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If ANY value doesn&apos;t match then <computeroutput>true</computeroutput> will be returned. Otherwise will return <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="294" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ad5d9eb23bcd8523ba8b05bfba3b56cde" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Char256::operator!=</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vector with scalar for inequality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If ANY value doesn&apos;t match with <computeroutput>b</computeroutput> then <computeroutput>true</computeroutput> will be returned. Otherwise will return <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="305" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="305" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ad560ca2459ef6736c30d3c579c182a62" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator+</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two vectors. Simple call to <computeroutput>_mm256_add_epi8</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New object being a result of addition of vectors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="317" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a2cbbdd8321ff53ff5c8d027e00289fb3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator+</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a scalar to vector. Similar to one using <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> but creates intermediate vector filled with value of <computeroutput>b</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New object being a result of adding value of <computeroutput>b</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="327" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a8821d5763fad9e2ef192b71118c6303b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator+=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds second vector and returns reference to existing vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the same object after performing addition (<computeroutput>*this</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="337" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1abf47cd855adf2f2574ee937e32b8e79b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator+=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a scalar to vector and returns reference to existing vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the same object after performing addition (<computeroutput>*this</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="349" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a47c27ad04bca6ee18f1d302302ac4898" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator-</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="355" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="355" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aac39a191268be9849ce85be1b7b60bf5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator-</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="360" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="360" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a15b21072dadc85ee261fbab821f7eac0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator-=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="365" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ae181ebad903936a7fc3e80fb3bc0995c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator-=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="371" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a23e0cbfd2d8e7939dccd3f82e4c156db" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator*</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="377" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="377" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a7f965fbbbffa7c5cd7e5511d0ef53405" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator*</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="407" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="407" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a54206f22c2aa21c6ce6a6052297434ec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator*=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="435" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="435" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a5bc6fc4155f3f1c08cdb3e2fedb30893" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator*=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="466" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="466" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1acf9fe3fa7b243f448130b98e30eebad8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator/</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="495" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="495" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a792b000aa862ebe929fd61f5482bfbb1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator/</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="538" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="538" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a9d89ecd0bae573b83a0713b02faf7c83" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator/=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="573" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="573" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a6d80c8950bb03b6d4a514ca2f6e6f1da" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator/=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="617" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="617" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a4fa9f866ae390072f7f422450f440e33" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator%</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="653" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="653" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a9f3c6adb3316e6098cc5ad0b7631759f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator%</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="705" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="705" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a2830b8d87c348c372e82e2eb03328ec2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator%=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="751" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="751" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1adf12e5f1fcc8c64c6ded455443f61df7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator%=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="804" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="804" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1af22e568d0dabd72f3c585f850f1c503d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&amp;</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="851" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="851" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a9d52e1aaa05f44abab150264e40c66d5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&amp;</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="856" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="856" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1acae664f5340f9a935e2b3e49d7305318" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator&amp;=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="861" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="861" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1abbf1255096bc1ada6437ad38c1464fdb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator&amp;=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="867" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="867" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a237773844c230f7d24fc88377dc2f893" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator|</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="873" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="873" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1adae77942add3ce1cac335d5d3f0c4807" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator|</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="878" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="878" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a0dd61ca0e7c42cc58a3bd430c93ecd46" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator|=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="883" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="883" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a38872079c1e6bc264b494e8df15780c9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator|=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="889" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="889" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a633a69a24427b02221ea77e8d99cd026" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator^</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="895" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="895" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1af5d929550bd9830cf5e5b42d0e7aa2f2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator^</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="900" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="900" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a111865ac3f0b8a4a7b576e95822eb792" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator^=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="905" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="905" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aa67a0cb7e1865544c3e5e72b9d32d4de" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator^=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="911" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="911" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1aeef62e39f0ef06d436cee0243705df53" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&lt;&lt;</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="917" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="917" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1adf1bb05a792b453f55f848ac88b8c704" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="956" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="956" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a679637193aae801ffbc461f1f1705753" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator&lt;&lt;=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="972" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="972" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a77fd687c448c4722468fef379de9b960" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1015" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="1015" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a2229c81d5e1240ffdf6aac02324e3de0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&gt;&gt;</definition>
        <argsstring>(const Char256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1036" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="1036" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a157c85e68e7094335acdb41e3825b735" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1069" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="1069" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ab274018b3c85d0c2c9a61caa89cf0279" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator&gt;&gt;=</definition>
        <argsstring>(const Char256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1080" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="1080" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a311776540e74a97243d44c224ab14ef4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
        <definition>Char256&amp; avx::Char256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1114" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="1114" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ad7a80a687dd4bd0a39196d066d608419" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_char256" kindref="compound">Char256</ref></type>
        <definition>Char256 avx::Char256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise NOT.</para>
<para><simplesect kind="return"><para>New object with inversed bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1130" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="1130" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1ab4548801ba655542992f25e8d6351b78" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Char256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A string representation of internal vector contents. All 32 stored values will be printed out.</para>
<para><simplesect kind="return"><para>String in the following format (for default constructor): &quot;Char256(0, 0, [...], 0)&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1139" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="1139" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_char256_1a3d1da06fe493ad0846fc8730a42c8fa9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Char256::toString</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a string from internal vector. This function is safe even if data is not null-terminated.</para>
<para><simplesect kind="return"><para>String filled with contents of internal vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1156" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="1156" bodyend="1163"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_char256_1aa95442e536da29456c2f2233594923cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Char256 &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_char256" kindref="compound">Char256</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints content of vector as raw string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream, to which content will be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector, whose value will be written to stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to <computeroutput>os</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="1171" column="20" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.cpp" bodystart="4" bodyend="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class representing vectorized version of <computeroutput>char</computeroutput>. It can hold 32 individual <computeroutput>char</computeroutput> variables. Provides support for arithmetic and bitwise operators. <computeroutput><ref refid="classavx_1_1_char256_1ab4548801ba655542992f25e8d6351b78" kindref="member">str()</ref></computeroutput> method returns stored data as string. Supports printing directly to stream (cout). Class representing vectorized version of <computeroutput>char</computeroutput>. It can hold 32 individual <computeroutput>char</computeroutput> variables. Provides support for arithmetic and bitwise operators. <computeroutput><ref refid="classavx_1_1_char256_1ab4548801ba655542992f25e8d6351b78" kindref="member">str()</ref></computeroutput> method returns stored data as string. Supports printing directly to stream (cout). </para>
    </detaileddescription>
    <location file="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" line="30" column="5" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/char256.hpp" bodystart="30" bodyend="1173"/>
    <listofallmembers>
      <member refid="classavx_1_1_char256_1abb04f58a7a8efb411d9a395f94cbf9b3" prot="private" virt="non-virtual"><scope>avx::Char256</scope><name>_sig_ext_epi16_epi32</name></member>
      <member refid="classavx_1_1_char256_1a424d725e3619a89e2566c28a41fb4966" prot="private" virt="non-virtual"><scope>avx::Char256</scope><name>_sig_ext_epi8_epi16</name></member>
      <member refid="classavx_1_1_char256_1a3b240165857b1aa158bea2a94b301b3a" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a7be047a1dd459e7e6946f9cffd883933" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a1d6781466d32005fd644c029f2dd8424" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a01d04381cab2fd2f52e36613e0960c11" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a658e49c48b392023eca1ff090a033f30" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1ac0a493c55bd68578ba5aeed59a936fe9" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a8f149f4031fbe4bd18b48e59d7f5c2d7" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a465dc1e3a5588e72c94c264214fe678a" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>Char256</name></member>
      <member refid="classavx_1_1_char256_1a458a653a43d298050f783368c24c383b" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>get</name></member>
      <member refid="classavx_1_1_char256_1afd859d164ff1212fc145809b6fdcb4e5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>load</name></member>
      <member refid="classavx_1_1_char256_1a6d5950c4ee5b9f22d1184f02e5252ea5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_char256_1ad5d9eb23bcd8523ba8b05bfba3b56cde" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_char256_1a4fa9f866ae390072f7f422450f440e33" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_char256_1a9f3c6adb3316e6098cc5ad0b7631759f" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_char256_1a2830b8d87c348c372e82e2eb03328ec2" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_char256_1adf12e5f1fcc8c64c6ded455443f61df7" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_char256_1af22e568d0dabd72f3c585f850f1c503d" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_char256_1a9d52e1aaa05f44abab150264e40c66d5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_char256_1acae664f5340f9a935e2b3e49d7305318" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_char256_1abbf1255096bc1ada6437ad38c1464fdb" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_char256_1a23e0cbfd2d8e7939dccd3f82e4c156db" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_char256_1a7f965fbbbffa7c5cd7e5511d0ef53405" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_char256_1a54206f22c2aa21c6ce6a6052297434ec" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_char256_1a5bc6fc4155f3f1c08cdb3e2fedb30893" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_char256_1ad560ca2459ef6736c30d3c579c182a62" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_char256_1a2cbbdd8321ff53ff5c8d027e00289fb3" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_char256_1a8821d5763fad9e2ef192b71118c6303b" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_char256_1abf47cd855adf2f2574ee937e32b8e79b" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_char256_1a47c27ad04bca6ee18f1d302302ac4898" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_char256_1aac39a191268be9849ce85be1b7b60bf5" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_char256_1a15b21072dadc85ee261fbab821f7eac0" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_char256_1ae181ebad903936a7fc3e80fb3bc0995c" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_char256_1acf9fe3fa7b243f448130b98e30eebad8" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_char256_1a792b000aa862ebe929fd61f5482bfbb1" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_char256_1a9d89ecd0bae573b83a0713b02faf7c83" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_char256_1a6d80c8950bb03b6d4a514ca2f6e6f1da" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_char256_1aeef62e39f0ef06d436cee0243705df53" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_char256_1adf1bb05a792b453f55f848ac88b8c704" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_char256_1aa95442e536da29456c2f2233594923cb" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_char256_1a679637193aae801ffbc461f1f1705753" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_char256_1a77fd687c448c4722468fef379de9b960" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_char256_1a23886b5455d62cddde9d40f911870baf" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_char256_1a822e927d9af3595666e641687ab73538" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_char256_1a2229c81d5e1240ffdf6aac02324e3de0" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_char256_1a157c85e68e7094335acdb41e3825b735" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_char256_1ab274018b3c85d0c2c9a61caa89cf0279" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_char256_1a311776540e74a97243d44c224ab14ef4" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_char256_1a2d54457a200cd29d8517ef30bbf9b88b" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_char256_1a633a69a24427b02221ea77e8d99cd026" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_char256_1af5d929550bd9830cf5e5b42d0e7aa2f2" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_char256_1a111865ac3f0b8a4a7b576e95822eb792" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_char256_1aa67a0cb7e1865544c3e5e72b9d32d4de" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_char256_1a237773844c230f7d24fc88377dc2f893" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_char256_1adae77942add3ce1cac335d5d3f0c4807" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_char256_1a0dd61ca0e7c42cc58a3bd430c93ecd46" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_char256_1a38872079c1e6bc264b494e8df15780c9" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_char256_1ad7a80a687dd4bd0a39196d066d608419" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_char256_1a0c00f3b507899e47274126acf21f006f" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>save</name></member>
      <member refid="classavx_1_1_char256_1a26cb526b1d2931b956bcf08e138b246c" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>save</name></member>
      <member refid="classavx_1_1_char256_1a1c1de6483ddad6b40e4b30beb2db74af" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_char256_1a1246ed93b8ed8b02dbb31d431ccbdd26" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>set</name></member>
      <member refid="classavx_1_1_char256_1a0087a614a8b59ff5aa02c6463807b135" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>size</name></member>
      <member refid="classavx_1_1_char256_1add9f9f0a4bbe00c61577b5d54fdcba41" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_char256_1ab4548801ba655542992f25e8d6351b78" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>str</name></member>
      <member refid="classavx_1_1_char256_1a3d1da06fe493ad0846fc8730a42c8fa9" prot="public" virt="non-virtual"><scope>avx::Char256</scope><name>toString</name></member>
      <member refid="classavx_1_1_char256_1a2bf316ef8b4bdf470fea6072568c1b42" prot="private" virt="non-virtual"><scope>avx::Char256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
