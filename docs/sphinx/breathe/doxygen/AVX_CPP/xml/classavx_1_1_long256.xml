<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classavx_1_1_long256" kind="class" language="C++" prot="public">
    <compoundname>avx::Long256</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_long256_1a82594b26231b41a083e56ff4fe8ca566" prot="public" static="no">
        <type>long long</type>
        <definition>using avx::Long256::storedType =  long long</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="20" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_long256_1aa7a03aae0f919eb1f6dbf9fa5af9d611" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::Long256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="16" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_long256_1a430447a0c369a7c43f8c928bd9688a18" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int avx::Long256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="19" column="34" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_long256_1a9707a84592cef79f63fe6dd830c9b392" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Long256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="22" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1af544d0c79db280d376a61b78170b288a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(const long long *init)</argsstring>
        <name>Long256</name>
        <param>
          <type>const long long *</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="24" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a54f5d54a7a133813a6f5abc99df9430a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(const long long &amp;init) noexcept</argsstring>
        <name>Long256</name>
        <param>
          <type>const long long &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="28" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a6f6967f97ca96fa022feee1723b4c0f6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(__m256i init) noexcept</argsstring>
        <name>Long256</name>
        <param>
          <type>__m256i</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="32" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a5045ef5bb5a2354e06991f82e00a9c88" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(Long256 &amp;init) noexcept</argsstring>
        <name>Long256</name>
        <param>
          <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="34" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a07f3d02386883cf562e10c18ee5b4d5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(const Long256 &amp;init)</argsstring>
        <name>Long256</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="36" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a08dc49079e91996ed4ada75e7a908dc7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(const std::array&lt; long long, 4 &gt; &amp;init) noexcept</argsstring>
        <name>Long256</name>
        <param>
          <type>const std::array&lt; long long, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="38" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a91b4b6d11ff75287b70bfa7f96f58cc9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(const std::array&lt; int, 4 &gt; &amp;init) noexcept</argsstring>
        <name>Long256</name>
        <param>
          <type>const std::array&lt; int, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="42" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="42" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a37368b556436135afd8f4176840e79ff" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(const std::array&lt; short, 4 &gt; &amp;init) noexcept</argsstring>
        <name>Long256</name>
        <param>
          <type>const std::array&lt; short, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="52" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="52" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a8c31b2c5e2c4af4b0cff477b812f1d9b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(const std::array&lt; char, 4 &gt; &amp;init) noexcept</argsstring>
        <name>Long256</name>
        <param>
          <type>const std::array&lt; char, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="62" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="62" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a7a23d42e6055a1d2e0dc03f0713a5d3a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Long256::Long256</definition>
        <argsstring>(std::initializer_list&lt; long long &gt; init) noexcept</argsstring>
        <name>Long256</name>
        <param>
          <type>std::initializer_list&lt; long long &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="72" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="72" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1aba9d0832c5542ae3abcc436795a556e8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::Long256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="92" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a42a3044986407ba0bc45d57b4708d3a7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Long256::set</definition>
        <argsstring>(__m256i val) noexcept</argsstring>
        <name>set</name>
        <param>
          <type>__m256i</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="94" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a3fbddbd3dc29108f47b1639c4f2939b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Long256::load</definition>
        <argsstring>(const long long *sP)</argsstring>
        <name>load</name>
        <param>
          <type>const long long *</type>
          <declname>sP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="100" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a6cb1d690dc0550a8c0660594bd4b8fb6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Long256::save</definition>
        <argsstring>(std::array&lt; long long, 4 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <param>
          <type>std::array&lt; long long, 4 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves vector data into an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="109" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a918d710bbbe3d66971a7b631f7dfb48b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Long256::save</definition>
        <argsstring>(const long long *dest) const</argsstring>
        <name>save</name>
        <param>
          <type>const long long *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data into given memory address. Memory doesn&apos;t need to be aligned to any specific boundary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid (non-nullptr) memory address with size of at least 32 bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="118" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a4aacf2b7feee9e51d7b416cc48efbdc6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Long256::saveAligned</definition>
        <argsstring>(const long long *dest) const</argsstring>
        <name>saveAligned</name>
        <param>
          <type>const long long *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data from vector into given memory address. Memory needs to be aligned on 32 byte boundary. See <ulink url="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html">https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid (non-NULL) memory address aligned to 32-byte boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="127" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a07ec7611ea208a5687d7ac48f13a2bda" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>long long avx::Long256::operator[]</definition>
        <argsstring>(unsigned int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="131" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="131" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a95f3d3612450306a392aa79732532c0a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Long256::operator==</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal or <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="148" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1ae8ab701f3d45fb21af61a44cc5b460cb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Long256::operator==</definition>
        <argsstring>(const long long b) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal to passed value <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="159" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a9e90cda122bd6dc0df468c48cdefe782" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Long256::operator!=</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="171" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1ac160ac1779e777c0be373a567ddbb88f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Long256::operator!=</definition>
        <argsstring>(const long long b) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="182" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a2823928467a26c4bcaca39d5e531baf1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator+</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="189" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1ace01604721bee7b481e0da32a4e140be" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator+</definition>
        <argsstring>(const long long &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="193" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a3519d126833265d0cfd3fe8ccc8196dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator+=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="200" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a29f301ce0fa05e1b22fe99199dee78b8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator+=</definition>
        <argsstring>(const long long &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="205" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="205" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1af09cf38177a5eab0ae732154b9b10f82" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator-</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="213" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="213" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1abc4c4a4df118abee3eb6e9051c2f1678" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator-</definition>
        <argsstring>(const long long &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="220" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="220" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a78722a95b80e3f18e9705f169e6fa37b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator-=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="227" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="227" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1aa3632f2ad6da36668c07db6ddc36ce06" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator-=</definition>
        <argsstring>(const long long &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="236" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="236" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1aa445886887836bf98a19cb5b43e7d3ce" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator*</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="245" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="245" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a8cd6659e4debe51d3d3131398877be41" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator*</definition>
        <argsstring>(const long long &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="259" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="259" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1aa21431988b03436b82f6a548975e9927" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator*=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="273" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="273" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a0c3ed9c06c3140d6d6e226acb9c83a6e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator*=</definition>
        <argsstring>(const long long &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="289" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="289" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a4ef1fe0489066c93cf04f28d7f4e8097" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator/</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="304" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="304" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a5d03c23b906e6cb5310d67d1612e3b33" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator/</definition>
        <argsstring>(const long long &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="320" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="320" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a76fa4983232765506c554c01c2760e3e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator/=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="335" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="335" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1abc4c046b48b536f8b1501332ea46bf81" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator/=</definition>
        <argsstring>(const long long &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="352" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="352" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a4f75bec53ae968195eabae664c44dec6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator%</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="368" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="368" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1abfd692d6c29e4cfe6c6d3f4bcfc50d24" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator%</definition>
        <argsstring>(const long long &amp;b) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="380" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="380" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a40b1ba609024079101191b15502a173d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator%=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="391" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="391" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a13fc92bb25fc52cf745d35c3545ab73b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator%=</definition>
        <argsstring>(const long long &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="405" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="405" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a81363938bff203f67a4ffa5b4ea08a41" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator|</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="418" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="418" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1ab87455e050e8d08e705ee2e622459c06" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator|</definition>
        <argsstring>(const long long &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="425" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="425" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a38e9323529a2c70b388ccf89021f4914" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator|=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="432" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="432" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a13562dec097205753085cf6ec9dc1fc2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator|=</definition>
        <argsstring>(const long long &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="441" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="441" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a3cd7115e126fd7316510d324883bd037" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator^</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="450" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="450" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a86b891d5713fb2465e6d8ba83ea6f5b7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator^</definition>
        <argsstring>(const long long &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="457" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="457" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1aa2f3c03460796bb1289316cee6962a16" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator^=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="464" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="464" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a0ba469e84e880ac2d339c05ec750e440" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator^=</definition>
        <argsstring>(const long long &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="473" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="473" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a193eb932cfcf11ce9551f414daf88366" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator&amp;</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="482" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="482" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a8f624dc3fad4537cc0a8ba10cd3fc5c6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator&amp;</definition>
        <argsstring>(const long long &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="489" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="489" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a62708451e85815a82848af7b42d1010b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator&amp;=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="496" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="496" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a12860c4cc70db3104006ae6e1fec77a7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator&amp;=</definition>
        <argsstring>(const long long &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="505" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="505" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a472e46aafeadd2ec895eeff4da79f5cb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="514" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="514" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a9b0acba962c442425b4e648acf58f0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator&lt;&lt;</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="516" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="516" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1aed3142f8776970a81a6f9c40daa33dcc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="520" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="520" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1ae54b394dc7f1160d1d898164c47ea97e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator&lt;&lt;=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="524" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a772162c7fe97324508da44578bd814cd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="529" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="529" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1ac35193b4252e9224b05737f2d690f07e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator&gt;&gt;</definition>
        <argsstring>(const Long256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="534" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="534" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a2ddb69260088d36aed880d3b04da002a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 avx::Long256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="541" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="541" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a19c3e631fa3fa7050e8d5caaa3ea5b10" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator&gt;&gt;=</definition>
        <argsstring>(const Long256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="545" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="545" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1a959b26e7bbb82a6cb16cce045c2f12a3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &amp;</type>
        <definition>Long256&amp; avx::Long256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="550" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="550" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_long256_1af820eab728ae4ca7421c1cac2ae1de80" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Long256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="555" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="555" bodyend="564"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_long256_1a0fd3423c7c4dfab080839e0a0ac8d5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 sum</definition>
        <argsstring>(std::vector&lt; Long256 &gt; &amp;)</argsstring>
        <name>sum</name>
        <param>
          <type>std::vector&lt; <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &gt; &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="568" column="28" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.cpp" bodystart="5" bodyend="11"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_long256_1a913323b3443d4c2eca0934daaa88cf5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classavx_1_1_long256" kindref="compound">Long256</ref></type>
        <definition>Long256 sum</definition>
        <argsstring>(std::set&lt; Long256 &gt; &amp;)</argsstring>
        <name>sum</name>
        <param>
          <type>std::set&lt; <ref refid="classavx_1_1_long256" kindref="compound">Long256</ref> &gt; &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="569" column="28" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.cpp" bodystart="14" bodyend="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" line="14" column="5" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/long256.hpp" bodystart="14" bodyend="571"/>
    <listofallmembers>
      <member refid="classavx_1_1_long256_1aba9d0832c5542ae3abcc436795a556e8" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>get</name></member>
      <member refid="classavx_1_1_long256_1a3fbddbd3dc29108f47b1639c4f2939b4" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>load</name></member>
      <member refid="classavx_1_1_long256_1a9707a84592cef79f63fe6dd830c9b392" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1af544d0c79db280d376a61b78170b288a" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a54f5d54a7a133813a6f5abc99df9430a" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a6f6967f97ca96fa022feee1723b4c0f6" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a5045ef5bb5a2354e06991f82e00a9c88" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a07f3d02386883cf562e10c18ee5b4d5b" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a08dc49079e91996ed4ada75e7a908dc7" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a91b4b6d11ff75287b70bfa7f96f58cc9" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a37368b556436135afd8f4176840e79ff" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a8c31b2c5e2c4af4b0cff477b812f1d9b" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a7a23d42e6055a1d2e0dc03f0713a5d3a" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>Long256</name></member>
      <member refid="classavx_1_1_long256_1a9e90cda122bd6dc0df468c48cdefe782" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_long256_1ac160ac1779e777c0be373a567ddbb88f" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_long256_1a4f75bec53ae968195eabae664c44dec6" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_long256_1abfd692d6c29e4cfe6c6d3f4bcfc50d24" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_long256_1a40b1ba609024079101191b15502a173d" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_long256_1a13fc92bb25fc52cf745d35c3545ab73b" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_long256_1a193eb932cfcf11ce9551f414daf88366" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_long256_1a8f624dc3fad4537cc0a8ba10cd3fc5c6" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_long256_1a62708451e85815a82848af7b42d1010b" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_long256_1a12860c4cc70db3104006ae6e1fec77a7" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_long256_1aa445886887836bf98a19cb5b43e7d3ce" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_long256_1a8cd6659e4debe51d3d3131398877be41" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_long256_1aa21431988b03436b82f6a548975e9927" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_long256_1a0c3ed9c06c3140d6d6e226acb9c83a6e" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_long256_1a2823928467a26c4bcaca39d5e531baf1" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_long256_1ace01604721bee7b481e0da32a4e140be" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_long256_1a3519d126833265d0cfd3fe8ccc8196dd" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_long256_1a29f301ce0fa05e1b22fe99199dee78b8" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_long256_1af09cf38177a5eab0ae732154b9b10f82" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_long256_1abc4c4a4df118abee3eb6e9051c2f1678" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_long256_1a78722a95b80e3f18e9705f169e6fa37b" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_long256_1aa3632f2ad6da36668c07db6ddc36ce06" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_long256_1a4ef1fe0489066c93cf04f28d7f4e8097" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_long256_1a5d03c23b906e6cb5310d67d1612e3b33" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_long256_1a76fa4983232765506c554c01c2760e3e" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_long256_1abc4c046b48b536f8b1501332ea46bf81" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_long256_1a9b0acba962c442425b4e648acf58f0dc" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_long256_1aed3142f8776970a81a6f9c40daa33dcc" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_long256_1ae54b394dc7f1160d1d898164c47ea97e" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_long256_1a772162c7fe97324508da44578bd814cd" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_long256_1a95f3d3612450306a392aa79732532c0a" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_long256_1ae8ab701f3d45fb21af61a44cc5b460cb" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_long256_1ac35193b4252e9224b05737f2d690f07e" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_long256_1a2ddb69260088d36aed880d3b04da002a" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_long256_1a19c3e631fa3fa7050e8d5caaa3ea5b10" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_long256_1a959b26e7bbb82a6cb16cce045c2f12a3" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_long256_1a07ec7611ea208a5687d7ac48f13a2bda" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_long256_1a3cd7115e126fd7316510d324883bd037" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_long256_1a86b891d5713fb2465e6d8ba83ea6f5b7" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_long256_1aa2f3c03460796bb1289316cee6962a16" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_long256_1a0ba469e84e880ac2d339c05ec750e440" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_long256_1a81363938bff203f67a4ffa5b4ea08a41" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_long256_1ab87455e050e8d08e705ee2e622459c06" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_long256_1a38e9323529a2c70b388ccf89021f4914" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_long256_1a13562dec097205753085cf6ec9dc1fc2" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_long256_1a472e46aafeadd2ec895eeff4da79f5cb" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_long256_1a6cb1d690dc0550a8c0660594bd4b8fb6" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>save</name></member>
      <member refid="classavx_1_1_long256_1a918d710bbbe3d66971a7b631f7dfb48b" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>save</name></member>
      <member refid="classavx_1_1_long256_1a4aacf2b7feee9e51d7b416cc48efbdc6" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_long256_1a42a3044986407ba0bc45d57b4708d3a7" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>set</name></member>
      <member refid="classavx_1_1_long256_1a430447a0c369a7c43f8c928bd9688a18" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>size</name></member>
      <member refid="classavx_1_1_long256_1a82594b26231b41a083e56ff4fe8ca566" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_long256_1af820eab728ae4ca7421c1cac2ae1de80" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>str</name></member>
      <member refid="classavx_1_1_long256_1a0fd3423c7c4dfab080839e0a0ac8d5b5" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>sum</name></member>
      <member refid="classavx_1_1_long256_1a913323b3443d4c2eca0934daaa88cf5e" prot="public" virt="non-virtual"><scope>avx::Long256</scope><name>sum</name></member>
      <member refid="classavx_1_1_long256_1aa7a03aae0f919eb1f6dbf9fa5af9d611" prot="private" virt="non-virtual"><scope>avx::Long256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
