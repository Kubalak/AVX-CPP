<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_short256" kind="class" language="C++" prot="public">
    <compoundname>avx::Short256</compoundname>
    <includes refid="short256_8hpp" local="no">short256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_short256_1a3058175057294365c11239ac1356d9b7" prot="public" static="no">
        <type>short</type>
        <definition>using avx::Short256::storedType =  short</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::Short256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="33" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_short256_1a16999fea2aeac54782f794dbe7491e53" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::Short256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::Short256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="21" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_short256_1a3429f1a13db6db5efa6c306857e1bcb3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>const int</type>
        <definition>const int avx::Short256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::Short256::size</qualifiedname>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="28" column="40" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_short256_1aa128c6af282c522e85bc802e61a7ef1b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Sets zero to whole vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="38" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1afcc1efe51771b44867eee4ec50e5b080" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const Short256 &amp;init) noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with value from other vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="45" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a3c9fec9b43963b7634b385872cdbd042" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector but using <computeroutput>__m256i</computeroutput> type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="52" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a9df1fdd1af31460fea0d7f934e7a1ca7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const std::array&lt; short, 16 &gt; &amp;init) noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const std::array&lt; short, 16 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize vector with values read from an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="59" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1af6d4b43385ae9e52f2f5d29eaa2a0574" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const short *pSrc)</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const short *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector by loading data from memory (via <computeroutput>_mm256_lddq_si256</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid memory addres of minimal size of 256-bits (32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="66" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a0949aa3dd019d5dd3d8c2d6f98778507" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes all vector fields with single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>A literal value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="80" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2fb405c56cbdd2b8dde56c88e713107c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(std::initializer_list&lt; short &gt; init)</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; short &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with variable-length initializer list. If list contains less then 16 values missing values will be filled with zeros. Otherwise only first 16 values will be copied into vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="88" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="88" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ac085f845171473d6841976cb2919c83f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::load</definition>
        <argsstring>(const short *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::Short256::load</qualifiedname>
        <param>
          <type>const short *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="113" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="113" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a34543cb7eb1e5ff70afd1295f293ace8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::save</definition>
        <argsstring>(std::array&lt; short, 16 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::Short256::save</qualifiedname>
        <param>
          <type>std::array&lt; short, 16 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="126" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ab06d63dbc0e7e7a2000e9071e6269dc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::save</definition>
        <argsstring>(short *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::Short256::save</qualifiedname>
        <param>
          <type>short *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (16x <computeroutput>short</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="137" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="137" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a079c3610bc32db324cd4a4503ac7c9eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::saveAligned</definition>
        <argsstring>(short *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::Short256::saveAligned</qualifiedname>
        <param>
          <type>short *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (16x <computeroutput>short</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="153" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="153" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae72ae89bf693753229f57fa8d15223a7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::Short256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::Short256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="166" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2b2b1d77009c1998f7d497ac8d714212" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::Short256::set</qualifiedname>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="172" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aed471999bc6221584be97499496a95f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>short</type>
        <definition>short avx::Short256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::Short256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 15. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="181" column="19" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae0daa7cf99adb8efa6a7991c893fd05d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Short256::operator==</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Short256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal or <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="198" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="198" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a80ee1427f2f381c909f99c9bfb3a270c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Short256::operator==</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Short256::operator==</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal to passed value <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="212" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="212" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae50ac2925a95842c60e0c16a30e3acd1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Short256::operator!=</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Short256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="227" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="227" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1abd66e8e1a42167959eb0823dbd8665fb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Short256::operator!=</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Short256::operator!=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="241" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="241" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae14348eb7ddcb22bf7ff1e4fc279f451" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator+</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Short256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds values from other vector and returns new vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being a sum of this vector and <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="256" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ab89af37bee748bf8deea3b16b885a109" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator+</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Short256::operator+</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds single value across all vector fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to add to vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being a sum of this vector and <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="265" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="265" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a8eee8205ce3b426b7f1821ba69d187c2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator+=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Short256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two vectors together and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after adding <computeroutput>bV</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="274" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a10e5a141c2e15cd5a41cc8b4a9069176" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator+=</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Short256::operator+=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds scalar to vector and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after adding <computeroutput>b</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="284" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a206411e499aeeb14a22b99cbc7c7c644" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator-</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Short256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts values from vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of subtracting <computeroutput>bV</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="294" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="294" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a27b877806593d318bb1b16eb98c530c3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator-</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Short256::operator-</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts a single value from all vector fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to subtract from vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of subtracting <computeroutput>b</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="303" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="303" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ab78b9e248e8a556f5fce73bb5a0c0d91" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator-=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Short256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after subtracting <computeroutput>bV</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="312" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a003feb35d87bc07475d366aaaf5b5d32" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator-=</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Short256::operator-=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts scalar from vector and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to be subtracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after subtracting <computeroutput>b</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="322" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a5501a5b8e81e6e071aba659380146b5d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator*</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Short256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of multiplying vector by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="332" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a470acefbde3fac7cb6d0295d6bab52b6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator*</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Short256::operator*</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies all vector fields by a single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of multiplying vector by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="341" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="341" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aa6e6e693e9afaf5a4b63ac4fc3056ab1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator*=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Short256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after multiplying by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="350" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a83cf1a411663b2146ce0a0ed7c556fed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator*=</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Short256::operator*=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies vector by scalar and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after multiplying by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="360" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a73de1d8dbbf220f75c2413bb8da6bc34" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator/</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Short256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs an integer division. Utilizes casting to <computeroutput>float</computeroutput> to compensate for lack of native integer division in AVX and AVX2.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisors vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of integer division with truncation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="371" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="371" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1abe1b87e2f26a26a241fabdefb0d3ed77" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator/</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Short256::operator/</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs an integer division.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New object containing result of division with truncation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="406" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="406" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a114390fd7ca813c64ff72e9048a333ae" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator/=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Short256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after dividing by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="438" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="438" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aaa4ddbc9454c095438701654160cf3cc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator/=</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Short256::operator/=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs integer division with assignment by scalar.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref>&amp; Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="474" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="474" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a3989f754aa831fb59788b6f8ad817158" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator%</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::Short256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisors vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulo result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="509" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="509" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a3c5380fd9f39f05bac3e0572b71402c1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator%</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::Short256::operator%</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulo result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="547" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="547" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a6b2e282b9215fa05c56adea92414daa3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator%=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::Short256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs modulo operation. It does so by dividing vectors, multiplying result and subtracting from vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second modulo operand (divisor) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of modulo operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="581" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="581" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2bd224dd46efec87d33c890ecb8fa12b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator%=</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::Short256::operator%=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs modulo operation. It does so by dividing vectors, multiplying result and subtracting from vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second modulo operand (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the original vector holding modulo operation results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="618" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="618" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1afdf954919c07e577522ab7d913ccb67e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator|</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::Short256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of bitwise OR with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="654" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="654" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a85eb1423b28820f3fb68f6e173e21ced" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator|</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::Short256::operator|</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to OR with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of bitwise OR with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="663" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="663" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae11427edc1e45fa9a9428ad130e043bb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator|=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::Short256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR assignment operator. Applies bitwise OR between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="673" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="673" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a18e6f7af523195e7fbf4dffce865e058" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator|=</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::Short256::operator|=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR assignment operator. Applies bitwise OR between this vector and the given value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="684" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="684" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2644e68f65eae7de70b1ca07bc213cb9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&amp;</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::Short256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of bitwise AND with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="694" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="694" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ab6f63dd4cfeb62766c0d9895aa32c4f0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&amp;</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::Short256::operator&amp;</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to AND with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of bitwise AND with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="703" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="703" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ab03a68ee7efae34fa0c3394da2c64c7a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&amp;=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::Short256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND assignment operator. Applies bitwise AND between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="713" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="713" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a72e1a9590504048952287f97b8fdc4a8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&amp;=</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::Short256::operator&amp;=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND assignment operator. Applies bitwise AND between this vector and the given value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="724" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2cc8e60eeee17c03f6c32392af06e076" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator^</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::Short256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of bitwise XOR with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="734" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="734" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a05dc330dd026c6cb56aed44a6c56401f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator^</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::Short256::operator^</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to XOR with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector being result of bitwise XOR with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="743" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="743" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a6d94ba8f4a8e64911416e0b6b48fcbd0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator^=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::Short256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR assignment operator. Applies bitwise XOR between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="753" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="753" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2db46730b8b514ef3470b02e5714f4b7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator^=</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::Short256::operator^=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR assignment operator. Applies bitwise XOR between this vector and the given value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="764" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="764" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a34c2ccf9977b9ad83cf985c373aaf4f2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&lt;&lt;</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Short256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs left bitwise shift of corresponding values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector that specifies number of bits to shift (for each 16-bit value). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value of <computeroutput>v</computeroutput> shifted by number of bits specfied in <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="774" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="774" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a357077bcb5fa9153cbcd320420888f99" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;shift) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Short256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise left shift operator by scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits by which values should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector after left shift. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="806" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="806" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a1371fa0c7fee53c0e10e003d660890d0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&lt;&lt;=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::Short256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise left shift assignment operator (element-wise). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing number of bits for which each corresponding element should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="815" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="815" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ac30aa8e5b848fe2e03af3c26959f48ac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;shift) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::Short256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise left shift assignment operator by scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits by which values should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="842" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="842" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aa57a940e70fca4d3205539c2fe459398" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&gt;&gt;</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::Short256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise right shift operator (element-wise, arithmetic shift). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing number of bits for which each corresponding element should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector after right shift. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="852" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="852" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aa17751f8eaca804461c844b60bcf6f68" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;shift) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::Short256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise right shift operator by scalar (arithmetic shift). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits by which values should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector after right shift. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="882" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="882" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a12ceef5ca182bef2f9150a858f2534d1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&gt;&gt;=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::Short256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise right shift assignment operator (element-wise, arithmetic shift). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing number of bits for which each corresponding element should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="891" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="891" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a1d228441e6828fb98f0f71d069812e94" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;shift) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::Short256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise right shift assignment operator by scalar (arithmetic shift). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits by which values should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="922" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="922" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a63cc935bd0562b8e654a60972874da30" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::Short256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise NOT operator. <simplesect kind="return"><para><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> New vector with all bits inverted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="931" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="931" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a14d416aaac181668ab59e5676d8654cf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Short256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::Short256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns string representation of vector. Printing will result in Short256(&lt;vector_values&gt;) eg. Short256(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) <simplesect kind="return"><para>std::string String representation of underlying vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="940" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="940" bodyend="949"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>short</computeroutput>. Can hold 16 individual <computeroutput>short</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="19" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="19" bodyend="950"/>
    <listofallmembers>
      <member refid="classavx_1_1_short256_1ae72ae89bf693753229f57fa8d15223a7" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>get</name></member>
      <member refid="classavx_1_1_short256_1ac085f845171473d6841976cb2919c83f" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>load</name></member>
      <member refid="classavx_1_1_short256_1ae50ac2925a95842c60e0c16a30e3acd1" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_short256_1abd66e8e1a42167959eb0823dbd8665fb" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_short256_1a3989f754aa831fb59788b6f8ad817158" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_short256_1a3c5380fd9f39f05bac3e0572b71402c1" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_short256_1a6b2e282b9215fa05c56adea92414daa3" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_short256_1a2bd224dd46efec87d33c890ecb8fa12b" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_short256_1a2644e68f65eae7de70b1ca07bc213cb9" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_short256_1ab6f63dd4cfeb62766c0d9895aa32c4f0" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_short256_1ab03a68ee7efae34fa0c3394da2c64c7a" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_short256_1a72e1a9590504048952287f97b8fdc4a8" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_short256_1a5501a5b8e81e6e071aba659380146b5d" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_short256_1a470acefbde3fac7cb6d0295d6bab52b6" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_short256_1aa6e6e693e9afaf5a4b63ac4fc3056ab1" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_short256_1a83cf1a411663b2146ce0a0ed7c556fed" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_short256_1ae14348eb7ddcb22bf7ff1e4fc279f451" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_short256_1ab89af37bee748bf8deea3b16b885a109" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_short256_1a8eee8205ce3b426b7f1821ba69d187c2" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_short256_1a10e5a141c2e15cd5a41cc8b4a9069176" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_short256_1a206411e499aeeb14a22b99cbc7c7c644" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_short256_1a27b877806593d318bb1b16eb98c530c3" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_short256_1ab78b9e248e8a556f5fce73bb5a0c0d91" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_short256_1a003feb35d87bc07475d366aaaf5b5d32" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_short256_1a73de1d8dbbf220f75c2413bb8da6bc34" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_short256_1abe1b87e2f26a26a241fabdefb0d3ed77" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_short256_1a114390fd7ca813c64ff72e9048a333ae" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_short256_1aaa4ddbc9454c095438701654160cf3cc" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_short256_1a34c2ccf9977b9ad83cf985c373aaf4f2" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_short256_1a357077bcb5fa9153cbcd320420888f99" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_short256_1a1371fa0c7fee53c0e10e003d660890d0" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_short256_1ac30aa8e5b848fe2e03af3c26959f48ac" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_short256_1ae0daa7cf99adb8efa6a7991c893fd05d" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_short256_1a80ee1427f2f381c909f99c9bfb3a270c" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_short256_1aa57a940e70fca4d3205539c2fe459398" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_short256_1aa17751f8eaca804461c844b60bcf6f68" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_short256_1a12ceef5ca182bef2f9150a858f2534d1" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_short256_1a1d228441e6828fb98f0f71d069812e94" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_short256_1aed471999bc6221584be97499496a95f8" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_short256_1a2cc8e60eeee17c03f6c32392af06e076" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_short256_1a05dc330dd026c6cb56aed44a6c56401f" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_short256_1a6d94ba8f4a8e64911416e0b6b48fcbd0" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_short256_1a2db46730b8b514ef3470b02e5714f4b7" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_short256_1afdf954919c07e577522ab7d913ccb67e" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_short256_1a85eb1423b28820f3fb68f6e173e21ced" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_short256_1ae11427edc1e45fa9a9428ad130e043bb" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_short256_1a18e6f7af523195e7fbf4dffce865e058" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_short256_1a63cc935bd0562b8e654a60972874da30" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_short256_1a34543cb7eb1e5ff70afd1295f293ace8" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>save</name></member>
      <member refid="classavx_1_1_short256_1ab06d63dbc0e7e7a2000e9071e6269dc8" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>save</name></member>
      <member refid="classavx_1_1_short256_1a079c3610bc32db324cd4a4503ac7c9eb" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_short256_1a2b2b1d77009c1998f7d497ac8d714212" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>set</name></member>
      <member refid="classavx_1_1_short256_1aa128c6af282c522e85bc802e61a7ef1b" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1afcc1efe51771b44867eee4ec50e5b080" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a3c9fec9b43963b7634b385872cdbd042" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a9df1fdd1af31460fea0d7f934e7a1ca7" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1af6d4b43385ae9e52f2f5d29eaa2a0574" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a0949aa3dd019d5dd3d8c2d6f98778507" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a2fb405c56cbdd2b8dde56c88e713107c" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a3429f1a13db6db5efa6c306857e1bcb3" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>size</name></member>
      <member refid="classavx_1_1_short256_1a3058175057294365c11239ac1356d9b7" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_short256_1a14d416aaac181668ab59e5676d8654cf" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>str</name></member>
      <member refid="classavx_1_1_short256_1a16999fea2aeac54782f794dbe7491e53" prot="private" virt="non-virtual"><scope>avx::Short256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
