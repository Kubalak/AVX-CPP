<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_short256" kind="class" language="C++" prot="public">
    <compoundname>avx::Short256</compoundname>
    <includes refid="short256_8hpp" local="no">short256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_short256_1a3058175057294365c11239ac1356d9b7" prot="public" static="no">
        <type>short</type>
        <definition>using avx::Short256::storedType =  short</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::Short256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="33" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_short256_1a16999fea2aeac54782f794dbe7491e53" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::Short256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::Short256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="21" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_short256_1a3429f1a13db6db5efa6c306857e1bcb3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>const int</type>
        <definition>const int avx::Short256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::Short256::size</qualifiedname>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="28" column="40" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_short256_1aa128c6af282c522e85bc802e61a7ef1b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Sets zero to whole vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="38" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1afcc1efe51771b44867eee4ec50e5b080" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const Short256 &amp;init) noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with value from other vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="45" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a3c9fec9b43963b7634b385872cdbd042" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector but using <computeroutput>__m256i</computeroutput> type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="52" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a9df1fdd1af31460fea0d7f934e7a1ca7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const std::array&lt; short, 16 &gt; &amp;init) noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const std::array&lt; short, 16 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize vector with values read from an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="59" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1af6d4b43385ae9e52f2f5d29eaa2a0574" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const short *pSrc)</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const short *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector by loading data from memory (via <computeroutput>_mm256_lddq_si256</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid memory addres of minimal size of 256-bits (32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="66" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a0949aa3dd019d5dd3d8c2d6f98778507" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(const short b) noexcept</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes all vector fields with single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>A literal value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="80" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2fb405c56cbdd2b8dde56c88e713107c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Short256::Short256</definition>
        <argsstring>(std::initializer_list&lt; short &gt; init)</argsstring>
        <name>Short256</name>
        <qualifiedname>avx::Short256::Short256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; short &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with variable-length initializer list. If list contains less then 16 values missing values will be filled with zeros. Otherwise only first 16 values will be copied into vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="88" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="88" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ac085f845171473d6841976cb2919c83f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::load</definition>
        <argsstring>(const short *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::Short256::load</qualifiedname>
        <param>
          <type>const short *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="113" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="113" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a34543cb7eb1e5ff70afd1295f293ace8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::save</definition>
        <argsstring>(std::array&lt; short, 16 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::Short256::save</qualifiedname>
        <param>
          <type>std::array&lt; short, 16 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="126" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ab06d63dbc0e7e7a2000e9071e6269dc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::save</definition>
        <argsstring>(short *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::Short256::save</qualifiedname>
        <param>
          <type>short *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (16x <computeroutput>short</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="137" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="137" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a079c3610bc32db324cd4a4503ac7c9eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::saveAligned</definition>
        <argsstring>(short *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::Short256::saveAligned</qualifiedname>
        <param>
          <type>short *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (16x <computeroutput>short</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="153" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="153" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae72ae89bf693753229f57fa8d15223a7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::Short256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::Short256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="166" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2b2b1d77009c1998f7d497ac8d714212" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Short256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::Short256::set</qualifiedname>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="172" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aed471999bc6221584be97499496a95f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>short</type>
        <definition>short avx::Short256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::Short256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 15. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="181" column="19" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae0daa7cf99adb8efa6a7991c893fd05d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Short256::operator==</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Short256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal or <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="198" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a80ee1427f2f381c909f99c9bfb3a270c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Short256::operator==</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Short256::operator==</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal to passed value <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="209" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae50ac2925a95842c60e0c16a30e3acd1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Short256::operator!=</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Short256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="221" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1abd66e8e1a42167959eb0823dbd8665fb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Short256::operator!=</definition>
        <argsstring>(const short b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Short256::operator!=</qualifiedname>
        <param>
          <type>const short</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="232" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="232" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae14348eb7ddcb22bf7ff1e4fc279f451" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator+</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Short256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="238" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a1c3faa6e766509540ff14d0227e801be" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator+</definition>
        <argsstring>(const short &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Short256::operator+</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="242" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a8eee8205ce3b426b7f1821ba69d187c2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator+=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Short256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="246" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a48f7a25fb2af9ab4381547b560955ffc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator+=</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Short256::operator+=</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="251" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a206411e499aeeb14a22b99cbc7c7c644" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator-</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Short256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="256" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a388e8d614c2fe69303cc3aa6220bcfb3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator-</definition>
        <argsstring>(const short &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Short256::operator-</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="260" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ab78b9e248e8a556f5fce73bb5a0c0d91" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator-=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Short256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="264" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae2916772dd69ee6b73e0d713b78f1f27" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator-=</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Short256::operator-=</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="269" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a5501a5b8e81e6e071aba659380146b5d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator*</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Short256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="274" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a9440a32753b5aa4f403abb76208cc703" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator*</definition>
        <argsstring>(const short &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Short256::operator*</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="278" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aa6e6e693e9afaf5a4b63ac4fc3056ab1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator*=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Short256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="282" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a999880febc8aadec6b689c65a0e49557" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator*=</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Short256::operator*=</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="287" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a73de1d8dbbf220f75c2413bb8da6bc34" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator/</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Short256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs an integer division. Utilizes casting to <computeroutput>float</computeroutput> to compensate for lack of native integer division in AVX and AVX2.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisors vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of integer division with truncation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="298" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="298" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a0647a2bbb6512b947cd3aebe72f351e6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator/</definition>
        <argsstring>(const short &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Short256::operator/</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs an integer division.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of integer division with truncation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="333" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="333" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a114390fd7ca813c64ff72e9048a333ae" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator/=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Short256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="360" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="360" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a6469869ad44111741c6d73149d79295c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator/=</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Short256::operator/=</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="390" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="390" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a3989f754aa831fb59788b6f8ad817158" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator%</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::Short256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisors vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulo result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="425" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="425" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a7dca86199384be723d69c3f6452d645c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator%</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::Short256::operator%</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a modulo operation.</para>
<para>NOTE: Analogously as in <computeroutput>/</computeroutput> and <computeroutput>/=</computeroutput> operators values are casted before performing a division. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulo result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="464" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="464" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a6b2e282b9215fa05c56adea92414daa3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator%=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::Short256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="494" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="494" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a78984778f13930553c15e43d594afb02" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator%=</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::Short256::operator%=</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="526" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="526" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1afdf954919c07e577522ab7d913ccb67e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator|</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::Short256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="556" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="556" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a7056e0693fd5399a08775e356c7f1292" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator|</definition>
        <argsstring>(const short &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::Short256::operator|</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="560" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="560" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ae11427edc1e45fa9a9428ad130e043bb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator|=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::Short256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="564" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1afc0db19844986982ca9691757993c12d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator|=</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::Short256::operator|=</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="569" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2644e68f65eae7de70b1ca07bc213cb9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&amp;</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::Short256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="574" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="574" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1af19a60e9a45cbfaa856e9eecff27fd0f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&amp;</definition>
        <argsstring>(const short &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::Short256::operator&amp;</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="578" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="578" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ab03a68ee7efae34fa0c3394da2c64c7a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&amp;=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::Short256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="582" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="582" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a7dbd6386b04eabca679f0348d02ef105" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&amp;=</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::Short256::operator&amp;=</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="587" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a2cc8e60eeee17c03f6c32392af06e076" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator^</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::Short256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="592" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="592" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a197b9d9cdffadb4d91021c900aec2627" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator^</definition>
        <argsstring>(const short &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::Short256::operator^</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="596" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="596" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a6d94ba8f4a8e64911416e0b6b48fcbd0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator^=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::Short256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="600" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="600" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a77cfdd86287443173a83d024260d55a6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator^=</definition>
        <argsstring>(const short &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::Short256::operator^=</qualifiedname>
        <param>
          <type>const short &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="605" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a34c2ccf9977b9ad83cf985c373aaf4f2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&lt;&lt;</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Short256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs left bitwise shift of corresponding values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector that specifies number of bits to shift (for each 16-bit value). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value of <computeroutput>v</computeroutput> shifted by number of bits specfied in <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="615" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="615" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a357077bcb5fa9153cbcd320420888f99" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;shift) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Short256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="642" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="642" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a1371fa0c7fee53c0e10e003d660890d0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&lt;&lt;=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::Short256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="646" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="646" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1ac30aa8e5b848fe2e03af3c26959f48ac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;shift) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::Short256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="668" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="668" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aa57a940e70fca4d3205539c2fe459398" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&gt;&gt;</definition>
        <argsstring>(const Short256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::Short256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="673" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="673" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1aa17751f8eaca804461c844b60bcf6f68" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;shift) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::Short256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="698" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="698" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a12ceef5ca182bef2f9150a858f2534d1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&gt;&gt;=</definition>
        <argsstring>(const Short256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::Short256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="702" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="702" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a1d228441e6828fb98f0f71d069812e94" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref> &amp;</type>
        <definition>Short256 &amp; avx::Short256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;shift) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::Short256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="728" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="728" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a63cc935bd0562b8e654a60972874da30" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_short256" kindref="compound">Short256</ref></type>
        <definition>Short256 avx::Short256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::Short256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="733" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="733" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_short256_1a14d416aaac181668ab59e5676d8654cf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Short256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::Short256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="737" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="737" bodyend="746"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>short</computeroutput>. Can hold 16 individual <computeroutput>short</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" line="19" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/short256.hpp" bodystart="19" bodyend="747"/>
    <listofallmembers>
      <member refid="classavx_1_1_short256_1ae72ae89bf693753229f57fa8d15223a7" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>get</name></member>
      <member refid="classavx_1_1_short256_1ac085f845171473d6841976cb2919c83f" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>load</name></member>
      <member refid="classavx_1_1_short256_1ae50ac2925a95842c60e0c16a30e3acd1" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_short256_1abd66e8e1a42167959eb0823dbd8665fb" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_short256_1a3989f754aa831fb59788b6f8ad817158" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_short256_1a7dca86199384be723d69c3f6452d645c" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_short256_1a6b2e282b9215fa05c56adea92414daa3" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_short256_1a78984778f13930553c15e43d594afb02" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_short256_1a2644e68f65eae7de70b1ca07bc213cb9" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_short256_1af19a60e9a45cbfaa856e9eecff27fd0f" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_short256_1ab03a68ee7efae34fa0c3394da2c64c7a" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_short256_1a7dbd6386b04eabca679f0348d02ef105" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_short256_1a5501a5b8e81e6e071aba659380146b5d" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_short256_1a9440a32753b5aa4f403abb76208cc703" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_short256_1aa6e6e693e9afaf5a4b63ac4fc3056ab1" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_short256_1a999880febc8aadec6b689c65a0e49557" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_short256_1ae14348eb7ddcb22bf7ff1e4fc279f451" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_short256_1a1c3faa6e766509540ff14d0227e801be" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_short256_1a8eee8205ce3b426b7f1821ba69d187c2" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_short256_1a48f7a25fb2af9ab4381547b560955ffc" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_short256_1a206411e499aeeb14a22b99cbc7c7c644" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_short256_1a388e8d614c2fe69303cc3aa6220bcfb3" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_short256_1ab78b9e248e8a556f5fce73bb5a0c0d91" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_short256_1ae2916772dd69ee6b73e0d713b78f1f27" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_short256_1a73de1d8dbbf220f75c2413bb8da6bc34" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_short256_1a0647a2bbb6512b947cd3aebe72f351e6" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_short256_1a114390fd7ca813c64ff72e9048a333ae" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_short256_1a6469869ad44111741c6d73149d79295c" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_short256_1a34c2ccf9977b9ad83cf985c373aaf4f2" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_short256_1a357077bcb5fa9153cbcd320420888f99" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_short256_1a1371fa0c7fee53c0e10e003d660890d0" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_short256_1ac30aa8e5b848fe2e03af3c26959f48ac" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_short256_1ae0daa7cf99adb8efa6a7991c893fd05d" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_short256_1a80ee1427f2f381c909f99c9bfb3a270c" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_short256_1aa57a940e70fca4d3205539c2fe459398" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_short256_1aa17751f8eaca804461c844b60bcf6f68" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_short256_1a12ceef5ca182bef2f9150a858f2534d1" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_short256_1a1d228441e6828fb98f0f71d069812e94" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_short256_1aed471999bc6221584be97499496a95f8" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_short256_1a2cc8e60eeee17c03f6c32392af06e076" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_short256_1a197b9d9cdffadb4d91021c900aec2627" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_short256_1a6d94ba8f4a8e64911416e0b6b48fcbd0" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_short256_1a77cfdd86287443173a83d024260d55a6" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_short256_1afdf954919c07e577522ab7d913ccb67e" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_short256_1a7056e0693fd5399a08775e356c7f1292" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_short256_1ae11427edc1e45fa9a9428ad130e043bb" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_short256_1afc0db19844986982ca9691757993c12d" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_short256_1a63cc935bd0562b8e654a60972874da30" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_short256_1a34543cb7eb1e5ff70afd1295f293ace8" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>save</name></member>
      <member refid="classavx_1_1_short256_1ab06d63dbc0e7e7a2000e9071e6269dc8" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>save</name></member>
      <member refid="classavx_1_1_short256_1a079c3610bc32db324cd4a4503ac7c9eb" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_short256_1a2b2b1d77009c1998f7d497ac8d714212" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>set</name></member>
      <member refid="classavx_1_1_short256_1aa128c6af282c522e85bc802e61a7ef1b" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1afcc1efe51771b44867eee4ec50e5b080" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a3c9fec9b43963b7634b385872cdbd042" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a9df1fdd1af31460fea0d7f934e7a1ca7" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1af6d4b43385ae9e52f2f5d29eaa2a0574" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a0949aa3dd019d5dd3d8c2d6f98778507" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a2fb405c56cbdd2b8dde56c88e713107c" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>Short256</name></member>
      <member refid="classavx_1_1_short256_1a3429f1a13db6db5efa6c306857e1bcb3" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>size</name></member>
      <member refid="classavx_1_1_short256_1a3058175057294365c11239ac1356d9b7" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_short256_1a14d416aaac181668ab59e5676d8654cf" prot="public" virt="non-virtual"><scope>avx::Short256</scope><name>str</name></member>
      <member refid="classavx_1_1_short256_1a16999fea2aeac54782f794dbe7491e53" prot="private" virt="non-virtual"><scope>avx::Short256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
