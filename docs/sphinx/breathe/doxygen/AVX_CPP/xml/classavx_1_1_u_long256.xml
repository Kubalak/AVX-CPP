<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_long256" kind="class" language="C++" prot="public">
    <compoundname>avx::ULong256</compoundname>
    <includes refid="ulong256_8hpp" local="no">ulong256.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_long256_1a39143d0221c2c72aea59afa5c782abca" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>using avx::ULong256::storedType =  unsigned long long</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="27" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_long256_1a7970be8325dbeea3d4a52192b493b44a" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::ULong256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="23" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_long256_1a59e8929ab3a03d8fb40b79f4437cb5fa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int avx::ULong256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="26" column="34" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa15a63145e8fd02b04dd459cca921abe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>() noexcept</argsstring>
        <name>ULong256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="29" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1abc9ba826a17307403e77a091eebb319b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(__m256i init)</argsstring>
        <name>ULong256</name>
        <param>
          <type>__m256i</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="31" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aff9dedbebdfe8d493285ec98a4d66fc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const unsigned long long &amp;init)</argsstring>
        <name>ULong256</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="33" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a60073c414eff10b63c4da983c8babfc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const ULong256 &amp;init)</argsstring>
        <name>ULong256</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="37" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ab3dbb611c93bae3396f3561ddf010f53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const unsigned long long *init)</argsstring>
        <name>ULong256</name>
        <param>
          <type>const unsigned long long *</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="39" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa9c7a2829eadead35e220fa8588ddecf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const std::array&lt; unsigned long long, 4 &gt; &amp;init)</argsstring>
        <name>ULong256</name>
        <param>
          <type>const std::array&lt; unsigned long long, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="43" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ad242fa936fe10a67a262c4e36a1b90a2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const std::array&lt; unsigned int, 4 &gt; &amp;init) noexcept</argsstring>
        <name>ULong256</name>
        <param>
          <type>const std::array&lt; unsigned int, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="47" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="47" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a36d5792804b654f900886ab72d63799b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const std::array&lt; unsigned short, 4 &gt; &amp;init) noexcept</argsstring>
        <name>ULong256</name>
        <param>
          <type>const std::array&lt; unsigned short, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="57" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="57" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8629563ab0e12e816a6f7b5c38885959" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const std::array&lt; unsigned char, 4 &gt; &amp;init) noexcept</argsstring>
        <name>ULong256</name>
        <param>
          <type>const std::array&lt; unsigned char, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="67" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="67" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a9dada5c35ed69017bcaea95a683a2dfd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(std::initializer_list&lt; unsigned long long &gt; init) noexcept</argsstring>
        <name>ULong256</name>
        <param>
          <type>std::initializer_list&lt; unsigned long long &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="77" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="77" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8f0f43f1bde954af6693d9b0fdcdb934" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::ULong256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="97" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ab85ad51b963639abc86275e54946c100" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::set</definition>
        <argsstring>(__m256i val) noexcept</argsstring>
        <name>set</name>
        <param>
          <type>__m256i</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="98" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a6ed8b1ea9b47cd703ebc7347c8ebd680" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::load</definition>
        <argsstring>(const unsigned long long *sP)</argsstring>
        <name>load</name>
        <param>
          <type>const unsigned long long *</type>
          <declname>sP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="104" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a9758e4c235dc5977ea756a32536ecf59" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::save</definition>
        <argsstring>(std::array&lt; unsigned long long, 4 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <param>
          <type>std::array&lt; unsigned long long, 4 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves vector data into an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="113" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ae8a36882033e5322a5e41ebd71c2bd13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::save</definition>
        <argsstring>(unsigned long long *dest) const</argsstring>
        <name>save</name>
        <param>
          <type>unsigned long long *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data into given memory address. Memory doesn&apos;t need to be aligned to any specific boundary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid (non-nullptr) memory address with size of at least 32 bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="122" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="122" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a72e51a856cc9e280e6a61f95ff7fdcc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::saveAligned</definition>
        <argsstring>(unsigned long long *dest) const</argsstring>
        <name>saveAligned</name>
        <param>
          <type>unsigned long long *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data from vector into given memory address. Memory needs to be aligned on 32 byte boundary. See <ulink url="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html">https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid (non-NULL) memory address aligned to 32-byte boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="142" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="142" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a31cacf130e5797e6165a744cd4b59782" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long avx::ULong256::operator[]</definition>
        <argsstring>(unsigned int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="157" column="32" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="157" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8bfa8eb27a2d8c781735dee83a170935" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::ULong256::operator==</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal or <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="176" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a63ab8999fc84047b710a500db411c179" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::ULong256::operator==</definition>
        <argsstring>(const unsigned long long b) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal to passed value <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="187" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a9f0e7fa843ae5701f5360430287c7782" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::ULong256::operator!=</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="199" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a6d92f7d0eb4b63369fcbac6864f69880" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::ULong256::operator!=</definition>
        <argsstring>(const unsigned long long b) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="210" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1afcfe7134e46a94694fa36535738e1289" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator+</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds values from other vector and returns new vector. <simplesect kind="return"><para>New vector being a sum of this vector and <computeroutput>bv</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="221" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a59c11f95dbcc00781921185dabad4ed4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator+</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds single value across all vector fields. <simplesect kind="return"><para>New vector being a sum of this vector and <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="230" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="230" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af9f3944a07be4d353028f5b607a28090" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator+=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="237" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="237" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a3061c46e3554e430922a13078d9101f7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator+=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="245" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="245" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a39b635d88dd32939f3c2e798f945bc12" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator-</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="254" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a3f556e86d65581edf35f7813673d802e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator-</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="258" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="258" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a785225610d41901db18d2f0d1731b309" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator-=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="265" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a472006392c2d92125e664d702bf7f744" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator-=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="270" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="270" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a19c24ab8719afd5e6b994988a1784eae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator*</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="278" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="278" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1acc517bf9edbe4d3cf34037ee5d60b290" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator*</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="295" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="295" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a216b5dcbc7303ab2a5d2fa50b6ccea8a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator*=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="311" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="311" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a4995553d98a8634656c799899f0b55ce" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator*=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="330" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="330" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a7fb2aeb85d7a8cf0394f9038ea150c7e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator/</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="348" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="348" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a165518b07806ee0d02a4ef04c174ed2a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator/</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="365" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="365" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a228e758ce5958cc45a65031692896531" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator/=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="377" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="377" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af255370f983204b6288c2db1d0cf693d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator/=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="395" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="395" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a1863a806d9b39523cee79f34bbe3bc69" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator%</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="408" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="408" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aacf60e20a21d74a076f36d2c25b47122" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator%</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="421" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="421" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a23358dc61f085662aaedec73f73e6e98" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator%=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="433" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="433" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a156a82077d716a041e9b4765e9b8480c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator%=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="447" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="447" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a503d4f12a970f6eeda9cb072a4b6b399" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&amp;</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="460" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="460" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af41770307d72aebf5545b2e2a2dcc09e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&amp;</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="464" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="464" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ac1f4d84661e8afb11a0fe7f31aaa4a32" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator&amp;=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="471" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a45c9ba851075d34e252ae697ae1bb8f4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator&amp;=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="476" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="476" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a84de8c4fd8940ecb0ade0895e6ff5174" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator|</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="484" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="484" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a323d9f9cc992d6a937190551ad08feff" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator|</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="488" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="488" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa1249a922a01ffb5ae3a01315349072e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator|=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="495" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="495" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a1bd8b80778e88273b5e7a239c0de836f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator|=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="500" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="500" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a39bca86c38d953e330bf97a17bd84dc0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator^</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="508" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="508" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af84976b995dea28b886e639f8f197012" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator^</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="512" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="512" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a50ce8535be97c6b0e6be32fbb836bcca" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator^=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="519" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a57b485dceb2292811e932bb9606733ca" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator^=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="524" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="524" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a414ca41a4b04c4026dabcab766cae3ca" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="532" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="532" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ad81bc85aeff1d4988607ec099255b5b7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&lt;&lt;</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="534" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="534" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa6323b6a0cebc4e773c987e33caca65f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="538" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="538" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aeef4a12503c0fb3bb324f76522203daf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator&lt;&lt;=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="542" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a39eaba3518c0f72fa6cfa972240d538d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="547" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a65f93b0ad525565d9631765c620ca22e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&gt;&gt;</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="552" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="552" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af78b58640f51f07a2f34dc0e912144ef" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="556" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="556" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a0c4bb52e6332733929a1295c70da0523" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator&gt;&gt;=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="560" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a0a136d821fdf20a61b78356034c8afb4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256&amp; avx::ULong256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="565" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8f4cae271c41696e43b75d09c1cd42d4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::ULong256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="570" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="570" bodyend="579"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_u_long256_1af1d2c0c26147a6f4fc1af92ca4997fc9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 sum</definition>
        <argsstring>(const std::vector&lt; ULong256 &gt; &amp;ulongs) noexcept</argsstring>
        <name>sum</name>
        <param>
          <type>const std::vector&lt; <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &gt; &amp;</type>
          <declname>ulongs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="581" column="29" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.cpp" bodystart="5" bodyend="11"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_u_long256_1a84a70f0393c78a71f8478b935b77de3f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 sum</definition>
        <argsstring>(const std::set&lt; ULong256 &gt; &amp;ulongs) noexcept</argsstring>
        <name>sum</name>
        <param>
          <type>const std::set&lt; <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &gt; &amp;</type>
          <declname>ulongs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="583" column="29" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.cpp" bodystart="13" bodyend="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>unsigned long long</computeroutput> aka <computeroutput>uint64_t</computeroutput>. Can hold 4 individual <computeroutput>unsigned long long</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" line="21" column="5" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/ulong256.hpp" bodystart="21" bodyend="585"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_long256_1a8f0f43f1bde954af6693d9b0fdcdb934" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_long256_1a6ed8b1ea9b47cd703ebc7347c8ebd680" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_long256_1a9f0e7fa843ae5701f5360430287c7782" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_long256_1a6d92f7d0eb4b63369fcbac6864f69880" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_long256_1a1863a806d9b39523cee79f34bbe3bc69" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_long256_1aacf60e20a21d74a076f36d2c25b47122" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_long256_1a23358dc61f085662aaedec73f73e6e98" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_long256_1a156a82077d716a041e9b4765e9b8480c" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_long256_1a503d4f12a970f6eeda9cb072a4b6b399" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_long256_1af41770307d72aebf5545b2e2a2dcc09e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_long256_1ac1f4d84661e8afb11a0fe7f31aaa4a32" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_long256_1a45c9ba851075d34e252ae697ae1bb8f4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_long256_1a19c24ab8719afd5e6b994988a1784eae" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_long256_1acc517bf9edbe4d3cf34037ee5d60b290" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_long256_1a216b5dcbc7303ab2a5d2fa50b6ccea8a" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_long256_1a4995553d98a8634656c799899f0b55ce" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_long256_1afcfe7134e46a94694fa36535738e1289" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_long256_1a59c11f95dbcc00781921185dabad4ed4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_long256_1af9f3944a07be4d353028f5b607a28090" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_long256_1a3061c46e3554e430922a13078d9101f7" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_long256_1a39b635d88dd32939f3c2e798f945bc12" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_long256_1a3f556e86d65581edf35f7813673d802e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_long256_1a785225610d41901db18d2f0d1731b309" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_long256_1a472006392c2d92125e664d702bf7f744" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_long256_1a7fb2aeb85d7a8cf0394f9038ea150c7e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_long256_1a165518b07806ee0d02a4ef04c174ed2a" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_long256_1a228e758ce5958cc45a65031692896531" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_long256_1af255370f983204b6288c2db1d0cf693d" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_long256_1ad81bc85aeff1d4988607ec099255b5b7" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_long256_1aa6323b6a0cebc4e773c987e33caca65f" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_long256_1aeef4a12503c0fb3bb324f76522203daf" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_long256_1a39eaba3518c0f72fa6cfa972240d538d" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_long256_1a8bfa8eb27a2d8c781735dee83a170935" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_long256_1a63ab8999fc84047b710a500db411c179" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_long256_1a65f93b0ad525565d9631765c620ca22e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_long256_1af78b58640f51f07a2f34dc0e912144ef" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_long256_1a0c4bb52e6332733929a1295c70da0523" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_long256_1a0a136d821fdf20a61b78356034c8afb4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_long256_1a31cacf130e5797e6165a744cd4b59782" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_long256_1a39bca86c38d953e330bf97a17bd84dc0" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_long256_1af84976b995dea28b886e639f8f197012" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_long256_1a50ce8535be97c6b0e6be32fbb836bcca" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_long256_1a57b485dceb2292811e932bb9606733ca" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_long256_1a84de8c4fd8940ecb0ade0895e6ff5174" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_long256_1a323d9f9cc992d6a937190551ad08feff" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_long256_1aa1249a922a01ffb5ae3a01315349072e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_long256_1a1bd8b80778e88273b5e7a239c0de836f" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_long256_1a414ca41a4b04c4026dabcab766cae3ca" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_long256_1a9758e4c235dc5977ea756a32536ecf59" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_long256_1ae8a36882033e5322a5e41ebd71c2bd13" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_long256_1a72e51a856cc9e280e6a61f95ff7fdcc4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_long256_1ab85ad51b963639abc86275e54946c100" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_long256_1a59e8929ab3a03d8fb40b79f4437cb5fa" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_long256_1a39143d0221c2c72aea59afa5c782abca" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_long256_1a8f4cae271c41696e43b75d09c1cd42d4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_long256_1af1d2c0c26147a6f4fc1af92ca4997fc9" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>sum</name></member>
      <member refid="classavx_1_1_u_long256_1a84a70f0393c78a71f8478b935b77de3f" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>sum</name></member>
      <member refid="classavx_1_1_u_long256_1aa15a63145e8fd02b04dd459cca921abe" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1abc9ba826a17307403e77a091eebb319b" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1aff9dedbebdfe8d493285ec98a4d66fc6" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a60073c414eff10b63c4da983c8babfc4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1ab3dbb611c93bae3396f3561ddf010f53" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1aa9c7a2829eadead35e220fa8588ddecf" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1ad242fa936fe10a67a262c4e36a1b90a2" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a36d5792804b654f900886ab72d63799b" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a8629563ab0e12e816a6f7b5c38885959" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a9dada5c35ed69017bcaea95a683a2dfd" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a7970be8325dbeea3d4a52192b493b44a" prot="private" virt="non-virtual"><scope>avx::ULong256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
