<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_long256" kind="class" language="C++" prot="public">
    <compoundname>avx::ULong256</compoundname>
    <includes refid="ulong256_8hpp" local="no">ulong256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_long256_1a39143d0221c2c72aea59afa5c782abca" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>using avx::ULong256::storedType =  unsigned long long</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::ULong256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="35" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_long256_1a7970be8325dbeea3d4a52192b493b44a" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::ULong256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::ULong256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="23" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_long256_1a59e8929ab3a03d8fb40b79f4437cb5fa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::ULong256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::ULong256::size</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="30" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa15a63145e8fd02b04dd459cca921abe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>() noexcept</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="37" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1abc9ba826a17307403e77a091eebb319b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(__m256i init)</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>__m256i</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="39" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aff9dedbebdfe8d493285ec98a4d66fc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const unsigned long long &amp;init)</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="41" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a60073c414eff10b63c4da983c8babfc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const ULong256 &amp;init)</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="43" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a7beec864e77049e780417dd07d24760e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const unsigned long long *pSrc)</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>const unsigned long long *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="45" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa9c7a2829eadead35e220fa8588ddecf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const std::array&lt; unsigned long long, 4 &gt; &amp;init)</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>const std::array&lt; unsigned long long, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="54" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ad242fa936fe10a67a262c4e36a1b90a2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const std::array&lt; unsigned int, 4 &gt; &amp;init) noexcept</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>const std::array&lt; unsigned int, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="56" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="56" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a36d5792804b654f900886ab72d63799b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const std::array&lt; unsigned short, 4 &gt; &amp;init) noexcept</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>const std::array&lt; unsigned short, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="66" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8629563ab0e12e816a6f7b5c38885959" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(const std::array&lt; unsigned char, 4 &gt; &amp;init) noexcept</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>const std::array&lt; unsigned char, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="76" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a9dada5c35ed69017bcaea95a683a2dfd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::ULong256::ULong256</definition>
        <argsstring>(std::initializer_list&lt; unsigned long long &gt; init) noexcept</argsstring>
        <name>ULong256</name>
        <qualifiedname>avx::ULong256::ULong256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; unsigned long long &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="86" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="86" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8f0f43f1bde954af6693d9b0fdcdb934" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::ULong256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::ULong256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="106" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ab85ad51b963639abc86275e54946c100" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::set</definition>
        <argsstring>(__m256i val) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::ULong256::set</qualifiedname>
        <param>
          <type>__m256i</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="107" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1adf54d4acb614069fef4b6a4691f3edd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::load</definition>
        <argsstring>(const unsigned long long *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::ULong256::load</qualifiedname>
        <param>
          <type>const unsigned long long *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="114" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a9758e4c235dc5977ea756a32536ecf59" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::save</definition>
        <argsstring>(std::array&lt; unsigned long long, 4 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::ULong256::save</qualifiedname>
        <param>
          <type>std::array&lt; unsigned long long, 4 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="127" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a7f109329bd5b4a6136ee777422cfb110" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::save</definition>
        <argsstring>(unsigned long long *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::ULong256::save</qualifiedname>
        <param>
          <type>unsigned long long *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (4x <computeroutput>unsigned long long</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="138" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="138" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ac465d5182339f2238ec6311590d6ca63" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::ULong256::saveAligned</definition>
        <argsstring>(unsigned long long *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::ULong256::saveAligned</qualifiedname>
        <param>
          <type>unsigned long long *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (4x <computeroutput>unsigned long long</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="154" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="154" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a31cacf130e5797e6165a744cd4b59782" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long avx::ULong256::operator[]</definition>
        <argsstring>(unsigned int index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::ULong256::operator[]</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="163" column="32" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="163" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8bfa8eb27a2d8c781735dee83a170935" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::ULong256::operator==</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::ULong256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal or <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="182" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a63ab8999fc84047b710a500db411c179" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::ULong256::operator==</definition>
        <argsstring>(const unsigned long long b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::ULong256::operator==</qualifiedname>
        <param>
          <type>const unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all elements are equal to passed value <computeroutput>false</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="193" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a9f0e7fa843ae5701f5360430287c7782" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::ULong256::operator!=</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::ULong256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="205" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a6d92f7d0eb4b63369fcbac6864f69880" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::ULong256::operator!=</definition>
        <argsstring>(const unsigned long long b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::ULong256::operator!=</qualifiedname>
        <param>
          <type>const unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if any alement is not equal to corresponding element in <computeroutput>bV</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="216" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1afcfe7134e46a94694fa36535738e1289" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator+</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::ULong256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds values from other vector and returns new vector. <simplesect kind="return"><para>New vector being a sum of this vector and <computeroutput>bv</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="227" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a59c11f95dbcc00781921185dabad4ed4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator+</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::ULong256::operator+</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds single value across all vector fields. <simplesect kind="return"><para>New vector being a sum of this vector and <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="236" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1abcf387b6a98b5146d8c45ff52d9fa9e0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator+=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::ULong256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="243" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="243" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a49aebd02dbbab2d3f4ee15c062a29fd0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator+=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::ULong256::operator+=</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="251" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="251" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a39b635d88dd32939f3c2e798f945bc12" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator-</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::ULong256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="260" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a3f556e86d65581edf35f7813673d802e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator-</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::ULong256::operator-</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="264" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a353ac3d10cc2c37e8118b142dfa8cde2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator-=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::ULong256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="271" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8a175d53ead1b674e542fb8938f26d88" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator-=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::ULong256::operator-=</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="276" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="276" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a19c24ab8719afd5e6b994988a1784eae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator*</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::ULong256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="284" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="284" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1acc517bf9edbe4d3cf34037ee5d60b290" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator*</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::ULong256::operator*</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="301" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="301" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa4d50791ba89248ecec542aa752d6efa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator*=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::ULong256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="317" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="317" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a9fdf3e654eb1f344c77de31cd9c553c2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator*=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::ULong256::operator*=</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="336" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="336" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a7fb2aeb85d7a8cf0394f9038ea150c7e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator/</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::ULong256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="354" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="354" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a165518b07806ee0d02a4ef04c174ed2a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator/</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::ULong256::operator/</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="371" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="371" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ab664b3defc7b8069df40acd0a6f171ec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator/=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::ULong256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="386" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="386" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a0d349115699e9d8bc5fd37599f1e1e21" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator/=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::ULong256::operator/=</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="404" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="404" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a1863a806d9b39523cee79f34bbe3bc69" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator%</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::ULong256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="421" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="421" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aacf60e20a21d74a076f36d2c25b47122" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator%</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::ULong256::operator%</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="434" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="434" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af31473e3c5081a892361f79946181b3a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator%=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::ULong256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="446" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="446" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a6b9bfe36057171c7213f2c91b9cf2311" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator%=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::ULong256::operator%=</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="460" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="460" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a503d4f12a970f6eeda9cb072a4b6b399" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&amp;</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::ULong256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="473" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="473" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af41770307d72aebf5545b2e2a2dcc09e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&amp;</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::ULong256::operator&amp;</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="477" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="477" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ab5f45ad2ab3ff2a3c8cca74f34538262" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator&amp;=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::ULong256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="484" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ac3cadeb11d6ece30b52617aebf1b0459" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator&amp;=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::ULong256::operator&amp;=</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="489" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="489" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a84de8c4fd8940ecb0ade0895e6ff5174" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator|</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::ULong256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="497" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="497" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a323d9f9cc992d6a937190551ad08feff" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator|</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::ULong256::operator|</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="501" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="501" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af903e5a6814e7eed63672bcdf7cb02f8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator|=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::ULong256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="508" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1acbc7e5fb65b849e2c44b461ba5329246" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator|=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::ULong256::operator|=</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="513" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="513" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a39bca86c38d953e330bf97a17bd84dc0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator^</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::ULong256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="521" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="521" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af84976b995dea28b886e639f8f197012" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator^</definition>
        <argsstring>(const unsigned long long &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::ULong256::operator^</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="525" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="525" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ace27dfeca66c416cb79ab456cf4a0aac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator^=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::ULong256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="532" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a9bfc815c30c6187e8af3d37cbcdbb7ed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator^=</definition>
        <argsstring>(const unsigned long long &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::ULong256::operator^=</qualifiedname>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="537" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="537" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a414ca41a4b04c4026dabcab766cae3ca" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::ULong256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="545" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="545" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1ad81bc85aeff1d4988607ec099255b5b7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&lt;&lt;</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::ULong256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="547" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="547" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa6323b6a0cebc4e773c987e33caca65f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::ULong256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="551" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="551" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1aa6ce19576834032f70814eeff3fba6af" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator&lt;&lt;=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::ULong256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="555" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="555" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a2d1d93f4e9b9d889081d3130ad99e5fb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::ULong256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="560" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a65f93b0ad525565d9631765c620ca22e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&gt;&gt;</definition>
        <argsstring>(const ULong256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::ULong256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="565" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="565" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1af78b58640f51f07a2f34dc0e912144ef" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref></type>
        <definition>ULong256 avx::ULong256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::ULong256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="569" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="569" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a4b4eeccfee594293ce93f70a77526f9c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator&gt;&gt;=</definition>
        <argsstring>(const ULong256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::ULong256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="573" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="573" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a79b668b862ba95368c2603318d33ff48" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_long256" kindref="compound">ULong256</ref> &amp;</type>
        <definition>ULong256 &amp; avx::ULong256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::ULong256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="578" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="578" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_long256_1a8f4cae271c41696e43b75d09c1cd42d4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::ULong256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::ULong256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="583" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="583" bodyend="592"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>unsigned long long</computeroutput> aka <computeroutput>uint64_t</computeroutput>. Can hold 4 individual <computeroutput>unsigned long long</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" line="21" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/ulong256.hpp" bodystart="21" bodyend="593"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_long256_1a8f0f43f1bde954af6693d9b0fdcdb934" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_long256_1adf54d4acb614069fef4b6a4691f3edd6" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_long256_1a9f0e7fa843ae5701f5360430287c7782" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_long256_1a6d92f7d0eb4b63369fcbac6864f69880" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_long256_1a1863a806d9b39523cee79f34bbe3bc69" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_long256_1aacf60e20a21d74a076f36d2c25b47122" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_long256_1af31473e3c5081a892361f79946181b3a" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_long256_1a6b9bfe36057171c7213f2c91b9cf2311" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_long256_1a503d4f12a970f6eeda9cb072a4b6b399" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_long256_1af41770307d72aebf5545b2e2a2dcc09e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_long256_1ab5f45ad2ab3ff2a3c8cca74f34538262" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_long256_1ac3cadeb11d6ece30b52617aebf1b0459" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_long256_1a19c24ab8719afd5e6b994988a1784eae" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_long256_1acc517bf9edbe4d3cf34037ee5d60b290" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_long256_1aa4d50791ba89248ecec542aa752d6efa" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_long256_1a9fdf3e654eb1f344c77de31cd9c553c2" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_long256_1afcfe7134e46a94694fa36535738e1289" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_long256_1a59c11f95dbcc00781921185dabad4ed4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_long256_1abcf387b6a98b5146d8c45ff52d9fa9e0" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_long256_1a49aebd02dbbab2d3f4ee15c062a29fd0" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_long256_1a39b635d88dd32939f3c2e798f945bc12" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_long256_1a3f556e86d65581edf35f7813673d802e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_long256_1a353ac3d10cc2c37e8118b142dfa8cde2" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_long256_1a8a175d53ead1b674e542fb8938f26d88" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_long256_1a7fb2aeb85d7a8cf0394f9038ea150c7e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_long256_1a165518b07806ee0d02a4ef04c174ed2a" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_long256_1ab664b3defc7b8069df40acd0a6f171ec" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_long256_1a0d349115699e9d8bc5fd37599f1e1e21" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_long256_1ad81bc85aeff1d4988607ec099255b5b7" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_long256_1aa6323b6a0cebc4e773c987e33caca65f" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_long256_1aa6ce19576834032f70814eeff3fba6af" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_long256_1a2d1d93f4e9b9d889081d3130ad99e5fb" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_long256_1a8bfa8eb27a2d8c781735dee83a170935" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_long256_1a63ab8999fc84047b710a500db411c179" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_long256_1a65f93b0ad525565d9631765c620ca22e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_long256_1af78b58640f51f07a2f34dc0e912144ef" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_long256_1a4b4eeccfee594293ce93f70a77526f9c" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_long256_1a79b668b862ba95368c2603318d33ff48" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_long256_1a31cacf130e5797e6165a744cd4b59782" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_long256_1a39bca86c38d953e330bf97a17bd84dc0" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_long256_1af84976b995dea28b886e639f8f197012" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_long256_1ace27dfeca66c416cb79ab456cf4a0aac" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_long256_1a9bfc815c30c6187e8af3d37cbcdbb7ed" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_long256_1a84de8c4fd8940ecb0ade0895e6ff5174" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_long256_1a323d9f9cc992d6a937190551ad08feff" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_long256_1af903e5a6814e7eed63672bcdf7cb02f8" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_long256_1acbc7e5fb65b849e2c44b461ba5329246" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_long256_1a414ca41a4b04c4026dabcab766cae3ca" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_long256_1a9758e4c235dc5977ea756a32536ecf59" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_long256_1a7f109329bd5b4a6136ee777422cfb110" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_long256_1ac465d5182339f2238ec6311590d6ca63" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_long256_1ab85ad51b963639abc86275e54946c100" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_long256_1a59e8929ab3a03d8fb40b79f4437cb5fa" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_long256_1a39143d0221c2c72aea59afa5c782abca" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_long256_1a8f4cae271c41696e43b75d09c1cd42d4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_long256_1aa15a63145e8fd02b04dd459cca921abe" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1abc9ba826a17307403e77a091eebb319b" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1aff9dedbebdfe8d493285ec98a4d66fc6" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a60073c414eff10b63c4da983c8babfc4" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a7beec864e77049e780417dd07d24760e" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1aa9c7a2829eadead35e220fa8588ddecf" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1ad242fa936fe10a67a262c4e36a1b90a2" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a36d5792804b654f900886ab72d63799b" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a8629563ab0e12e816a6f7b5c38885959" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a9dada5c35ed69017bcaea95a683a2dfd" prot="public" virt="non-virtual"><scope>avx::ULong256</scope><name>ULong256</name></member>
      <member refid="classavx_1_1_u_long256_1a7970be8325dbeea3d4a52192b493b44a" prot="private" virt="non-virtual"><scope>avx::ULong256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
