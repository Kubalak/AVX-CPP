<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_int256" kind="class" language="C++" prot="public">
    <compoundname>avx::UInt256</compoundname>
    <includes refid="uint256_8hpp" local="no">uint256.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_int256_1a7ee63936cafe3c597438fb2ad27586fe" prot="public" static="no">
        <type>unsigned int</type>
        <definition>using avx::UInt256::storedType =  unsigned int</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="35" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_int256_1a82935ef5a60a80f7a06d1d86612f9ec7" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::UInt256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="30" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_int256_1a177b92e32574f6c3005b365bba3f66d5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int avx::UInt256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="34" column="34" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_int256_1ac753ef5ca6f34474a13e0105e4c5ed2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>()</argsstring>
        <name>UInt256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes vector with zeros using <computeroutput>_mm256_setzero_si256()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="41" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a0b1ea482aa659154d5487576f8be4a0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(const unsigned int *pSrc)</argsstring>
        <name>UInt256</name>
        <param>
          <type>const unsigned int *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector by loading data from memory (via <computeroutput>_mm256_lddq_si256</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid memory addres of minimal size of 256-bits (32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="46" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1af99a354c80149e087911932a3c574349" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(const unsigned int init) noexcept</argsstring>
        <name>UInt256</name>
        <param>
          <type>const unsigned int</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills vector with passed value using <computeroutput>_mm256_set1_epi32()</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="62" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="62" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aa8a26fa662126e8ca44cfd386d6f029c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(__m256i init) noexcept</argsstring>
        <name>UInt256</name>
        <param>
          <type>__m256i</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Just sets vector value using passed <computeroutput>__m256i</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="69" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="69" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a207fe1a439cc9ad5caf76372093cd2c4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(UInt256 &amp;init) noexcept</argsstring>
        <name>UInt256</name>
        <param>
          <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value using reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="76" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="76" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a9bd15821985f2cc18463e91cc8a449a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(const UInt256 &amp;init) noexcept</argsstring>
        <name>UInt256</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value using const reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="83" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aaec9ef7e78c95c58cd717966aa543915" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(std::array&lt; unsigned int, 8 &gt; init) noexcept</argsstring>
        <name>UInt256</name>
        <param>
          <type>std::array&lt; unsigned int, 8 &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets vector values using array of unsigned integers.</para>
<para>When accessing vector fields using <computeroutput>[]</computeroutput> order of values will be inversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of unsigned integers which values will be assigned to vector fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="90" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a72d4105ef66c0c8de8c4c545d5a177fb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(std::array&lt; unsigned short, 8 &gt; init) noexcept</argsstring>
        <name>UInt256</name>
        <param>
          <type>std::array&lt; unsigned short, 8 &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets vector values using array of unsigned shorts. When accessing vector fields using <computeroutput>[]</computeroutput> order of values will be inversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of unsigned shorts which values will be assigned to vector fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="98" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="98" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1adb02d7b5e37dba13c9faab9dc5bef758" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(std::array&lt; unsigned char, 8 &gt; init) noexcept</argsstring>
        <name>UInt256</name>
        <param>
          <type>std::array&lt; unsigned char, 8 &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets vector values using array of unsigned chars. When accessing vector fields using <computeroutput>[]</computeroutput> order of values will be inversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of unsigned chars which values will be assigned to vector fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="116" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="116" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a1b40e38b0a34608884b79d45a1323812" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(std::initializer_list&lt; unsigned int &gt; init) noexcept</argsstring>
        <name>UInt256</name>
        <param>
          <type>std::initializer_list&lt; unsigned int &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets vector values using array of unsigned integers. If list is longer than 8 other values will be ignored. If the list contains fewer than 8 elements other vector fields will be set to 0. When accessing vector fields using <computeroutput>[]</computeroutput> order of values will be inversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initlizer list containing unsigned integers which values will be assigned to vector fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="136" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="136" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a6ff53befe5246ecb787aa3c07f6520fc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::UInt256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get underlying <computeroutput>__m256i</computeroutput> vector. <simplesect kind="return"><para>Copy of internal <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="160" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aacc8a795160ec08a8a9ea64bbe69ed45" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::set</definition>
        <argsstring>(__m256i val) noexcept</argsstring>
        <name>set</name>
        <param>
          <type>__m256i</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set underlying <computeroutput>__m256i</computeroutput> vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="166" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a1d2955becae03b539a00c485fb06c0d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::load</definition>
        <argsstring>(const unsigned int *pSrc) N_THROW_REL</argsstring>
        <name>load</name>
        <param>
          <type>const unsigned int *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="173" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="173" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a75786e337bf88b92541dbc537e70acb0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::save</definition>
        <argsstring>(std::array&lt; unsigned int, 8 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <param>
          <type>std::array&lt; unsigned int, 8 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="186" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ac991ee7cf716337b0ea72c7943ff32e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::save</definition>
        <argsstring>(unsigned int *pDest) const N_THROW_REL</argsstring>
        <name>save</name>
        <param>
          <type>unsigned int *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>unsigned int</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="197" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="197" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1afa47f0b46aa12778bf2542091d104e35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::saveAligned</definition>
        <argsstring>(unsigned int *pDest) const N_THROW_REL</argsstring>
        <name>saveAligned</name>
        <param>
          <type>unsigned int *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>unsigned int</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="213" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="213" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a91246a76efe5fe9667bb9ae460213e2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UInt256::operator==</definition>
        <argsstring>(const UInt256 &amp;bV) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="222" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a46a960e5849d13d3dfa9eec4624531bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UInt256::operator==</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="227" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ab8833fc39c5f3edb1370b54afac50f9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UInt256::operator!=</definition>
        <argsstring>(const UInt256 &amp;bV) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="233" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a42968a7813f88d204ed26f5eeca4f5ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UInt256::operator!=</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="238" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="238" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a33197e864f6c9a5ebe2802807b570ae1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int avx::UInt256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="244" column="26" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="244" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a6e877d9714a04183088b3c94e68ae5ee" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator+</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="257" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ae8cb011343eb25ddae5cdc30c7684717" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator+</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="259" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a1958d645cc71f837e8ca2fef2dd4ee72" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator+=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="261" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a7d5bc04bc735b1938b1114892978912b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator+=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="266" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a62acde2136d9212c61b5647e26f8a487" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator-</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="271" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a5fb2dd2ee473b262ef823cd0c752ae28" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator-</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="273" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1adbc3576006ea691e5ecf5abd76e4295a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator-=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="275" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a61bf28384a84c0945f9c548402490d47" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator-=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="280" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a78f383f14b337c5a6ed2760a8fe39b48" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator*</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="285" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="285" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a635d7c2c42eea7c097ae7b6094f087df" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator*</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="299" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="299" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1add39d677786e03279a26a0b5f5128ca7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator*=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="313" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="313" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ad9830c57dfa8940c261aadd22e9b0bf3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator*=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="328" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="328" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ae5b3dbd9bd85f15c0566fa1229e2cda0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator/</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="344" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="344" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ac3612aafa749b612898b844629c6bb75" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator/</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="393" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="393" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1add99cdff1ab94c29fc4fefe46807e530" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator/=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="435" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="435" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a63a90de064ad79d6f7c08360cc66efb3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator/=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="486" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="486" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a071c9ae7c9c9ba7a5c9180741e404412" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator%</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="534" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="534" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a7c0596f3bd926305357f61da3e31464b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator%</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="565" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="565" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a5d191cadc1f3a2f4dd94081c698dc01d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator%=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="640" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="640" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aad96262a0979494fe5ac67a4d2f9454f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator%=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="672" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="672" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a1614997484398e488fa9b74ab5d0dd50" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator^</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="706" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="706" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a8d21f860548bae1b3650db69d6211dc4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator^</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="710" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="710" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aaa37e0a01c6df7a8659dcd4f69835c13" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator^=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="714" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="714" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a03901d00bce5aa529e434acfbabf4a6f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator^=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="719" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="719" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a48c9302da22239bb985fe0a5ec58ea46" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator|</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="724" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="724" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a0cca97b36d413c1b6a5bc915767c7799" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator|</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="728" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="728" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ace0f4e384c2c4a004c7c4df5c8e920dc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator|=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="732" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="732" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a240c07e04956028eaaf8cd53e7b22721" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator|=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="737" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="737" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a5ea778c96c9d943ab4600b6bde398111" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&amp;</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="742" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="742" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a16f10431889cb0de90269873a10e3a04" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&amp;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="746" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="746" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a3c76986682ae01401f4a5f3d29664542" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator&amp;=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="750" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="750" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a3db50c96bd5e0d3d09e9322a517ae112" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator&amp;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="755" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="755" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a7f6ae48ff04b5590252c88498959e5c3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&lt;&lt;</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="760" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="760" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a977ba1a1001a3a5cd96b749ca994428b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="764" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="764" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a5354486e42620c6d4451b70196f3b2b4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator&lt;&lt;=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="768" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="768" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ad6c5bc2feb3738213882e4a4ea3cb13d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="773" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="773" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a082aa11928c56fb56c2124d6d0c8dacb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&gt;&gt;</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="778" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="778" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ab0b95b63b539dc7100cdd06fdc069b34" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="782" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="782" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a8961658cacec08b2a0cb0bb0aaa09afd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator&gt;&gt;=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="786" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="786" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a833f7eb0825a5fa948e4d75ace70e85d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256&amp; avx::UInt256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="790" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="790" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a036d4a7f4eb7da2a778d2afd3377b296" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="795" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="795" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a31f7ab89dac52246334cd796ed63b878" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UInt256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return string representation of vector.</para>
<para><simplesect kind="return"><para>String representation of vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="803" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="803" bodyend="812"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_u_int256_1a23bfbfda6030a6330c8b31087cc8d2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 sum</definition>
        <argsstring>(std::vector&lt; UInt256 &gt; &amp;b)</argsstring>
        <name>sum</name>
        <param>
          <type>std::vector&lt; <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sums all elements in vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing <computeroutput><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></computeroutput> values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of all elements in vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="821" column="28" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.cpp" bodystart="5" bodyend="11"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_u_int256_1a4e8ebd6581ea606dc395d2627aaee6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 sum</definition>
        <argsstring>(std::set&lt; UInt256 &gt; &amp;b)</argsstring>
        <name>sum</name>
        <param>
          <type>std::set&lt; <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sums all elements in set. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>Set containing <computeroutput><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></computeroutput> values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of all elements in set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="829" column="28" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.cpp" bodystart="14" bodyend="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>unsigned int</computeroutput>. It can hold 8 individual values. Supports arithmetic and bitwise operators. Provides comparison operators == !=. Class providing vectorized version of <computeroutput>unsigned int</computeroutput>. It can hold 8 individual values. Supports arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" line="28" column="5" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uint256.hpp" bodystart="28" bodyend="831"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_int256_1a6ff53befe5246ecb787aa3c07f6520fc" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_int256_1a1d2955becae03b539a00c485fb06c0d9" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_int256_1ab8833fc39c5f3edb1370b54afac50f9b" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_int256_1a42968a7813f88d204ed26f5eeca4f5ad" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_int256_1a071c9ae7c9c9ba7a5c9180741e404412" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_int256_1a7c0596f3bd926305357f61da3e31464b" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_int256_1a5d191cadc1f3a2f4dd94081c698dc01d" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_int256_1aad96262a0979494fe5ac67a4d2f9454f" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_int256_1a5ea778c96c9d943ab4600b6bde398111" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_int256_1a16f10431889cb0de90269873a10e3a04" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_int256_1a3c76986682ae01401f4a5f3d29664542" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_int256_1a3db50c96bd5e0d3d09e9322a517ae112" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_int256_1a78f383f14b337c5a6ed2760a8fe39b48" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_int256_1a635d7c2c42eea7c097ae7b6094f087df" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_int256_1add39d677786e03279a26a0b5f5128ca7" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_int256_1ad9830c57dfa8940c261aadd22e9b0bf3" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_int256_1a6e877d9714a04183088b3c94e68ae5ee" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_int256_1ae8cb011343eb25ddae5cdc30c7684717" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_int256_1a1958d645cc71f837e8ca2fef2dd4ee72" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_int256_1a7d5bc04bc735b1938b1114892978912b" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_int256_1a62acde2136d9212c61b5647e26f8a487" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_int256_1a5fb2dd2ee473b262ef823cd0c752ae28" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_int256_1adbc3576006ea691e5ecf5abd76e4295a" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_int256_1a61bf28384a84c0945f9c548402490d47" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_int256_1ae5b3dbd9bd85f15c0566fa1229e2cda0" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_int256_1ac3612aafa749b612898b844629c6bb75" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_int256_1add99cdff1ab94c29fc4fefe46807e530" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_int256_1a63a90de064ad79d6f7c08360cc66efb3" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_int256_1a7f6ae48ff04b5590252c88498959e5c3" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_int256_1a977ba1a1001a3a5cd96b749ca994428b" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_int256_1a5354486e42620c6d4451b70196f3b2b4" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_int256_1ad6c5bc2feb3738213882e4a4ea3cb13d" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_int256_1a91246a76efe5fe9667bb9ae460213e2f" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_int256_1a46a960e5849d13d3dfa9eec4624531bd" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_int256_1a082aa11928c56fb56c2124d6d0c8dacb" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_int256_1ab0b95b63b539dc7100cdd06fdc069b34" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_int256_1a8961658cacec08b2a0cb0bb0aaa09afd" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_int256_1a833f7eb0825a5fa948e4d75ace70e85d" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_int256_1a33197e864f6c9a5ebe2802807b570ae1" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_int256_1a1614997484398e488fa9b74ab5d0dd50" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_int256_1a8d21f860548bae1b3650db69d6211dc4" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_int256_1aaa37e0a01c6df7a8659dcd4f69835c13" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_int256_1a03901d00bce5aa529e434acfbabf4a6f" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_int256_1a48c9302da22239bb985fe0a5ec58ea46" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_int256_1a0cca97b36d413c1b6a5bc915767c7799" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_int256_1ace0f4e384c2c4a004c7c4df5c8e920dc" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_int256_1a240c07e04956028eaaf8cd53e7b22721" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_int256_1a036d4a7f4eb7da2a778d2afd3377b296" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_int256_1a75786e337bf88b92541dbc537e70acb0" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_int256_1ac991ee7cf716337b0ea72c7943ff32e3" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_int256_1afa47f0b46aa12778bf2542091d104e35" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_int256_1aacc8a795160ec08a8a9ea64bbe69ed45" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_int256_1a177b92e32574f6c3005b365bba3f66d5" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_int256_1a7ee63936cafe3c597438fb2ad27586fe" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_int256_1a31f7ab89dac52246334cd796ed63b878" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_int256_1a23bfbfda6030a6330c8b31087cc8d2b2" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>sum</name></member>
      <member refid="classavx_1_1_u_int256_1a4e8ebd6581ea606dc395d2627aaee6a6" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>sum</name></member>
      <member refid="classavx_1_1_u_int256_1ac753ef5ca6f34474a13e0105e4c5ed2c" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a0b1ea482aa659154d5487576f8be4a0c" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1af99a354c80149e087911932a3c574349" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1aa8a26fa662126e8ca44cfd386d6f029c" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a207fe1a439cc9ad5caf76372093cd2c4" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a9bd15821985f2cc18463e91cc8a449a9" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1aaec9ef7e78c95c58cd717966aa543915" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a72d4105ef66c0c8de8c4c545d5a177fb" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1adb02d7b5e37dba13c9faab9dc5bef758" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a1b40e38b0a34608884b79d45a1323812" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a82935ef5a60a80f7a06d1d86612f9ec7" prot="private" virt="non-virtual"><scope>avx::UInt256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
