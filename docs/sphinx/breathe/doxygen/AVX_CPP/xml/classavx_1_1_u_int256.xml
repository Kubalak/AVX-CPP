<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_int256" kind="class" language="C++" prot="public">
    <compoundname>avx::UInt256</compoundname>
    <includes refid="uint256_8hpp" local="no">uint256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_int256_1a7ee63936cafe3c597438fb2ad27586fe" prot="public" static="no">
        <type>unsigned int</type>
        <definition>using avx::UInt256::storedType =  unsigned int</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::UInt256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="43" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_int256_1a82935ef5a60a80f7a06d1d86612f9ec7" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::UInt256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::UInt256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="31" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_int256_1a177b92e32574f6c3005b365bba3f66d5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::UInt256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::UInt256::size</qualifiedname>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="38" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_int256_1ac753ef5ca6f34474a13e0105e4c5ed2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>()</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes vector with zeros using <computeroutput>_mm256_setzero_si256()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="49" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a0b1ea482aa659154d5487576f8be4a0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(const unsigned int *pSrc)</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type>const unsigned int *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector by loading data from memory (via <computeroutput>_mm256_lddq_si256</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid memory addres of minimal size of 256-bits (32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="54" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1af99a354c80149e087911932a3c574349" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(const unsigned int init) noexcept</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills vector with passed value using <computeroutput>_mm256_set1_epi32()</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="70" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="70" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aa8a26fa662126e8ca44cfd386d6f029c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(__m256i init) noexcept</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type>__m256i</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Just sets vector value using passed <computeroutput>__m256i</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="77" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="77" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a207fe1a439cc9ad5caf76372093cd2c4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(UInt256 &amp;init) noexcept</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value using reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="84" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="84" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a9bd15821985f2cc18463e91cc8a449a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(const UInt256 &amp;init) noexcept</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value using const reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="91" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aaec9ef7e78c95c58cd717966aa543915" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(std::array&lt; unsigned int, 8 &gt; init) noexcept</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type>std::array&lt; unsigned int, 8 &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets vector values using array of unsigned integers.</para>
<para>When accessing vector fields using <computeroutput>[]</computeroutput> order of values will be inversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of unsigned integers which values will be assigned to vector fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="98" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a72d4105ef66c0c8de8c4c545d5a177fb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(std::array&lt; unsigned short, 8 &gt; init) noexcept</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type>std::array&lt; unsigned short, 8 &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets vector values using array of unsigned shorts. When accessing vector fields using <computeroutput>[]</computeroutput> order of values will be inversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of unsigned shorts which values will be assigned to vector fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="106" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="106" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1adb02d7b5e37dba13c9faab9dc5bef758" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(std::array&lt; unsigned char, 8 &gt; init) noexcept</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type>std::array&lt; unsigned char, 8 &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets vector values using array of unsigned chars. When accessing vector fields using <computeroutput>[]</computeroutput> order of values will be inversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of unsigned chars which values will be assigned to vector fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="124" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="124" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a1b40e38b0a34608884b79d45a1323812" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UInt256::UInt256</definition>
        <argsstring>(std::initializer_list&lt; unsigned int &gt; init) noexcept</argsstring>
        <name>UInt256</name>
        <qualifiedname>avx::UInt256::UInt256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; unsigned int &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets vector values using array of unsigned integers. If list is longer than 8 other values will be ignored. If the list contains fewer than 8 elements other vector fields will be set to 0. When accessing vector fields using <computeroutput>[]</computeroutput> order of values will be inversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initlizer list containing unsigned integers which values will be assigned to vector fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="144" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="144" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a6ff53befe5246ecb787aa3c07f6520fc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::UInt256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::UInt256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get underlying <computeroutput>__m256i</computeroutput> vector. <simplesect kind="return"><para>Copy of internal <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="168" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aacc8a795160ec08a8a9ea64bbe69ed45" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::set</definition>
        <argsstring>(__m256i val) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::UInt256::set</qualifiedname>
        <param>
          <type>__m256i</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set underlying <computeroutput>__m256i</computeroutput> vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="174" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a1d2955becae03b539a00c485fb06c0d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::load</definition>
        <argsstring>(const unsigned int *pSrc) N_THROW_REL</argsstring>
        <name>load</name>
        <qualifiedname>avx::UInt256::load</qualifiedname>
        <param>
          <type>const unsigned int *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="181" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="181" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a75786e337bf88b92541dbc537e70acb0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::save</definition>
        <argsstring>(std::array&lt; unsigned int, 8 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::UInt256::save</qualifiedname>
        <param>
          <type>std::array&lt; unsigned int, 8 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="194" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ac991ee7cf716337b0ea72c7943ff32e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::save</definition>
        <argsstring>(unsigned int *pDest) const N_THROW_REL</argsstring>
        <name>save</name>
        <qualifiedname>avx::UInt256::save</qualifiedname>
        <param>
          <type>unsigned int *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>unsigned int</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="205" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="205" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1afa47f0b46aa12778bf2542091d104e35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UInt256::saveAligned</definition>
        <argsstring>(unsigned int *pDest) const N_THROW_REL</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::UInt256::saveAligned</qualifiedname>
        <param>
          <type>unsigned int *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>unsigned int</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="221" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="221" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a91246a76efe5fe9667bb9ae460213e2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UInt256::operator==</definition>
        <argsstring>(const UInt256 &amp;bV) const</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::UInt256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="230" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a46a960e5849d13d3dfa9eec4624531bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UInt256::operator==</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::UInt256::operator==</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="235" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ab8833fc39c5f3edb1370b54afac50f9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UInt256::operator!=</definition>
        <argsstring>(const UInt256 &amp;bV) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::UInt256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="241" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a42968a7813f88d204ed26f5eeca4f5ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UInt256::operator!=</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::UInt256::operator!=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="246" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a33197e864f6c9a5ebe2802807b570ae1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int avx::UInt256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::UInt256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="252" column="26" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="252" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a6e877d9714a04183088b3c94e68ae5ee" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator+</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::UInt256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="265" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ae8cb011343eb25ddae5cdc30c7684717" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator+</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::UInt256::operator+</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="267" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a9ee3efdeba8879723ae48aa0462540d8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator+=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::UInt256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="269" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ab2c8adc8055ceae95e0e4a15dd3fbefe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator+=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::UInt256::operator+=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="274" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a62acde2136d9212c61b5647e26f8a487" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator-</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::UInt256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="279" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a5fb2dd2ee473b262ef823cd0c752ae28" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator-</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::UInt256::operator-</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="281" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a43a51194a77674b7bbd97901f3a51bca" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator-=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::UInt256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="283" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a4e1821f4e5f7deebbd8903092d48e11d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator-=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::UInt256::operator-=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="288" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a78f383f14b337c5a6ed2760a8fe39b48" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator*</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::UInt256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="293" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="293" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a635d7c2c42eea7c097ae7b6094f087df" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator*</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::UInt256::operator*</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="307" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="307" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ad3fcfc4598db42efcdf853557328735d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator*=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::UInt256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="321" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="321" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a6c48c8d028d56387cad66d456602d465" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator*=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::UInt256::operator*=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="336" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="336" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ae5b3dbd9bd85f15c0566fa1229e2cda0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator/</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::UInt256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="352" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="352" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ac3612aafa749b612898b844629c6bb75" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator/</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::UInt256::operator/</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="390" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="390" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1abb97f3d5e2a690c8798987e5b696ee37" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator/=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::UInt256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="398" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a543db3950a6398c99e38dffab77e52b8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator/=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::UInt256::operator/=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="403" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="403" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a071c9ae7c9c9ba7a5c9180741e404412" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator%</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::UInt256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="417" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="417" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a7c0596f3bd926305357f61da3e31464b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator%</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::UInt256::operator%</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="435" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="435" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a83bac4910d0f479eb1302d0118f48ad1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator%=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::UInt256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="459" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="459" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1abe1d86d1e43dfb1bb1b5e7fc37ac0312" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator%=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::UInt256::operator%=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="478" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="478" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a1614997484398e488fa9b74ab5d0dd50" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator^</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::UInt256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="501" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="501" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a8d21f860548bae1b3650db69d6211dc4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator^</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::UInt256::operator^</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="505" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="505" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a7614deb3cc2f27504ff67304620a1b23" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator^=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::UInt256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="509" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a8ce75a1562fa8cca6d24b635201dabab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator^=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::UInt256::operator^=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="514" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a48c9302da22239bb985fe0a5ec58ea46" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator|</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::UInt256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="519" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="519" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a0cca97b36d413c1b6a5bc915767c7799" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator|</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::UInt256::operator|</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="523" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="523" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aece2260a2a9d666929c9843cc169cf68" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator|=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::UInt256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="527" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aa5419126cc66fc6a813d3b96e8673596" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator|=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::UInt256::operator|=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="532" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a5ea778c96c9d943ab4600b6bde398111" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&amp;</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::UInt256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="537" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="537" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a16f10431889cb0de90269873a10e3a04" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&amp;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::UInt256::operator&amp;</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="541" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="541" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a21e269f4fb14349b74d799ce6113d984" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator&amp;=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::UInt256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="545" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="545" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1aba3c46002233e098d724a23cd001c850" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator&amp;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::UInt256::operator&amp;=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="550" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="550" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a7f6ae48ff04b5590252c88498959e5c3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&lt;&lt;</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UInt256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="555" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="555" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a977ba1a1001a3a5cd96b749ca994428b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UInt256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="559" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="559" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ad8aa46cd1caf171ab3534f69ce670d42" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator&lt;&lt;=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::UInt256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="563" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a2df6b38f497e1df26dc9e9175ff44083" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::UInt256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="568" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a082aa11928c56fb56c2124d6d0c8dacb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&gt;&gt;</definition>
        <argsstring>(const UInt256 &amp;b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::UInt256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="573" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="573" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ab0b95b63b539dc7100cdd06fdc069b34" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::UInt256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="577" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="577" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1ae8d682f94bff5b838c0315212e1390fe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator&gt;&gt;=</definition>
        <argsstring>(const UInt256 &amp;b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::UInt256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="581" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a45950118f602cb7a5651603876565dd9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref> &amp;</type>
        <definition>UInt256 &amp; avx::UInt256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::UInt256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="585" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a036d4a7f4eb7da2a778d2afd3377b296" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_int256" kindref="compound">UInt256</ref></type>
        <definition>UInt256 avx::UInt256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::UInt256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="590" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="590" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_int256_1a31f7ab89dac52246334cd796ed63b878" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UInt256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::UInt256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return string representation of vector.</para>
<para><simplesect kind="return"><para>String representation of vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="598" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="598" bodyend="607"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>unsigned int</computeroutput>. It can hold 8 individual values. Supports arithmetic and bitwise operators. Provides comparison operators == !=. Class providing vectorized version of <computeroutput>unsigned int</computeroutput>. It can hold 8 individual values. Supports arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" line="29" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uint256.hpp" bodystart="29" bodyend="608"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_int256_1a6ff53befe5246ecb787aa3c07f6520fc" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_int256_1a1d2955becae03b539a00c485fb06c0d9" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_int256_1ab8833fc39c5f3edb1370b54afac50f9b" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_int256_1a42968a7813f88d204ed26f5eeca4f5ad" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_int256_1a071c9ae7c9c9ba7a5c9180741e404412" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_int256_1a7c0596f3bd926305357f61da3e31464b" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_int256_1a83bac4910d0f479eb1302d0118f48ad1" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_int256_1abe1d86d1e43dfb1bb1b5e7fc37ac0312" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_int256_1a5ea778c96c9d943ab4600b6bde398111" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_int256_1a16f10431889cb0de90269873a10e3a04" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_int256_1a21e269f4fb14349b74d799ce6113d984" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_int256_1aba3c46002233e098d724a23cd001c850" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_int256_1a78f383f14b337c5a6ed2760a8fe39b48" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_int256_1a635d7c2c42eea7c097ae7b6094f087df" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_int256_1ad3fcfc4598db42efcdf853557328735d" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_int256_1a6c48c8d028d56387cad66d456602d465" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_int256_1a6e877d9714a04183088b3c94e68ae5ee" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_int256_1ae8cb011343eb25ddae5cdc30c7684717" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_int256_1a9ee3efdeba8879723ae48aa0462540d8" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_int256_1ab2c8adc8055ceae95e0e4a15dd3fbefe" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_int256_1a62acde2136d9212c61b5647e26f8a487" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_int256_1a5fb2dd2ee473b262ef823cd0c752ae28" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_int256_1a43a51194a77674b7bbd97901f3a51bca" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_int256_1a4e1821f4e5f7deebbd8903092d48e11d" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_int256_1ae5b3dbd9bd85f15c0566fa1229e2cda0" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_int256_1ac3612aafa749b612898b844629c6bb75" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_int256_1abb97f3d5e2a690c8798987e5b696ee37" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_int256_1a543db3950a6398c99e38dffab77e52b8" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_int256_1a7f6ae48ff04b5590252c88498959e5c3" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_int256_1a977ba1a1001a3a5cd96b749ca994428b" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_int256_1ad8aa46cd1caf171ab3534f69ce670d42" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_int256_1a2df6b38f497e1df26dc9e9175ff44083" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_int256_1a91246a76efe5fe9667bb9ae460213e2f" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_int256_1a46a960e5849d13d3dfa9eec4624531bd" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_int256_1a082aa11928c56fb56c2124d6d0c8dacb" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_int256_1ab0b95b63b539dc7100cdd06fdc069b34" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_int256_1ae8d682f94bff5b838c0315212e1390fe" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_int256_1a45950118f602cb7a5651603876565dd9" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_int256_1a33197e864f6c9a5ebe2802807b570ae1" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_int256_1a1614997484398e488fa9b74ab5d0dd50" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_int256_1a8d21f860548bae1b3650db69d6211dc4" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_int256_1a7614deb3cc2f27504ff67304620a1b23" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_int256_1a8ce75a1562fa8cca6d24b635201dabab" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_int256_1a48c9302da22239bb985fe0a5ec58ea46" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_int256_1a0cca97b36d413c1b6a5bc915767c7799" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_int256_1aece2260a2a9d666929c9843cc169cf68" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_int256_1aa5419126cc66fc6a813d3b96e8673596" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_int256_1a036d4a7f4eb7da2a778d2afd3377b296" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_int256_1a75786e337bf88b92541dbc537e70acb0" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_int256_1ac991ee7cf716337b0ea72c7943ff32e3" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_int256_1afa47f0b46aa12778bf2542091d104e35" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_int256_1aacc8a795160ec08a8a9ea64bbe69ed45" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_int256_1a177b92e32574f6c3005b365bba3f66d5" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_int256_1a7ee63936cafe3c597438fb2ad27586fe" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_int256_1a31f7ab89dac52246334cd796ed63b878" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_int256_1ac753ef5ca6f34474a13e0105e4c5ed2c" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a0b1ea482aa659154d5487576f8be4a0c" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1af99a354c80149e087911932a3c574349" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1aa8a26fa662126e8ca44cfd386d6f029c" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a207fe1a439cc9ad5caf76372093cd2c4" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a9bd15821985f2cc18463e91cc8a449a9" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1aaec9ef7e78c95c58cd717966aa543915" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a72d4105ef66c0c8de8c4c545d5a177fb" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1adb02d7b5e37dba13c9faab9dc5bef758" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a1b40e38b0a34608884b79d45a1323812" prot="public" virt="non-virtual"><scope>avx::UInt256</scope><name>UInt256</name></member>
      <member refid="classavx_1_1_u_int256_1a82935ef5a60a80f7a06d1d86612f9ec7" prot="private" virt="non-virtual"><scope>avx::UInt256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
