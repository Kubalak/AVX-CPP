<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_char256" kind="class" language="C++" prot="public">
    <compoundname>avx::UChar256</compoundname>
    <includes refid="uchar256_8hpp" local="no">uchar256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_char256_1a4507caf14293893eebbcb9903373d634" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using avx::UChar256::storedType =  unsigned char</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::UChar256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="35" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_char256_1a98bfb70355aa4c583c502ea1239680eb" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::UChar256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::UChar256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="23" column="17" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_char256_1a2d93ebc50ecfc5a00839532013091cf4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::UChar256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::UChar256::size</qualifiedname>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="30" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad65831d82cf9fa0bf09d316014e216cc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>() noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes vector with zeros. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="40" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a88e2884c653674de4e8e24d1540b3e08" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const unsigned char init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes all vector fields with single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>A literal value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="46" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aad3251db80eb55be631bcd48898b8111" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector but using <computeroutput>__m256i</computeroutput> type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="52" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a7daa5793dd933c16b925e580ba71b36d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const UChar256 &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with value from other vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="58" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aedd2eb8d019cc2dbc78bc767aee1efc7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const unsigned char *pSrc)</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with first 32 bytes of data stored under <computeroutput>addr</computeroutput>. Data does not need to be aligned to any specific boundary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory holding data (minimum 32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="67" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1adc354d94f11fb25d4d618ea25d168124" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const std::string &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes with first 32 bytes read from string. If <computeroutput>init</computeroutput> is less than 32 bytes long missing values will be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing initial data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="81" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="81" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1a0403deb56f30f22304d515e7f3eb14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const std::array&lt; unsigned char, 32 &gt; &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const std::array&lt; unsigned char, 32 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize vector with values read from an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="101" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a50f88c529af5de5603a165b4a46d0baa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(std::initializer_list&lt; unsigned char &gt; init)</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; unsigned char &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="103" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="103" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2390df1548ccebb4d51b8cc5dfa9bada" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::load</definition>
        <argsstring>(const unsigned char *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::UChar256::load</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="128" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="128" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1c3f349b32726616faa25ea575e9f6ac" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::save</definition>
        <argsstring>(std::array&lt; unsigned char, 32 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::UChar256::save</qualifiedname>
        <param>
          <type>std::array&lt; unsigned char, 32 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="141" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a449f1b64966a52068dfc95a8edf5d0ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::save</definition>
        <argsstring>(unsigned char *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::UChar256::save</qualifiedname>
        <param>
          <type>unsigned char *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (32x <computeroutput>unsigned char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="152" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="152" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a6a14d0e56378c051bdcd1f2c5d918127" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::saveAligned</definition>
        <argsstring>(unsigned char *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::UChar256::saveAligned</qualifiedname>
        <param>
          <type>unsigned char *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (32x <computeroutput>unsigned char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="168" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af77f33fd2def1940b8db9760d7acb218" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::UChar256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::UChar256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="181" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2e2d59825a4e30db333857a757847599" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::UChar256::set</qualifiedname>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="187" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af40bd631875be9dc639c23e76f1f6c13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char avx::UChar256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::UChar256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 31. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range and using Debug mode. If not in Debug mode no exception will be thrown (bitwise AND ensures index stays withing bounds 0-31). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="195" column="27" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="195" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ac7e6197e1fa16108f72aa98f5ee0ced9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator==</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::UChar256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="207" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a6f9bb6e6f09921c6eabbf68417a7388b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator==</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::UChar256::operator==</qualifiedname>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="212" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a4317f7ab6ac388d1f1b80fdbf43a089e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator!=</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::UChar256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="218" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a3d1cd299a66d4e5af24df150a622989d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator!=</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::UChar256::operator!=</qualifiedname>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="223" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad85b21b8d384a3a1aa33b8845f9ec40a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator+</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::UChar256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="230" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2aabaaee8893908160e17632d99ce488" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator+</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::UChar256::operator+</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="235" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1abcf357a7b5b67c81d643f13a30c2c766" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator+=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::UChar256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="240" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1b681e9d03b36ba47fb0f5600313f484" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator+=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::UChar256::operator+=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="246" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8d5097fb10c0bb84530fd9cd3a627f47" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator-</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::UChar256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="252" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1189bee75387139468599a2b10d150a7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator-</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::UChar256::operator-</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="257" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aef0afa28ddef275288fe9b66944871aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator-=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::UChar256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="262" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8b2eb9b899c980c7b4f5a1f3e2c6aa1a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator-=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::UChar256::operator-=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="268" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae470ba307493dde9ace0d7ac822325dc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator*</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::UChar256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="274" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="274" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2fea06e449a30e4b55e0a49a5af1b312" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator*</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::UChar256::operator*</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="304" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="304" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aafaf69ff9c21d0a65e0071cc9968206b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator*=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::UChar256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="332" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="332" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab7bc239fe1d952ed53550c4f1df93af0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator*=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::UChar256::operator*=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="363" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="363" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad0f1d5abbfaa4dbb06116bec632a60c2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::UChar256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="392" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="392" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a321a8b008f5a948f3363234ea7784ffb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/</definition>
        <argsstring>(const unsigned char b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::UChar256::operator/</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="454" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="454" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aded81e2ab36dcfd21eeaefea39dd6e9b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::UChar256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="507" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="507" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9a25f5cba78089f19ad5f8d5654a35fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/=</definition>
        <argsstring>(const unsigned char b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::UChar256::operator/=</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="570" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="570" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a481f6ea0e3b1b374a1a142352303491d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::UChar256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="625" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="625" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a6922dd2edd5a972f0cab870f4e9d5b83" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%</definition>
        <argsstring>(const unsigned char b) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::UChar256::operator%</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="692" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="692" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab6c063e25a4c35bfdd02f3a2141c1802" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::UChar256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="751" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="751" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a06c7665e116da3bffd40994efb604c14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%=</definition>
        <argsstring>(const unsigned char b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::UChar256::operator%=</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="822" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="822" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad6c864a6400529e7e670c6b97d55014f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&amp;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::UChar256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="887" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="887" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a47afea3952c84e987647d305e84d926c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&amp;</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::UChar256::operator&amp;</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="892" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="892" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aa87bd398ed2bc04d1b88aba5b3cd9950" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&amp;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::UChar256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="897" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="897" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a3bef6b11b1d0f7d7da26d65f60a72dcf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&amp;=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::UChar256::operator&amp;=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="903" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="903" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a03eb09f835ed374f0b20441c421dba57" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator|</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::UChar256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="909" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="909" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2f26df773bef07723fe6572fe3fe2206" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator|</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::UChar256::operator|</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="914" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="914" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a4a5650d4ae97edbbe871bdfc688c4e49" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator|=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::UChar256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="919" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="919" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab3df386f51f879cae4ef7eedb58a2c40" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator|=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::UChar256::operator|=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="925" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="925" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aeb1a020148f8cd332a350af91fad3de2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator^</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::UChar256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="931" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="931" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a61021c51ba4a8aba59f0ba866972f14e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator^</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::UChar256::operator^</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="936" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="936" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8f3ddbf3f712accc542900eff6066977" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator^=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::UChar256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="941" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="941" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a0c7f955b5b81e8cf79912cb419c48c09" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator^=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::UChar256::operator^=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="947" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="947" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af315d01c5355d0f4ed4d2023e3008a81" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&lt;&lt;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="953" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="953" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae862868b1b73665ee359961d7203055b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="992" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="992" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a95f458c17c1b5e0285473e5524716867" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&lt;&lt;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1008" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1008" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aaee6c756e2935da3c2b1776e519f3b0a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1048" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1048" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a4d33ac11841a57623ca3e1612be85133" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&gt;&gt;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::UChar256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1065" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1065" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9d49f2203f5bd3dbedf23bdcda5c4129" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::UChar256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1098" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1098" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8f462c02a60ee341866d857aa460f171" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&gt;&gt;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::UChar256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1109" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1109" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9e6843fc33f70e5b9bdae07a3cbff2af" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::UChar256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1143" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1143" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae0b8856818164e400f93ef8549485c1b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::UChar256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1156" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1156" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab3017afc90d57f773d44b94fd352b675" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UChar256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::UChar256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1160" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1160" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a55e8e99c9c95b89cc97bfdfa87df9014" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UChar256::toString</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toString</name>
        <qualifiedname>avx::UChar256::toString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1171" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1171" bodyend="1178"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_u_char256_1a68078b02b69961cd511eee1888118560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const UChar256 &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1180" column="19" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.cpp" bodystart="6" bodyend="14"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class representing vectorized version of <computeroutput>unsigned char</computeroutput>. It can hold 32 individual <computeroutput>unsigned char</computeroutput> variables. Provides support for arithmetic and bitwise operators. <computeroutput>str()</computeroutput> method returns stored data as string. Supports printing directly to stream (cout). </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="21" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="21" bodyend="1182"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_char256_1af77f33fd2def1940b8db9760d7acb218" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_char256_1a2390df1548ccebb4d51b8cc5dfa9bada" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_char256_1a4317f7ab6ac388d1f1b80fdbf43a089e" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_char256_1a3d1cd299a66d4e5af24df150a622989d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_char256_1a481f6ea0e3b1b374a1a142352303491d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_char256_1a6922dd2edd5a972f0cab870f4e9d5b83" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_char256_1ab6c063e25a4c35bfdd02f3a2141c1802" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_char256_1a06c7665e116da3bffd40994efb604c14" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_char256_1ad6c864a6400529e7e670c6b97d55014f" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_char256_1a47afea3952c84e987647d305e84d926c" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_char256_1aa87bd398ed2bc04d1b88aba5b3cd9950" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_char256_1a3bef6b11b1d0f7d7da26d65f60a72dcf" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_char256_1ae470ba307493dde9ace0d7ac822325dc" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_char256_1a2fea06e449a30e4b55e0a49a5af1b312" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_char256_1aafaf69ff9c21d0a65e0071cc9968206b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_char256_1ab7bc239fe1d952ed53550c4f1df93af0" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_char256_1ad85b21b8d384a3a1aa33b8845f9ec40a" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_char256_1a2aabaaee8893908160e17632d99ce488" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_char256_1abcf357a7b5b67c81d643f13a30c2c766" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_char256_1a1b681e9d03b36ba47fb0f5600313f484" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_char256_1a8d5097fb10c0bb84530fd9cd3a627f47" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_char256_1a1189bee75387139468599a2b10d150a7" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_char256_1aef0afa28ddef275288fe9b66944871aa" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_char256_1a8b2eb9b899c980c7b4f5a1f3e2c6aa1a" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_char256_1ad0f1d5abbfaa4dbb06116bec632a60c2" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_char256_1a321a8b008f5a948f3363234ea7784ffb" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_char256_1aded81e2ab36dcfd21eeaefea39dd6e9b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_char256_1a9a25f5cba78089f19ad5f8d5654a35fa" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_char256_1af315d01c5355d0f4ed4d2023e3008a81" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1ae862868b1b73665ee359961d7203055b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1a68078b02b69961cd511eee1888118560" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1a95f458c17c1b5e0285473e5524716867" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_char256_1aaee6c756e2935da3c2b1776e519f3b0a" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_char256_1ac7e6197e1fa16108f72aa98f5ee0ced9" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_char256_1a6f9bb6e6f09921c6eabbf68417a7388b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_char256_1a4d33ac11841a57623ca3e1612be85133" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_char256_1a9d49f2203f5bd3dbedf23bdcda5c4129" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_char256_1a8f462c02a60ee341866d857aa460f171" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_char256_1a9e6843fc33f70e5b9bdae07a3cbff2af" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_char256_1af40bd631875be9dc639c23e76f1f6c13" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_char256_1aeb1a020148f8cd332a350af91fad3de2" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_char256_1a61021c51ba4a8aba59f0ba866972f14e" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_char256_1a8f3ddbf3f712accc542900eff6066977" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_char256_1a0c7f955b5b81e8cf79912cb419c48c09" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_char256_1a03eb09f835ed374f0b20441c421dba57" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_char256_1a2f26df773bef07723fe6572fe3fe2206" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_char256_1a4a5650d4ae97edbbe871bdfc688c4e49" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_char256_1ab3df386f51f879cae4ef7eedb58a2c40" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_char256_1ae0b8856818164e400f93ef8549485c1b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_char256_1a1c3f349b32726616faa25ea575e9f6ac" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_char256_1a449f1b64966a52068dfc95a8edf5d0ec" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_char256_1a6a14d0e56378c051bdcd1f2c5d918127" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_char256_1a2e2d59825a4e30db333857a757847599" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_char256_1a2d93ebc50ecfc5a00839532013091cf4" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_char256_1a4507caf14293893eebbcb9903373d634" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_char256_1ab3017afc90d57f773d44b94fd352b675" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_char256_1a55e8e99c9c95b89cc97bfdfa87df9014" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>toString</name></member>
      <member refid="classavx_1_1_u_char256_1ad65831d82cf9fa0bf09d316014e216cc" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a88e2884c653674de4e8e24d1540b3e08" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1aad3251db80eb55be631bcd48898b8111" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a7daa5793dd933c16b925e580ba71b36d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1aedd2eb8d019cc2dbc78bc767aee1efc7" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1adc354d94f11fb25d4d618ea25d168124" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a1a0403deb56f30f22304d515e7f3eb14" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a50f88c529af5de5603a165b4a46d0baa" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a98bfb70355aa4c583c502ea1239680eb" prot="private" virt="non-virtual"><scope>avx::UChar256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
