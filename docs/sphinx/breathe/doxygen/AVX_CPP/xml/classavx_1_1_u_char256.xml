<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_char256" kind="class" language="C++" prot="public">
    <compoundname>avx::UChar256</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_char256_1a4507caf14293893eebbcb9903373d634" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using avx::UChar256::storedType =  unsigned char</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="21" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_char256_1a98bfb70355aa4c583c502ea1239680eb" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::UChar256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="16" column="17" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_char256_1a2d93ebc50ecfc5a00839532013091cf4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int avx::UChar256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="20" column="34" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad65831d82cf9fa0bf09d316014e216cc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>() noexcept</argsstring>
        <name>UChar256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="23" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a88e2884c653674de4e8e24d1540b3e08" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const unsigned char init) noexcept</argsstring>
        <name>UChar256</name>
        <param>
          <type>const unsigned char</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="25" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aad3251db80eb55be631bcd48898b8111" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="27" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a7daa5793dd933c16b925e580ba71b36d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const UChar256 &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="29" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aedd2eb8d019cc2dbc78bc767aee1efc7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const unsigned char *pSrc)</argsstring>
        <name>UChar256</name>
        <param>
          <type>const unsigned char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with first 32 bytes of data stored under <computeroutput>addr</computeroutput>. Data does not need to be aligned to any specific boundary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory holding data (minimum 32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>used in debug mode if <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput> then <computeroutput>std::invalid_argument</computeroutput> will be thrown. Otherwise if <computeroutput>nullptr</computeroutput> is passed it will initialize vector with 0s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="38" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1adc354d94f11fb25d4d618ea25d168124" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const std::string &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes with first 32 bytes read from string. If <computeroutput>init</computeroutput> is less than 32 bytes long missing values will be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing initial data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="58" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="58" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1a0403deb56f30f22304d515e7f3eb14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const std::array&lt; unsigned char, 32 &gt; &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <param>
          <type>const std::array&lt; unsigned char, 32 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="74" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a50f88c529af5de5603a165b4a46d0baa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(std::initializer_list&lt; unsigned char &gt; init)</argsstring>
        <name>UChar256</name>
        <param>
          <type>std::initializer_list&lt; unsigned char &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="76" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="76" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aa2d3b6ff594fad4d2b10e38c90190d93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::load</definition>
        <argsstring>(const unsigned char *sP)</argsstring>
        <name>load</name>
        <param>
          <type>const unsigned char *</type>
          <declname>sP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="100" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8557877a9e0767505ff3450bf15e65d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::save</definition>
        <argsstring>(std::array&lt; unsigned char, 32 &gt; &amp;dest) const</argsstring>
        <name>save</name>
        <param>
          <type>std::array&lt; unsigned char, 32 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (<computeroutput>char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>in debug mode and <computeroutput>dest</computeroutput> is <computeroutput>nullptr</computeroutput> throws <computeroutput>std::invalid_argument</computeroutput>. Otherwise no exception will be thrown. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="110" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a135bc7e358aead47d710628cf3152fab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::save</definition>
        <argsstring>(unsigned char *dest) const</argsstring>
        <name>save</name>
        <param>
          <type>unsigned char *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (<computeroutput>char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>in debug mode and <computeroutput>dest</computeroutput> is <computeroutput>nullptr</computeroutput> throws <computeroutput>std::invalid_argument</computeroutput>. Otherwise no exception will be thrown. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="121" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a113908544e8fdbd44aa3dd9afd8116e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::saveAligned</definition>
        <argsstring>(unsigned char *dest) const</argsstring>
        <name>saveAligned</name>
        <param>
          <type>unsigned char *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (<computeroutput>char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>in debug mode and <computeroutput>dest</computeroutput> is <computeroutput>nullptr</computeroutput> throws <computeroutput>std::invalid_argument</computeroutput>. Otherwise no exception will be thrown. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="136" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="136" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af77f33fd2def1940b8db9760d7acb218" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::UChar256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="148" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2e2d59825a4e30db333857a757847599" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="154" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af40bd631875be9dc639c23e76f1f6c13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char avx::UChar256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 31. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::out_of_range&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="162" column="27" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="162" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ac7e6197e1fa16108f72aa98f5ee0ced9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator==</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="174" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a6f9bb6e6f09921c6eabbf68417a7388b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator==</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="179" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a4317f7ab6ac388d1f1b80fdbf43a089e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator!=</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="185" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a3d1cd299a66d4e5af24df150a622989d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator!=</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="190" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad85b21b8d384a3a1aa33b8845f9ec40a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator+</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="197" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2aabaaee8893908160e17632d99ce488" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator+</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="202" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae3efa5c8d6649cc55c8836fc4d87a7e0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator+=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="207" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9ccb35e11c4674b57adac6c104186a25" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator+=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="213" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8d5097fb10c0bb84530fd9cd3a627f47" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator-</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="219" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1189bee75387139468599a2b10d150a7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator-</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="224" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad1d113e33ea13b2234f2a899db862c8f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator-=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="229" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a54b3972f9f9e8fdaf83ac603ff5fd3cd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator-=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="235" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae470ba307493dde9ace0d7ac822325dc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator*</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="241" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="241" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2fea06e449a30e4b55e0a49a5af1b312" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator*</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="262" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="262" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2b3849c5b7a792851661ca463c220ffc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator*=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="281" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="281" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1dd73f3279f163675243656cf9d156e7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator*=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="303" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="303" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad0f1d5abbfaa4dbb06116bec632a60c2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="323" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="323" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a321a8b008f5a948f3363234ea7784ffb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/</definition>
        <argsstring>(const unsigned char b) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="367" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="367" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aded81e2ab36dcfd21eeaefea39dd6e9b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="402" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="402" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9a25f5cba78089f19ad5f8d5654a35fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/=</definition>
        <argsstring>(const unsigned char b) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="447" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="447" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a481f6ea0e3b1b374a1a142352303491d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="484" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="484" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a6922dd2edd5a972f0cab870f4e9d5b83" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%</definition>
        <argsstring>(const unsigned char b) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="532" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="532" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab6c063e25a4c35bfdd02f3a2141c1802" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="573" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="573" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a06c7665e116da3bffd40994efb604c14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%=</definition>
        <argsstring>(const unsigned char b) noexcept</argsstring>
        <name>operator%=</name>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="625" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="625" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad6c864a6400529e7e670c6b97d55014f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&amp;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="671" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="671" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a47afea3952c84e987647d305e84d926c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&amp;</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="676" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="676" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab92fec899219b222a6db8a04f54184bc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator&amp;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="681" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="681" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9c9be4f926e153c45ea59773822f2377" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator&amp;=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="687" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="687" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a03eb09f835ed374f0b20441c421dba57" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator|</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="693" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="693" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2f26df773bef07723fe6572fe3fe2206" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator|</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="698" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="698" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad68f9c5dd3c30bef3ee984ef1a079c04" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator|=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="703" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="703" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af45a660c17989f783ad19b341e2e7b7f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator|=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="709" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="709" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aeb1a020148f8cd332a350af91fad3de2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator^</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="715" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="715" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a61021c51ba4a8aba59f0ba866972f14e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator^</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="720" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a531af26697f320a10158608bda4103a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator^=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="725" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="725" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1ea648716576111d2d60090ef899129d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator^=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="731" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af315d01c5355d0f4ed4d2023e3008a81" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&lt;&lt;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="737" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="737" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae862868b1b73665ee359961d7203055b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="787" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="787" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a67674552f08709e0e175ca728416a71e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator&lt;&lt;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="798" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="798" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a46120985f60d7b61b8f1ff96570269d6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="849" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="849" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a4d33ac11841a57623ca3e1612be85133" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&gt;&gt;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="861" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="861" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9d49f2203f5bd3dbedf23bdcda5c4129" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="894" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="894" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aa52c3c73b913e875795b268a4efdf8ab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator&gt;&gt;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="905" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="905" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1adc6abdff0bb6b2979aa46e180f152f10" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256&amp; avx::UChar256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="939" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="939" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae0b8856818164e400f93ef8549485c1b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="952" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="952" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab3017afc90d57f773d44b94fd352b675" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UChar256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="956" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="956" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a55e8e99c9c95b89cc97bfdfa87df9014" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UChar256::toString</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="967" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="967" bodyend="974"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_u_char256_1a38ee55d314f8287fb615baf6299b52c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const UChar256 &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="976" column="19" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.cpp" bodystart="6" bodyend="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" line="14" column="5" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/uchar256.hpp" bodystart="14" bodyend="978"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_char256_1af77f33fd2def1940b8db9760d7acb218" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_char256_1aa2d3b6ff594fad4d2b10e38c90190d93" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_char256_1a4317f7ab6ac388d1f1b80fdbf43a089e" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_char256_1a3d1cd299a66d4e5af24df150a622989d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_char256_1a481f6ea0e3b1b374a1a142352303491d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_char256_1a6922dd2edd5a972f0cab870f4e9d5b83" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_char256_1ab6c063e25a4c35bfdd02f3a2141c1802" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_char256_1a06c7665e116da3bffd40994efb604c14" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_char256_1ad6c864a6400529e7e670c6b97d55014f" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_char256_1a47afea3952c84e987647d305e84d926c" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_char256_1ab92fec899219b222a6db8a04f54184bc" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_char256_1a9c9be4f926e153c45ea59773822f2377" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_char256_1ae470ba307493dde9ace0d7ac822325dc" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_char256_1a2fea06e449a30e4b55e0a49a5af1b312" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_char256_1a2b3849c5b7a792851661ca463c220ffc" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_char256_1a1dd73f3279f163675243656cf9d156e7" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_char256_1ad85b21b8d384a3a1aa33b8845f9ec40a" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_char256_1a2aabaaee8893908160e17632d99ce488" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_char256_1ae3efa5c8d6649cc55c8836fc4d87a7e0" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_char256_1a9ccb35e11c4674b57adac6c104186a25" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_char256_1a8d5097fb10c0bb84530fd9cd3a627f47" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_char256_1a1189bee75387139468599a2b10d150a7" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_char256_1ad1d113e33ea13b2234f2a899db862c8f" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_char256_1a54b3972f9f9e8fdaf83ac603ff5fd3cd" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_char256_1ad0f1d5abbfaa4dbb06116bec632a60c2" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_char256_1a321a8b008f5a948f3363234ea7784ffb" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_char256_1aded81e2ab36dcfd21eeaefea39dd6e9b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_char256_1a9a25f5cba78089f19ad5f8d5654a35fa" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_char256_1af315d01c5355d0f4ed4d2023e3008a81" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1ae862868b1b73665ee359961d7203055b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1a38ee55d314f8287fb615baf6299b52c9" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1a67674552f08709e0e175ca728416a71e" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_char256_1a46120985f60d7b61b8f1ff96570269d6" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_char256_1ac7e6197e1fa16108f72aa98f5ee0ced9" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_char256_1a6f9bb6e6f09921c6eabbf68417a7388b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_char256_1a4d33ac11841a57623ca3e1612be85133" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_char256_1a9d49f2203f5bd3dbedf23bdcda5c4129" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_char256_1aa52c3c73b913e875795b268a4efdf8ab" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_char256_1adc6abdff0bb6b2979aa46e180f152f10" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_char256_1af40bd631875be9dc639c23e76f1f6c13" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_char256_1aeb1a020148f8cd332a350af91fad3de2" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_char256_1a61021c51ba4a8aba59f0ba866972f14e" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_char256_1a531af26697f320a10158608bda4103a9" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_char256_1a1ea648716576111d2d60090ef899129d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_char256_1a03eb09f835ed374f0b20441c421dba57" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_char256_1a2f26df773bef07723fe6572fe3fe2206" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_char256_1ad68f9c5dd3c30bef3ee984ef1a079c04" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_char256_1af45a660c17989f783ad19b341e2e7b7f" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_char256_1ae0b8856818164e400f93ef8549485c1b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_char256_1a8557877a9e0767505ff3450bf15e65d3" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_char256_1a135bc7e358aead47d710628cf3152fab" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_char256_1a113908544e8fdbd44aa3dd9afd8116e0" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_char256_1a2e2d59825a4e30db333857a757847599" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_char256_1a2d93ebc50ecfc5a00839532013091cf4" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_char256_1a4507caf14293893eebbcb9903373d634" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_char256_1ab3017afc90d57f773d44b94fd352b675" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_char256_1a55e8e99c9c95b89cc97bfdfa87df9014" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>toString</name></member>
      <member refid="classavx_1_1_u_char256_1ad65831d82cf9fa0bf09d316014e216cc" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a88e2884c653674de4e8e24d1540b3e08" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1aad3251db80eb55be631bcd48898b8111" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a7daa5793dd933c16b925e580ba71b36d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1aedd2eb8d019cc2dbc78bc767aee1efc7" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1adc354d94f11fb25d4d618ea25d168124" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a1a0403deb56f30f22304d515e7f3eb14" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a50f88c529af5de5603a165b4a46d0baa" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a98bfb70355aa4c583c502ea1239680eb" prot="private" virt="non-virtual"><scope>avx::UChar256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
