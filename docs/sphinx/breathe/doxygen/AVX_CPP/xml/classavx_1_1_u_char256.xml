<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_u_char256" kind="class" language="C++" prot="public">
    <compoundname>avx::UChar256</compoundname>
    <includes refid="uchar256_8hpp" local="no">uchar256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_u_char256_1a4507caf14293893eebbcb9903373d634" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using avx::UChar256::storedType =  unsigned char</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::UChar256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="35" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_char256_1a98bfb70355aa4c583c502ea1239680eb" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::UChar256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::UChar256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="23" column="17" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_u_char256_1a2d93ebc50ecfc5a00839532013091cf4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::UChar256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::UChar256::size</qualifiedname>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="30" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad65831d82cf9fa0bf09d316014e216cc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>() noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="37" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a88e2884c653674de4e8e24d1540b3e08" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const unsigned char init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="39" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aad3251db80eb55be631bcd48898b8111" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const __m256i &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="41" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a7daa5793dd933c16b925e580ba71b36d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const UChar256 &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="43" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aedd2eb8d019cc2dbc78bc767aee1efc7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const unsigned char *pSrc)</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes object with first 32 bytes of data stored under <computeroutput>addr</computeroutput>. Data does not need to be aligned to any specific boundary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory holding data (minimum 32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="52" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="52" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1adc354d94f11fb25d4d618ea25d168124" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const std::string &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes with first 32 bytes read from string. If <computeroutput>init</computeroutput> is less than 32 bytes long missing values will be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing initial data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="66" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="66" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1a0403deb56f30f22304d515e7f3eb14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(const std::array&lt; unsigned char, 32 &gt; &amp;init) noexcept</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>const std::array&lt; unsigned char, 32 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="82" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a50f88c529af5de5603a165b4a46d0baa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::UChar256::UChar256</definition>
        <argsstring>(std::initializer_list&lt; unsigned char &gt; init)</argsstring>
        <name>UChar256</name>
        <qualifiedname>avx::UChar256::UChar256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; unsigned char &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="84" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="84" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2390df1548ccebb4d51b8cc5dfa9bada" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::load</definition>
        <argsstring>(const unsigned char *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::UChar256::load</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="109" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="109" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1c3f349b32726616faa25ea575e9f6ac" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::save</definition>
        <argsstring>(std::array&lt; unsigned char, 32 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::UChar256::save</qualifiedname>
        <param>
          <type>std::array&lt; unsigned char, 32 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="122" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a449f1b64966a52068dfc95a8edf5d0ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::save</definition>
        <argsstring>(unsigned char *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::UChar256::save</qualifiedname>
        <param>
          <type>unsigned char *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (32x <computeroutput>unsigned char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="133" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="133" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a6a14d0e56378c051bdcd1f2c5d918127" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::saveAligned</definition>
        <argsstring>(unsigned char *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::UChar256::saveAligned</qualifiedname>
        <param>
          <type>unsigned char *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (32x <computeroutput>unsigned char</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="149" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="149" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af77f33fd2def1940b8db9760d7acb218" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::UChar256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::UChar256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="162" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2e2d59825a4e30db333857a757847599" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::UChar256::set</definition>
        <argsstring>(const __m256i value) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::UChar256::set</qualifiedname>
        <param>
          <type>const __m256i</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="168" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af40bd631875be9dc639c23e76f1f6c13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char avx::UChar256::operator[]</definition>
        <argsstring>(const unsigned int &amp;index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::UChar256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 31. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range and using Debug mode. If not in Debug mode no exception will be thrown (bitwise AND ensures index stays withing bounds 0-31). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="176" column="27" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="176" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ac7e6197e1fa16108f72aa98f5ee0ced9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator==</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::UChar256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="188" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a6f9bb6e6f09921c6eabbf68417a7388b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator==</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::UChar256::operator==</qualifiedname>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="193" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a4317f7ab6ac388d1f1b80fdbf43a089e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator!=</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::UChar256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="199" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a3d1cd299a66d4e5af24df150a622989d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::UChar256::operator!=</definition>
        <argsstring>(const char b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::UChar256::operator!=</qualifiedname>
        <param>
          <type>const char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="204" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad85b21b8d384a3a1aa33b8845f9ec40a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator+</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::UChar256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="211" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="211" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2aabaaee8893908160e17632d99ce488" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator+</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::UChar256::operator+</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="216" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1abcf357a7b5b67c81d643f13a30c2c766" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator+=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::UChar256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="221" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1b681e9d03b36ba47fb0f5600313f484" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator+=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::UChar256::operator+=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="227" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8d5097fb10c0bb84530fd9cd3a627f47" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator-</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::UChar256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="233" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a1189bee75387139468599a2b10d150a7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator-</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::UChar256::operator-</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="238" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aef0afa28ddef275288fe9b66944871aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator-=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::UChar256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="243" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8b2eb9b899c980c7b4f5a1f3e2c6aa1a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator-=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::UChar256::operator-=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="249" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae470ba307493dde9ace0d7ac822325dc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator*</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::UChar256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="255" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="255" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2fea06e449a30e4b55e0a49a5af1b312" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator*</definition>
        <argsstring>(const char &amp;b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::UChar256::operator*</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="285" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="285" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aafaf69ff9c21d0a65e0071cc9968206b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator*=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::UChar256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="313" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="313" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab7bc239fe1d952ed53550c4f1df93af0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator*=</definition>
        <argsstring>(const char &amp;b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::UChar256::operator*=</qualifiedname>
        <param>
          <type>const char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="344" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="344" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad0f1d5abbfaa4dbb06116bec632a60c2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::UChar256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="373" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="373" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a321a8b008f5a948f3363234ea7784ffb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/</definition>
        <argsstring>(const unsigned char b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::UChar256::operator/</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="435" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="435" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aded81e2ab36dcfd21eeaefea39dd6e9b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::UChar256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="488" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="488" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9a25f5cba78089f19ad5f8d5654a35fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator/=</definition>
        <argsstring>(const unsigned char b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::UChar256::operator/=</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="551" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="551" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a481f6ea0e3b1b374a1a142352303491d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::UChar256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="606" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="606" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a6922dd2edd5a972f0cab870f4e9d5b83" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%</definition>
        <argsstring>(const unsigned char b) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::UChar256::operator%</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="673" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="673" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab6c063e25a4c35bfdd02f3a2141c1802" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::UChar256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="732" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="732" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a06c7665e116da3bffd40994efb604c14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator%=</definition>
        <argsstring>(const unsigned char b) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::UChar256::operator%=</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="803" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="803" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ad6c864a6400529e7e670c6b97d55014f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&amp;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::UChar256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="868" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="868" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a47afea3952c84e987647d305e84d926c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&amp;</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::UChar256::operator&amp;</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="873" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="873" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aa87bd398ed2bc04d1b88aba5b3cd9950" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&amp;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::UChar256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="878" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="878" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a3bef6b11b1d0f7d7da26d65f60a72dcf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&amp;=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::UChar256::operator&amp;=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="884" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="884" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a03eb09f835ed374f0b20441c421dba57" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator|</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::UChar256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="890" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="890" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a2f26df773bef07723fe6572fe3fe2206" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator|</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::UChar256::operator|</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="895" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="895" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a4a5650d4ae97edbbe871bdfc688c4e49" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator|=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::UChar256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="900" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="900" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab3df386f51f879cae4ef7eedb58a2c40" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator|=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::UChar256::operator|=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="906" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="906" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aeb1a020148f8cd332a350af91fad3de2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator^</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::UChar256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="912" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="912" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a61021c51ba4a8aba59f0ba866972f14e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator^</definition>
        <argsstring>(const unsigned char &amp;b) const noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::UChar256::operator^</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="917" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="917" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8f3ddbf3f712accc542900eff6066977" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator^=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::UChar256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="922" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="922" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a0c7f955b5b81e8cf79912cb419c48c09" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator^=</definition>
        <argsstring>(const unsigned char &amp;b) noexcept</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::UChar256::operator^=</qualifiedname>
        <param>
          <type>const unsigned char &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="928" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="928" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1af315d01c5355d0f4ed4d2023e3008a81" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&lt;&lt;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="934" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="934" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae862868b1b73665ee359961d7203055b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&lt;&lt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="973" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="973" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a95f458c17c1b5e0285473e5524716867" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&lt;&lt;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="989" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="989" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1aaee6c756e2935da3c2b1776e519f3b0a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&lt;&lt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1029" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1029" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a4d33ac11841a57623ca3e1612be85133" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&gt;&gt;</definition>
        <argsstring>(const UChar256 &amp;bV) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::UChar256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1046" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1046" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9d49f2203f5bd3dbedf23bdcda5c4129" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator&gt;&gt;</definition>
        <argsstring>(const unsigned int &amp;b) const noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::UChar256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1079" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1079" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a8f462c02a60ee341866d857aa460f171" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&gt;&gt;=</definition>
        <argsstring>(const UChar256 &amp;bV) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::UChar256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1090" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1090" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a9e6843fc33f70e5b9bdae07a3cbff2af" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
        <definition>UChar256 &amp; avx::UChar256::operator&gt;&gt;=</definition>
        <argsstring>(const unsigned int &amp;b) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::UChar256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1124" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1124" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ae0b8856818164e400f93ef8549485c1b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref></type>
        <definition>UChar256 avx::UChar256::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::UChar256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1137" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1137" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1ab3017afc90d57f773d44b94fd352b675" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UChar256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::UChar256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1141" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1141" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_u_char256_1a55e8e99c9c95b89cc97bfdfa87df9014" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::UChar256::toString</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toString</name>
        <qualifiedname>avx::UChar256::toString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1152" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="1152" bodyend="1159"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_u_char256_1a68078b02b69961cd511eee1888118560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const UChar256 &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::UChar256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_u_char256" kindref="compound">UChar256</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="1161" column="19" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.cpp" bodystart="6" bodyend="14"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class representing vectorized version of <computeroutput>unsigned char</computeroutput>. It can hold 32 individual <computeroutput>unsigned char</computeroutput> variables. Provides support for arithmetic and bitwise operators. <computeroutput>str()</computeroutput> method returns stored data as string. Supports printing directly to stream (cout). </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" line="21" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/uchar256.hpp" bodystart="21" bodyend="1163"/>
    <listofallmembers>
      <member refid="classavx_1_1_u_char256_1af77f33fd2def1940b8db9760d7acb218" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>get</name></member>
      <member refid="classavx_1_1_u_char256_1a2390df1548ccebb4d51b8cc5dfa9bada" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>load</name></member>
      <member refid="classavx_1_1_u_char256_1a4317f7ab6ac388d1f1b80fdbf43a089e" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_char256_1a3d1cd299a66d4e5af24df150a622989d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_u_char256_1a481f6ea0e3b1b374a1a142352303491d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_char256_1a6922dd2edd5a972f0cab870f4e9d5b83" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_u_char256_1ab6c063e25a4c35bfdd02f3a2141c1802" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_char256_1a06c7665e116da3bffd40994efb604c14" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_u_char256_1ad6c864a6400529e7e670c6b97d55014f" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_char256_1a47afea3952c84e987647d305e84d926c" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_u_char256_1aa87bd398ed2bc04d1b88aba5b3cd9950" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_char256_1a3bef6b11b1d0f7d7da26d65f60a72dcf" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_u_char256_1ae470ba307493dde9ace0d7ac822325dc" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_char256_1a2fea06e449a30e4b55e0a49a5af1b312" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_u_char256_1aafaf69ff9c21d0a65e0071cc9968206b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_char256_1ab7bc239fe1d952ed53550c4f1df93af0" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_u_char256_1ad85b21b8d384a3a1aa33b8845f9ec40a" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_char256_1a2aabaaee8893908160e17632d99ce488" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_u_char256_1abcf357a7b5b67c81d643f13a30c2c766" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_char256_1a1b681e9d03b36ba47fb0f5600313f484" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_u_char256_1a8d5097fb10c0bb84530fd9cd3a627f47" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_char256_1a1189bee75387139468599a2b10d150a7" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_u_char256_1aef0afa28ddef275288fe9b66944871aa" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_char256_1a8b2eb9b899c980c7b4f5a1f3e2c6aa1a" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_u_char256_1ad0f1d5abbfaa4dbb06116bec632a60c2" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_char256_1a321a8b008f5a948f3363234ea7784ffb" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_u_char256_1aded81e2ab36dcfd21eeaefea39dd6e9b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_char256_1a9a25f5cba78089f19ad5f8d5654a35fa" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_u_char256_1af315d01c5355d0f4ed4d2023e3008a81" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1ae862868b1b73665ee359961d7203055b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1a68078b02b69961cd511eee1888118560" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_u_char256_1a95f458c17c1b5e0285473e5524716867" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_char256_1aaee6c756e2935da3c2b1776e519f3b0a" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_u_char256_1ac7e6197e1fa16108f72aa98f5ee0ced9" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_char256_1a6f9bb6e6f09921c6eabbf68417a7388b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_u_char256_1a4d33ac11841a57623ca3e1612be85133" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_char256_1a9d49f2203f5bd3dbedf23bdcda5c4129" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_u_char256_1a8f462c02a60ee341866d857aa460f171" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_char256_1a9e6843fc33f70e5b9bdae07a3cbff2af" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_u_char256_1af40bd631875be9dc639c23e76f1f6c13" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_u_char256_1aeb1a020148f8cd332a350af91fad3de2" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_char256_1a61021c51ba4a8aba59f0ba866972f14e" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_u_char256_1a8f3ddbf3f712accc542900eff6066977" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_char256_1a0c7f955b5b81e8cf79912cb419c48c09" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_u_char256_1a03eb09f835ed374f0b20441c421dba57" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_char256_1a2f26df773bef07723fe6572fe3fe2206" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_u_char256_1a4a5650d4ae97edbbe871bdfc688c4e49" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_char256_1ab3df386f51f879cae4ef7eedb58a2c40" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_u_char256_1ae0b8856818164e400f93ef8549485c1b" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_u_char256_1a1c3f349b32726616faa25ea575e9f6ac" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_char256_1a449f1b64966a52068dfc95a8edf5d0ec" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>save</name></member>
      <member refid="classavx_1_1_u_char256_1a6a14d0e56378c051bdcd1f2c5d918127" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_u_char256_1a2e2d59825a4e30db333857a757847599" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>set</name></member>
      <member refid="classavx_1_1_u_char256_1a2d93ebc50ecfc5a00839532013091cf4" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>size</name></member>
      <member refid="classavx_1_1_u_char256_1a4507caf14293893eebbcb9903373d634" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_u_char256_1ab3017afc90d57f773d44b94fd352b675" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>str</name></member>
      <member refid="classavx_1_1_u_char256_1a55e8e99c9c95b89cc97bfdfa87df9014" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>toString</name></member>
      <member refid="classavx_1_1_u_char256_1ad65831d82cf9fa0bf09d316014e216cc" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a88e2884c653674de4e8e24d1540b3e08" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1aad3251db80eb55be631bcd48898b8111" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a7daa5793dd933c16b925e580ba71b36d" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1aedd2eb8d019cc2dbc78bc767aee1efc7" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1adc354d94f11fb25d4d618ea25d168124" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a1a0403deb56f30f22304d515e7f3eb14" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a50f88c529af5de5603a165b4a46d0baa" prot="public" virt="non-virtual"><scope>avx::UChar256</scope><name>UChar256</name></member>
      <member refid="classavx_1_1_u_char256_1a98bfb70355aa4c583c502ea1239680eb" prot="private" virt="non-virtual"><scope>avx::UChar256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
