<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_double256" kind="class" language="C++" prot="public">
    <compoundname>avx::Double256</compoundname>
    <includes refid="double256_8hpp" local="no">double256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_double256_1ad11d9d79e4e4792cbfc769426c0e04ef" prot="public" static="no">
        <type>double</type>
        <definition>using avx::Double256::storedType =  double</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::Double256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="33" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_double256_1ad5db417b36283d016b7a3cddceefb5a3" prot="private" static="no" mutable="no">
        <type>__m256d</type>
        <definition>__m256d avx::Double256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::Double256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="21" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_double256_1ab3ed72ed44e5b9a366ce15ec002cd4dd" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::Double256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::Double256::size</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="28" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_double256_1a68b3446b519207ed2b61df20d230c8ed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="35" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a0ab0ae7fc1ec3b6dfeb602d6e6a83a83" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const double val) noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="37" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a29faa27746bbd551a89f5b02c2a49b1c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const __m256d init) noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const __m256d</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="39" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a324980571e72f5aff187b2f0b2833534" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const Double256 &amp;init) noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="41" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a11138d06d78517916f2d70ec4f0e34c8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const std::array&lt; double, 4 &gt; &amp;init) noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const std::array&lt; double, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="43" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a23ef3a5fb31d51a9735bcd0913e8c4df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const double *addr) N_THROW_REL</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const double *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="45" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a11312f2812dcad4b0321c5d9a053a9da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(std::initializer_list&lt; double &gt; init)</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; double &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="54" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="54" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a6f6b7a3fc6e01f6462b395bba192fbe3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::load</definition>
        <argsstring>(const double *pSrc) N_THROW_REL</argsstring>
        <name>load</name>
        <qualifiedname>avx::Double256::load</qualifiedname>
        <param>
          <type>const double *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="78" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aade0b6777f38a76af902d10d4220b404" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::save</definition>
        <argsstring>(std::array&lt; double, 4 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::Double256::save</qualifiedname>
        <param>
          <type>std::array&lt; double, 4 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="91" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a89a476a92aeebcbc2ff336da0e9e41a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::save</definition>
        <argsstring>(double *pDest) const N_THROW_REL</argsstring>
        <name>save</name>
        <qualifiedname>avx::Double256::save</qualifiedname>
        <param>
          <type>double *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (4x <computeroutput>double</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="102" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a672babaecbca5f269873d2e1826ad9b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::saveAligned</definition>
        <argsstring>(double *pDest) const N_THROW_REL</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::Double256::saveAligned</qualifiedname>
        <param>
          <type>double *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (4x <computeroutput>double</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="118" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="118" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1add8f59e988fdc70c5639e22c8cfca230" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const __m256d</type>
        <definition>const __m256d avx::Double256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::Double256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="128" column="27" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1ac6f41ace61804089518d2c89cdabd864" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::set</definition>
        <argsstring>(__m256d val) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::Double256::set</qualifiedname>
        <param>
          <type>__m256d</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="129" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a8293f21316ea531711bac47a9ec0699b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Double256::operator==</definition>
        <argsstring>(const Double256 &amp;bV)</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Double256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="132" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="132" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aa547541d8dbe8e7cfdeefc7357f05065" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Double256::operator==</definition>
        <argsstring>(const double b)</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Double256::operator==</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="152" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="152" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a77c3aaccf7a7270a0e1e4d835af75cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Double256::operator!=</definition>
        <argsstring>(const Double256 &amp;bV)</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Double256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="166" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="166" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a29c628531416a02c5fb1d82cf59fb3f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Double256::operator!=</definition>
        <argsstring>(const double b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Double256::operator!=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="179" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="179" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aa0fe34c8e8232d29121c0baba152f457" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator+</definition>
        <argsstring>(const Double256 &amp;other) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Double256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="194" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aff7ad0961dd4adc4a265094ab9a95997" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator+</definition>
        <argsstring>(const double val) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Double256::operator+</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="198" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1af9132623c7b4ebe2e0e6fe35ab81c33a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator+=</definition>
        <argsstring>(const Double256 &amp;other) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Double256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="202" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a8421f7bcfd356723cb949613d7a2a0b5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator+=</definition>
        <argsstring>(const double val) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Double256::operator+=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="207" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a130b0f40d279fbef58d05f47902f84f5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator-</definition>
        <argsstring>(const Double256 &amp;other) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Double256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="212" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1ad2e4bc47a901e578a5757e31d08ffd6b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator-</definition>
        <argsstring>(const double val) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Double256::operator-</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="216" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a0cbbfc7ecf9966b24e5b99104a3a0e39" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator-=</definition>
        <argsstring>(const Double256 &amp;other) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Double256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="220" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aff567c5ad55d94fa76cc3ca4f0400197" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator-=</definition>
        <argsstring>(const double val) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Double256::operator-=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="225" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a45465e7079338a409a2ae102fe0dfe36" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator*</definition>
        <argsstring>(const Double256 &amp;other) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Double256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="230" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a1b3d921ec6cdc768642b45539e6e8a02" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator*</definition>
        <argsstring>(const double val) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Double256::operator*</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="234" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a633316de27e630ce897223c31cab7c09" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator*=</definition>
        <argsstring>(const Double256 &amp;other) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Double256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="238" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1afd64dabe70aebcbbb9fbd157973b6d6a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator*=</definition>
        <argsstring>(const double val) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Double256::operator*=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="243" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a31aaa1e75e086a3e0238a3f8dcc838bc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator/</definition>
        <argsstring>(const Double256 &amp;other) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Double256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="248" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a90d976b16c5bf7276f44438d016ae35f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator/</definition>
        <argsstring>(const double val) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Double256::operator/</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="252" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a77b459baf8ef4af5db87d696483722cd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator/=</definition>
        <argsstring>(const Double256 &amp;other) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Double256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="256" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aca648004707511ef73d082040cf2f8c8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator/=</definition>
        <argsstring>(const double val) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Double256::operator/=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="261" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aa0dd0364633c34e87ac3fae731ebc7ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double avx::Double256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::Double256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. Does not support value assignment through this method (e.g. aV[0] = 1 won&apos;t work). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 3. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range and build type is debug will be thrown. Otherwise bitwise AND will prevent index to be out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="273" column="20" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="273" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1ad7c754f07ede8d94c5c2e9e42aeacb09" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Double256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::Double256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns string representation of vector. Printing will result in Double256(&lt;vector_values&gt;) eg. <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref>(1.000000, 2.000000, 3.000000, 4.000000) <simplesect kind="return"><para>String representation of underlying vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="290" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="290" bodyend="299"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>double</computeroutput>. Can hold 4 individual <computeroutput>double</computeroutput> values. Provides arithmetic operators.<itemizedlist>
<listitem><para>Provides comparison operators == != (optimization on the way). </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="18" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="18" bodyend="301"/>
    <listofallmembers>
      <member refid="classavx_1_1_double256_1a68b3446b519207ed2b61df20d230c8ed" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a0ab0ae7fc1ec3b6dfeb602d6e6a83a83" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a29faa27746bbd551a89f5b02c2a49b1c" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a324980571e72f5aff187b2f0b2833534" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a11138d06d78517916f2d70ec4f0e34c8" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a23ef3a5fb31d51a9735bcd0913e8c4df" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a11312f2812dcad4b0321c5d9a053a9da" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1add8f59e988fdc70c5639e22c8cfca230" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>get</name></member>
      <member refid="classavx_1_1_double256_1a6f6b7a3fc6e01f6462b395bba192fbe3" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>load</name></member>
      <member refid="classavx_1_1_double256_1a77c3aaccf7a7270a0e1e4d835af75cf1" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_double256_1a29c628531416a02c5fb1d82cf59fb3f8" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_double256_1a45465e7079338a409a2ae102fe0dfe36" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_double256_1a1b3d921ec6cdc768642b45539e6e8a02" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_double256_1a633316de27e630ce897223c31cab7c09" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_double256_1afd64dabe70aebcbbb9fbd157973b6d6a" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_double256_1aa0fe34c8e8232d29121c0baba152f457" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_double256_1aff7ad0961dd4adc4a265094ab9a95997" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_double256_1af9132623c7b4ebe2e0e6fe35ab81c33a" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_double256_1a8421f7bcfd356723cb949613d7a2a0b5" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_double256_1a130b0f40d279fbef58d05f47902f84f5" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_double256_1ad2e4bc47a901e578a5757e31d08ffd6b" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_double256_1a0cbbfc7ecf9966b24e5b99104a3a0e39" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_double256_1aff567c5ad55d94fa76cc3ca4f0400197" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_double256_1a31aaa1e75e086a3e0238a3f8dcc838bc" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_double256_1a90d976b16c5bf7276f44438d016ae35f" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_double256_1a77b459baf8ef4af5db87d696483722cd" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_double256_1aca648004707511ef73d082040cf2f8c8" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_double256_1a8293f21316ea531711bac47a9ec0699b" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_double256_1aa547541d8dbe8e7cfdeefc7357f05065" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_double256_1aa0dd0364633c34e87ac3fae731ebc7ed" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_double256_1aade0b6777f38a76af902d10d4220b404" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>save</name></member>
      <member refid="classavx_1_1_double256_1a89a476a92aeebcbc2ff336da0e9e41a9" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>save</name></member>
      <member refid="classavx_1_1_double256_1a672babaecbca5f269873d2e1826ad9b3" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_double256_1ac6f41ace61804089518d2c89cdabd864" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>set</name></member>
      <member refid="classavx_1_1_double256_1ab3ed72ed44e5b9a366ce15ec002cd4dd" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>size</name></member>
      <member refid="classavx_1_1_double256_1ad11d9d79e4e4792cbfc769426c0e04ef" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_double256_1ad7c754f07ede8d94c5c2e9e42aeacb09" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>str</name></member>
      <member refid="classavx_1_1_double256_1ad5db417b36283d016b7a3cddceefb5a3" prot="private" virt="non-virtual"><scope>avx::Double256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
