<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_double256" kind="class" language="C++" prot="public">
    <compoundname>avx::Double256</compoundname>
    <includes refid="double256_8hpp" local="no">double256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_double256_1ad11d9d79e4e4792cbfc769426c0e04ef" prot="public" static="no">
        <type>double</type>
        <definition>using avx::Double256::storedType =  double</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::Double256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="33" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_double256_1ad5db417b36283d016b7a3cddceefb5a3" prot="private" static="no" mutable="no">
        <type>__m256d</type>
        <definition>__m256d avx::Double256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::Double256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="21" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_double256_1ab3ed72ed44e5b9a366ce15ec002cd4dd" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::Double256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::Double256::size</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="28" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_double256_1a68b3446b519207ed2b61df20d230c8ed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes vector values with zeros. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="38" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a3472009057128111f5820badab850b8e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const double init) noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const double</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes all vector fields with single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>A literal value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="44" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a29faa27746bbd551a89f5b02c2a49b1c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const __m256d init) noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const __m256d</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector but using <computeroutput>__m256d</computeroutput> type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="50" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a324980571e72f5aff187b2f0b2833534" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const Double256 &amp;init) noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with value from other vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which value will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="56" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a11138d06d78517916f2d70ec4f0e34c8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const std::array&lt; double, 4 &gt; &amp;init) noexcept</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const std::array&lt; double, 4 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize vector with values read from an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="62" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1ae0ad5dcfa6e5f9a048c98cfae5af2f75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(const double *pSrc)</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>const double *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector by loading data from memory (via <computeroutput>_mm256_loadu_pd</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid memory addres of minimal size of 256-bits (32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="68" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a11312f2812dcad4b0321c5d9a053a9da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Double256::Double256</definition>
        <argsstring>(std::initializer_list&lt; double &gt; init)</argsstring>
        <name>Double256</name>
        <qualifiedname>avx::Double256::Double256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; double &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with variable-length initializer list. If list contains less then 16 values missing values will be filled with zeros. Otherwise only first 16 values will be copied into vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list from which values will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="83" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="83" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a651451005ba15ea458706e1682021af2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::load</definition>
        <argsstring>(const double *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::Double256::load</qualifiedname>
        <param>
          <type>const double *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="107" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="107" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aade0b6777f38a76af902d10d4220b404" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::save</definition>
        <argsstring>(std::array&lt; double, 4 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::Double256::save</qualifiedname>
        <param>
          <type>std::array&lt; double, 4 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="120" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a57a58d630183589fe983816af80bdbaa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::save</definition>
        <argsstring>(double *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::Double256::save</qualifiedname>
        <param>
          <type>double *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (4x <computeroutput>double</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="131" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="131" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1af86ae78bd1e49eb504f35f3bc2ac6523" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::saveAligned</definition>
        <argsstring>(double *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::Double256::saveAligned</qualifiedname>
        <param>
          <type>double *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (4x <computeroutput>double</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="147" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="147" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1add8f59e988fdc70c5639e22c8cfca230" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const __m256d</type>
        <definition>const __m256d avx::Double256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::Double256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the internal vector value. <simplesect kind="return"><para>The value of <computeroutput>__m256i</computeroutput> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="160" column="27" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a94ace518d47dea037217a5ba2e19efdc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Double256::set</definition>
        <argsstring>(__m256d value) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::Double256::set</qualifiedname>
        <param>
          <type>__m256d</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the internal vector value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="166" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a8293f21316ea531711bac47a9ec0699b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Double256::operator==</definition>
        <argsstring>(const Double256 &amp;bV)</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Double256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares two vectors for equality. This operator is secured against -0.0 == 0.0 comparison ensuring it will result <computeroutput>true</computeroutput>. <simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if ALL values in vectors are equal otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="173" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="173" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aa547541d8dbe8e7cfdeefc7357f05065" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Double256::operator==</definition>
        <argsstring>(const double b)</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Double256::operator==</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vector with scalar for equality. This operator is secured against -0.0 == 0.0 comparison ensuring it will return <computeroutput>true</computeroutput>. <simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if ALL values in vector are equal to <computeroutput>b</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="195" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="195" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a77c3aaccf7a7270a0e1e4d835af75cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Double256::operator!=</definition>
        <argsstring>(const Double256 &amp;bV)</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Double256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares two vectors for inequality. This operator is secured against -0.0 == 0.0 comparison ensuring it will return <computeroutput>false</computeroutput>. <simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if ANY value in vectors is not equal otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="217" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="217" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a29c628531416a02c5fb1d82cf59fb3f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Double256::operator!=</definition>
        <argsstring>(const double b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Double256::operator!=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vector with scalar for inequality. This operator is secured against -0.0 == 0.0 comparison ensuring it will return <computeroutput>false</computeroutput>. <simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if ANY value in vector is not equal to <computeroutput>b</computeroutput> otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="238" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="238" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a140c3e18ac54982be49296b90b9157c3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator+</definition>
        <argsstring>(const Double256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Double256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two vectors together. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of adding <computeroutput>bV</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="261" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a35184ff79f0a74eef013b8d459083084" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator+</definition>
        <argsstring>(const double b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Double256::operator+</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds scalar to all vector fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of adding <computeroutput>b</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="270" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="270" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1acfb345cf0a603a813cd83100d0ebfeb5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator+=</definition>
        <argsstring>(const Double256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Double256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two vectors together and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after adding <computeroutput>bV</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="279" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1afc17de257a64ed53ea484154a3ca9ee7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator+=</definition>
        <argsstring>(const double b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Double256::operator+=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds scalar to vector and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after adding <computeroutput>b</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="289" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a707751946a9ceadf4a712e05d30bcd89" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator-</definition>
        <argsstring>(const Double256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Double256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of subtracting <computeroutput>bV</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="299" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="299" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a04a5edf91d663bdd97b1fce02ac9bf01" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator-</definition>
        <argsstring>(const double b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Double256::operator-</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts scalar from all vector fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to be subtracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of subtracting <computeroutput>b</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="308" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1ad8518d3572238cf78cab42e420a00ca0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator-=</definition>
        <argsstring>(const Double256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Double256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after subtracting <computeroutput>bV</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="317" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1af72fd196e8251b6a3ab4b85f44831598" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator-=</definition>
        <argsstring>(const double b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Double256::operator-=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts scalar from vector and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to be subtracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after subtracting <computeroutput>b</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="327" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a206c09c9c06b85b3313ade42a47fd0ba" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator*</definition>
        <argsstring>(const Double256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Double256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of multiplying vector by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="337" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="337" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a42c11e736e26d701508fe6e71f195682" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator*</definition>
        <argsstring>(const double b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Double256::operator*</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies all vector fields by scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of multiplying vector by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="346" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="346" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aaf0623987a45313c5f4ae5d44df0d0a1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator*=</definition>
        <argsstring>(const Double256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Double256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after multiplying by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="355" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aa00ab33ec898fc522a3f37c5c0f7ab4f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator*=</definition>
        <argsstring>(const double b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Double256::operator*=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies vector by scalar and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after multiplying by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="365" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a322d221c8a6f3807515b85a62db941ae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator/</definition>
        <argsstring>(const Double256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Double256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of dividing vector by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="375" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="375" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a2623f99805b7e8c79665f470229de7da" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 avx::Double256::operator/</definition>
        <argsstring>(const double b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Double256::operator/</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides all vector fields by scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of dividing vector by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="384" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="384" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1adb7a7280bd0230abdbb12b51b40590ab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator/=</definition>
        <argsstring>(const Double256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Double256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after dividing by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="393" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1a71234df29fd155d08e9365b8aa6d303e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
        <definition>Double256 &amp; avx::Double256::operator/=</definition>
        <argsstring>(const double b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Double256::operator/=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides vector by scalar and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after dividing by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="403" column="23" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1aa0dd0364633c34e87ac3fae731ebc7ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double avx::Double256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::Double256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. Does not support value assignment through this method (e.g. aV[0] = 1 won&apos;t work). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 3. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range and build type is debug will be thrown. Otherwise bitwise AND will prevent index to be out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="415" column="20" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="415" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_double256_1ad7c754f07ede8d94c5c2e9e42aeacb09" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Double256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::Double256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns string representation of vector. Printing will result in Double256(&lt;vector_values&gt;) eg. <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref>(1.000000, 2.000000, 3.000000, 4.000000) <simplesect kind="return"><para>String representation of underlying vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="432" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="432" bodyend="441"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_double256_1a75d096397e6e70da582134dd1dd57c53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 operator+</definition>
        <argsstring>(double a, const Double256 &amp;bV)</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Double256::operator+</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides support for <computeroutput>double</computeroutput> + <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to which <computeroutput>bV</computeroutput> should be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> Vector being a result of <computeroutput>a</computeroutput> + <computeroutput>bV</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="451" column="30" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="451" bodyend="453"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_double256_1a172eb88428e5b9350ffec6d9ae23b464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 operator-</definition>
        <argsstring>(double a, const Double256 &amp;bV)</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Double256::operator-</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides support for <computeroutput>double</computeroutput> - <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to which <computeroutput>bV</computeroutput> should be substracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be substracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> Vector being a result of <computeroutput>a</computeroutput> - <computeroutput>bV</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="461" column="30" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="461" bodyend="463"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_double256_1a62bbe2144e3120c28254469d42b3d8d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 operator*</definition>
        <argsstring>(double a, const Double256 &amp;bV)</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Double256::operator*</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides support for <computeroutput>double</computeroutput> * <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar which should be multiplied by <computeroutput>bV</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be multiplier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> Vector being a result of <computeroutput>a</computeroutput> * <computeroutput>bV</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="471" column="30" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="471" bodyend="473"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_double256_1ab7c5742bcd7b328b50789fa9fb77ddfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref></type>
        <definition>Double256 operator/</definition>
        <argsstring>(double a, const Double256 &amp;bV)</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Double256::operator/</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides support for <computeroutput>double</computeroutput> / <ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar which should be divided by <computeroutput>bV</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_double256" kindref="compound">Double256</ref> Vector being a result of <computeroutput>a</computeroutput> / <computeroutput>bV</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="481" column="30" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="481" bodyend="483"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>double</computeroutput>. Can hold 4 individual <computeroutput>double</computeroutput> values. Provides arithmetic operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" line="18" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/double256.hpp" bodystart="18" bodyend="485"/>
    <listofallmembers>
      <member refid="classavx_1_1_double256_1a68b3446b519207ed2b61df20d230c8ed" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a3472009057128111f5820badab850b8e" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a29faa27746bbd551a89f5b02c2a49b1c" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a324980571e72f5aff187b2f0b2833534" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a11138d06d78517916f2d70ec4f0e34c8" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1ae0ad5dcfa6e5f9a048c98cfae5af2f75" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1a11312f2812dcad4b0321c5d9a053a9da" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>Double256</name></member>
      <member refid="classavx_1_1_double256_1add8f59e988fdc70c5639e22c8cfca230" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>get</name></member>
      <member refid="classavx_1_1_double256_1a651451005ba15ea458706e1682021af2" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>load</name></member>
      <member refid="classavx_1_1_double256_1a77c3aaccf7a7270a0e1e4d835af75cf1" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_double256_1a29c628531416a02c5fb1d82cf59fb3f8" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_double256_1a206c09c9c06b85b3313ade42a47fd0ba" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_double256_1a42c11e736e26d701508fe6e71f195682" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_double256_1a62bbe2144e3120c28254469d42b3d8d1" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_double256_1aaf0623987a45313c5f4ae5d44df0d0a1" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_double256_1aa00ab33ec898fc522a3f37c5c0f7ab4f" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_double256_1a140c3e18ac54982be49296b90b9157c3" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_double256_1a35184ff79f0a74eef013b8d459083084" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_double256_1a75d096397e6e70da582134dd1dd57c53" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_double256_1acfb345cf0a603a813cd83100d0ebfeb5" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_double256_1afc17de257a64ed53ea484154a3ca9ee7" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_double256_1a707751946a9ceadf4a712e05d30bcd89" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_double256_1a04a5edf91d663bdd97b1fce02ac9bf01" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_double256_1a172eb88428e5b9350ffec6d9ae23b464" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_double256_1ad8518d3572238cf78cab42e420a00ca0" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_double256_1af72fd196e8251b6a3ab4b85f44831598" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_double256_1a322d221c8a6f3807515b85a62db941ae" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_double256_1a2623f99805b7e8c79665f470229de7da" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_double256_1ab7c5742bcd7b328b50789fa9fb77ddfa" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_double256_1adb7a7280bd0230abdbb12b51b40590ab" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_double256_1a71234df29fd155d08e9365b8aa6d303e" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_double256_1a8293f21316ea531711bac47a9ec0699b" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_double256_1aa547541d8dbe8e7cfdeefc7357f05065" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_double256_1aa0dd0364633c34e87ac3fae731ebc7ed" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_double256_1aade0b6777f38a76af902d10d4220b404" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>save</name></member>
      <member refid="classavx_1_1_double256_1a57a58d630183589fe983816af80bdbaa" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>save</name></member>
      <member refid="classavx_1_1_double256_1af86ae78bd1e49eb504f35f3bc2ac6523" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_double256_1a94ace518d47dea037217a5ba2e19efdc" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>set</name></member>
      <member refid="classavx_1_1_double256_1ab3ed72ed44e5b9a366ce15ec002cd4dd" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>size</name></member>
      <member refid="classavx_1_1_double256_1ad11d9d79e4e4792cbfc769426c0e04ef" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_double256_1ad7c754f07ede8d94c5c2e9e42aeacb09" prot="public" virt="non-virtual"><scope>avx::Double256</scope><name>str</name></member>
      <member refid="classavx_1_1_double256_1ad5db417b36283d016b7a3cddceefb5a3" prot="private" virt="non-virtual"><scope>avx::Double256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
