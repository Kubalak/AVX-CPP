<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_float256" kind="class" language="C++" prot="public">
    <compoundname>avx::Float256</compoundname>
    <includes refid="float256_8hpp" local="no">float256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_float256_1a1af5c742978243cce3b7869f4e4c47de" prot="public" static="no">
        <type>float</type>
        <definition>using avx::Float256::storedType =  float</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::Float256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="32" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_float256_1a807f6126b6f82c9866f1b4754c052fe9" prot="private" static="no" mutable="no">
        <type>__m256</type>
        <definition>__m256 avx::Float256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::Float256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="20" column="20" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_float256_1af1a301e331306ac1ef47bb67feaacd51" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::Float256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::Float256::size</qualifiedname>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="27" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_float256_1aaf79eeaf2622f82dfec790eea4cc54a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes vector with zeros. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="37" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a933268afcc37f0a7f475933b8cbe8ddf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const Float256 &amp;init) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor. Initializes vector from another <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> vector to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="44" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a86589f56e127e08937446b56d0d379d1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const float value) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with const value. Each cell will be set with value of <computeroutput>value</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="50" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa4c9a94de6d70094fb3a9ede6e65a4d5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const __m256 init) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const __m256</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from __m256 value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of type __m256 to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="56" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa7ae3a7c2c9b794e4ba39878bd750af3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const std::array&lt; float, 8 &gt; &amp;init) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const std::array&lt; float, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from std::array of 8 float values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 8 float values to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="62" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1af7891223c869a8e30fa52e64cc45579d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(std::initializer_list&lt; float &gt; init) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; float &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from initializer_list of float values. If the list contains fewer than 8 elements, remaining elements are set to zero. If the list contains more than 8 elements, only the first 8 are used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list of float values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="70" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="70" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a713fce05ff701807106ce98f34f9ad93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const float *pSrc)</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector by loading data from memory (via <computeroutput>_mm256_loadu_ps</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory of at least 32 bytes (8 floats). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and passed <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="95" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1abe90ea496b0b2c8573c1f5e33efcf878" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const __m256</type>
        <definition>const __m256 avx::Float256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::Float256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the internal __m256 value stored by the object. <simplesect kind="return"><para>The __m256 value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="108" column="26" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a11ad422c06fc456499fbdad71e88a4fb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::set</definition>
        <argsstring>(__m256 val) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::Float256::set</qualifiedname>
        <param>
          <type>__m256</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the internal __m256 value stored by the object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New value of type __m256. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="114" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ad55bae898da176a5b58b9caaa650affc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::load</definition>
        <argsstring>(const float *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::Float256::load</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="121" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="121" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1c836a6f30e03e48414adb1f8f223fea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::save</definition>
        <argsstring>(std::array&lt; float, 8 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::Float256::save</qualifiedname>
        <param>
          <type>std::array&lt; float, 8 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="134" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a84a67554fe5aeea85273662849841dec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::save</definition>
        <argsstring>(float *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::Float256::save</qualifiedname>
        <param>
          <type>float *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>float</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="145" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="145" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a6285f002c04184530b807b7551c6e8cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::saveAligned</definition>
        <argsstring>(float *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::Float256::saveAligned</qualifiedname>
        <param>
          <type>float *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>float</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="161" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="161" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ae1496dee50bec0487a0085a145671786" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator==</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Float256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all fields in both vectors have the same value, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="175" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="175" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ab578a1c38df13f1b07dc23788bbfef83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator==</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Float256::operator==</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all fields in vectors have the same value as b, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="200" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="200" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a07a0f2fdddbe88828844799e8ca159f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator!=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Float256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ANY field in one vector has different value than one in scond vector, <computeroutput>false</computeroutput> if vector are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="219" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="219" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a6265ed5e6545d82bac595edad19ea8e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator!=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Float256::operator!=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ANY field in vector has different value than passed value, <computeroutput>false</computeroutput> if vector are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="238" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="238" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a20bcd485318006ead8b11f3b2ac33d8d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator+</definition>
        <argsstring>(const Float256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Float256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two vectors together. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of adding <computeroutput>bV</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="257" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a11578f423c04732ea79acb5e5cb1e15f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator+</definition>
        <argsstring>(const float b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Float256::operator+</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds scalar to all vector fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of adding <computeroutput>b</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="266" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ad53859cf7c7bd34d261070ae437f8c7e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator+=</definition>
        <argsstring>(const Float256 &amp;bV) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Float256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two vectors together and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after adding <computeroutput>bV</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="275" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a5ee1e00887359736930e65f6562431c3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator+=</definition>
        <argsstring>(const float b) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Float256::operator+=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds scalar to vector and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after adding <computeroutput>b</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="285" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a44b6555826ba00a394a280e334834055" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator-</definition>
        <argsstring>(const Float256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Float256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of subtracting <computeroutput>bV</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="295" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="295" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1af9b1e07239db92e1edf57ced7a03a489" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator-</definition>
        <argsstring>(const float b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Float256::operator-</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts scalar from all vector fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to be subtracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of subtracting <computeroutput>b</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="304" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a894b7019a95eac6b9a8996c7a4cf89b0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator-=</definition>
        <argsstring>(const Float256 &amp;bV) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Float256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after subtracting <computeroutput>bV</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="313" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a4291e51701720674d8a2efde895442b5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator-=</definition>
        <argsstring>(const float b) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Float256::operator-=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts scalar from vector and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to be subtracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after subtracting <computeroutput>b</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="323" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ac465a203fea13a95ee324543545c9ff3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator*</definition>
        <argsstring>(const Float256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Float256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of multiplying vector by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="333" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="333" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ae343750a983a7c85bd594de428b28e34" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator*</definition>
        <argsstring>(const float b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Float256::operator*</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies all vector fields by scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of multiplying vector by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="342" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="342" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a0e5ac98e1282d0735afa0660418790e8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator*=</definition>
        <argsstring>(const Float256 &amp;bV) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Float256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after multiplying by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="351" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a05bafdac9ec2585d1d72d936456df82d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator*=</definition>
        <argsstring>(const float b) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Float256::operator*=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies vector by scalar and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after multiplying by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="361" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a05aac9afa48fede94b22c1f6de8a57c9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator/</definition>
        <argsstring>(const Float256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Float256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of dividing vector by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="371" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1ba8dea7d0fc3c5d42f4fa6dc4735e2e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator/</definition>
        <argsstring>(const float b) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Float256::operator/</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides all vector fields by scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector being result of dividing vector by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="380" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="380" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1acb43e6eb25ad2cbce410830356167e57" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator/=</definition>
        <argsstring>(const Float256 &amp;bV) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Float256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after dividing by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="389" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="389" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a321867e8667b57cfdc10dbb559f5561c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator/=</definition>
        <argsstring>(const float b) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Float256::operator/=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides vector by scalar and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after dividing by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="399" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1cb1fb731d5d7224ff18878b1bf4725f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float avx::Float256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::Float256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. Does not support value assignment through this method (e.g. aV[0] = 1 won&apos;t work). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 7. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range and build type is debug will be thrown. Otherwise bitwise AND will prevent index to be out of range. Side effect is that only 3 LSBs are used from <computeroutput>index</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="411" column="19" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="411" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a905330b7b986cb226f76dad566996e9e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Float256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::Float256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns string representation of vector. Printing will result in Float256(&lt;vector_values&gt;) eg. <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref>(1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 6.000000, 7.000000, 8.000000) <simplesect kind="return"><para>String representation of underlying vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="427" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="427" bodyend="436"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_float256_1aaa97b529656b4be34c173d53ffa8b9d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 operator+</definition>
        <argsstring>(float a, const Float256 &amp;bV)</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Float256::operator+</qualifiedname>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides support for <computeroutput>float</computeroutput> + <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to which <computeroutput>bV</computeroutput> should be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> Vector being a result of <computeroutput>a</computeroutput> + <computeroutput>bV</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="445" column="29" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="445" bodyend="447"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_float256_1abb7ef0663f8ac072a738d68cda0e181d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 operator-</definition>
        <argsstring>(float a, const Float256 &amp;bV)</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Float256::operator-</qualifiedname>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides support for <computeroutput>float</computeroutput> - <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar from which <computeroutput>bV</computeroutput> should be subtracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be subtracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> Vector being a result of <computeroutput>a</computeroutput> - <computeroutput>bV</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="455" column="29" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="455" bodyend="457"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_float256_1a408a2a72d6021340e5c2f826aa8b8996" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 operator*</definition>
        <argsstring>(float a, const Float256 &amp;bV)</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Float256::operator*</qualifiedname>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides support for <computeroutput>float</computeroutput> * <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar which should be multiplied by <computeroutput>bV</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be multiplier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> Vector being a result of <computeroutput>a</computeroutput> * <computeroutput>bV</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="465" column="29" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="465" bodyend="467"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_float256_1a11e73c7549f3a122c7417a23e5a74dd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 operator/</definition>
        <argsstring>(float a, const Float256 &amp;bV)</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Float256::operator/</qualifiedname>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides support for <computeroutput>float</computeroutput> / <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar which should be divided by <computeroutput>bV</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> Vector being a result of <computeroutput>a</computeroutput> / <computeroutput>bV</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="475" column="29" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="475" bodyend="477"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>float</computeroutput>. Can hold 8 individual <computeroutput>float</computeroutput> values. Provides arithmetic operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="18" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="18" bodyend="479"/>
    <listofallmembers>
      <member refid="classavx_1_1_float256_1aaf79eeaf2622f82dfec790eea4cc54a9" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a933268afcc37f0a7f475933b8cbe8ddf" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a86589f56e127e08937446b56d0d379d1" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1aa4c9a94de6d70094fb3a9ede6e65a4d5" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1aa7ae3a7c2c9b794e4ba39878bd750af3" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1af7891223c869a8e30fa52e64cc45579d" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a713fce05ff701807106ce98f34f9ad93" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1abe90ea496b0b2c8573c1f5e33efcf878" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>get</name></member>
      <member refid="classavx_1_1_float256_1ad55bae898da176a5b58b9caaa650affc" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>load</name></member>
      <member refid="classavx_1_1_float256_1a07a0f2fdddbe88828844799e8ca159f6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_float256_1a6265ed5e6545d82bac595edad19ea8e6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_float256_1ac465a203fea13a95ee324543545c9ff3" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_float256_1ae343750a983a7c85bd594de428b28e34" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_float256_1a408a2a72d6021340e5c2f826aa8b8996" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_float256_1a0e5ac98e1282d0735afa0660418790e8" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_float256_1a05bafdac9ec2585d1d72d936456df82d" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_float256_1a20bcd485318006ead8b11f3b2ac33d8d" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_float256_1a11578f423c04732ea79acb5e5cb1e15f" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_float256_1aaa97b529656b4be34c173d53ffa8b9d2" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_float256_1ad53859cf7c7bd34d261070ae437f8c7e" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_float256_1a5ee1e00887359736930e65f6562431c3" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_float256_1a44b6555826ba00a394a280e334834055" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_float256_1af9b1e07239db92e1edf57ced7a03a489" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_float256_1abb7ef0663f8ac072a738d68cda0e181d" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_float256_1a894b7019a95eac6b9a8996c7a4cf89b0" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_float256_1a4291e51701720674d8a2efde895442b5" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_float256_1a05aac9afa48fede94b22c1f6de8a57c9" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_float256_1a1ba8dea7d0fc3c5d42f4fa6dc4735e2e" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_float256_1a11e73c7549f3a122c7417a23e5a74dd6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_float256_1acb43e6eb25ad2cbce410830356167e57" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_float256_1a321867e8667b57cfdc10dbb559f5561c" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_float256_1ae1496dee50bec0487a0085a145671786" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_float256_1ab578a1c38df13f1b07dc23788bbfef83" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_float256_1a1cb1fb731d5d7224ff18878b1bf4725f" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_float256_1a1c836a6f30e03e48414adb1f8f223fea" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>save</name></member>
      <member refid="classavx_1_1_float256_1a84a67554fe5aeea85273662849841dec" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>save</name></member>
      <member refid="classavx_1_1_float256_1a6285f002c04184530b807b7551c6e8cb" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_float256_1a11ad422c06fc456499fbdad71e88a4fb" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>set</name></member>
      <member refid="classavx_1_1_float256_1af1a301e331306ac1ef47bb67feaacd51" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>size</name></member>
      <member refid="classavx_1_1_float256_1a1af5c742978243cce3b7869f4e4c47de" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_float256_1a905330b7b986cb226f76dad566996e9e" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>str</name></member>
      <member refid="classavx_1_1_float256_1a807f6126b6f82c9866f1b4754c052fe9" prot="private" virt="non-virtual"><scope>avx::Float256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
