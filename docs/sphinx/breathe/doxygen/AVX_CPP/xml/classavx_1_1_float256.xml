<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_float256" kind="class" language="C++" prot="public">
    <compoundname>avx::Float256</compoundname>
    <includes refid="float256_8hpp" local="no">float256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_float256_1a1af5c742978243cce3b7869f4e4c47de" prot="public" static="no">
        <type>float</type>
        <definition>using avx::Float256::storedType =  float</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::Float256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="30" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_float256_1a807f6126b6f82c9866f1b4754c052fe9" prot="private" static="no" mutable="no">
        <type>__m256</type>
        <definition>__m256 avx::Float256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::Float256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="26" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_float256_1af1a301e331306ac1ef47bb67feaacd51" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::Float256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::Float256::size</qualifiedname>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="29" column="34" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_float256_1aaf79eeaf2622f82dfec790eea4cc54a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="32" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a933268afcc37f0a7f475933b8cbe8ddf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const Float256 &amp;init) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="33" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a86589f56e127e08937446b56d0d379d1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const float value) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="34" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa4c9a94de6d70094fb3a9ede6e65a4d5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const __m256 init) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const __m256</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="35" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa7ae3a7c2c9b794e4ba39878bd750af3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const std::array&lt; float, 8 &gt; &amp;init) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const std::array&lt; float, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="36" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1af7891223c869a8e30fa52e64cc45579d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(std::initializer_list&lt; float &gt; init) noexcept</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; float &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="38" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="38" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a713fce05ff701807106ce98f34f9ad93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const float *pSrc)</argsstring>
        <name>Float256</name>
        <qualifiedname>avx::Float256::Float256</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="58" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1abe90ea496b0b2c8573c1f5e33efcf878" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const __m256</type>
        <definition>const __m256 avx::Float256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>avx::Float256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="60" column="26" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a11ad422c06fc456499fbdad71e88a4fb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::set</definition>
        <argsstring>(__m256 val) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>avx::Float256::set</qualifiedname>
        <param>
          <type>__m256</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="61" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a02e9ba08f43556b8054da2e3ae1beb8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::load</definition>
        <argsstring>(const float *pSrc) N_THROW_REL</argsstring>
        <name>load</name>
        <qualifiedname>avx::Float256::load</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="68" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1c836a6f30e03e48414adb1f8f223fea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::save</definition>
        <argsstring>(std::array&lt; float, 8 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::Float256::save</qualifiedname>
        <param>
          <type>std::array&lt; float, 8 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="81" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a533fc3c3dd7f4316e9b5ec14ca170bdb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::save</definition>
        <argsstring>(float *pDest) const N_THROW_REL</argsstring>
        <name>save</name>
        <qualifiedname>avx::Float256::save</qualifiedname>
        <param>
          <type>float *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>float</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="92" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a5d4c07069167239aa2fa2d1a748a9043" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::saveAligned</definition>
        <argsstring>(float *pDest) const N_THROW_REL</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::Float256::saveAligned</qualifiedname>
        <param>
          <type>float *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>float</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release builds this method never throws (for <computeroutput>nullptr</computeroutput> method will have no effect). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="108" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="108" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ae1496dee50bec0487a0085a145671786" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator==</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Float256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all fields in both vectors have the same value, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="123" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="123" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ab578a1c38df13f1b07dc23788bbfef83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator==</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Float256::operator==</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all fields in vectors have the same value as b, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="148" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="148" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a07a0f2fdddbe88828844799e8ca159f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator!=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Float256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ANY field in one vector has different value than one in scond vector, <computeroutput>false</computeroutput> if vector are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="167" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="167" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a6265ed5e6545d82bac595edad19ea8e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator!=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Float256::operator!=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ANY field in vector has different value than passed value, <computeroutput>false</computeroutput> if vector are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="186" column="18" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="186" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a20bcd485318006ead8b11f3b2ac33d8d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator+</definition>
        <argsstring>(const Float256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Float256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="200" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a3f59fea160b9e7ee724cb05ca108eaf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator+</definition>
        <argsstring>(const float b) const</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Float256::operator+</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="204" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa952d4d0a2c5478c9ed185e6882a0df0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator+=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Float256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="208" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ae7656f2d4cd310216fa5fa1606d54809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator+=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Float256::operator+=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="213" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a308e53a2d94cf1f65181b705093a6bba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator-</definition>
        <argsstring>(const Float256 &amp;bV) const</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Float256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="218" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ab30061ffe75d5d21b2002a164e9290c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator-</definition>
        <argsstring>(const float b) const</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Float256::operator-</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="222" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a4d8b001beff49cbc2bccc6f2e7b7c808" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator-=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Float256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="226" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa9aba695dee7af4a4f9ca445de26c6d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator-=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Float256::operator-=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="231" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a4597a6f234902d62a216850ccf90e79a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator*</definition>
        <argsstring>(const Float256 &amp;bV) const</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Float256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="236" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa526a29c2d6a6c879e7c87c2c56bfd4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator*</definition>
        <argsstring>(const float b) const</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Float256::operator*</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="240" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1535bef2e98641aaec8ec379bc6aa041" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator*=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Float256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="244" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a8b0e3424a3706005f824a77ec72227e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator*=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Float256::operator*=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="249" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1af168a23c01e2a76483a1d3a343cf95da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator/</definition>
        <argsstring>(const Float256 &amp;bV) const</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Float256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="254" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aed7e0cdd4977b96b0be87742ef8a932a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator/</definition>
        <argsstring>(const float b) const</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Float256::operator/</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="258" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a2e303a1d7db3b475169cc20ce86d1260" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator/=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Float256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="262" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1afcfb28b03a2023860dc2cc042930b8a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256 &amp; avx::Float256::operator/=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Float256::operator/=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="267" column="22" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1cb1fb731d5d7224ff18878b1bf4725f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float avx::Float256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::Float256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="272" column="19" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="272" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a905330b7b986cb226f76dad566996e9e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Float256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <qualifiedname>avx::Float256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="283" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="283" bodyend="292"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>float</computeroutput>. Can hold 8 individual <computeroutput>float</computeroutput> values. Provides arithmetic operators.<itemizedlist>
<listitem><para>Provides comparison operators == != (optimization on the way). Class providing vectorized version of <computeroutput>float</computeroutput>. Can hold 8 individual <computeroutput>float</computeroutput> values. Provides arithmetic operators.</para>
</listitem><listitem><para>Provides comparison operators == != (optimization on the way). </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" line="24" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/float256.hpp" bodystart="24" bodyend="294"/>
    <listofallmembers>
      <member refid="classavx_1_1_float256_1aaf79eeaf2622f82dfec790eea4cc54a9" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a933268afcc37f0a7f475933b8cbe8ddf" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a86589f56e127e08937446b56d0d379d1" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1aa4c9a94de6d70094fb3a9ede6e65a4d5" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1aa7ae3a7c2c9b794e4ba39878bd750af3" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1af7891223c869a8e30fa52e64cc45579d" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a713fce05ff701807106ce98f34f9ad93" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1abe90ea496b0b2c8573c1f5e33efcf878" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>get</name></member>
      <member refid="classavx_1_1_float256_1a02e9ba08f43556b8054da2e3ae1beb8a" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>load</name></member>
      <member refid="classavx_1_1_float256_1a07a0f2fdddbe88828844799e8ca159f6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_float256_1a6265ed5e6545d82bac595edad19ea8e6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_float256_1a4597a6f234902d62a216850ccf90e79a" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_float256_1aa526a29c2d6a6c879e7c87c2c56bfd4c" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_float256_1a1535bef2e98641aaec8ec379bc6aa041" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_float256_1a8b0e3424a3706005f824a77ec72227e0" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_float256_1a20bcd485318006ead8b11f3b2ac33d8d" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_float256_1a3f59fea160b9e7ee724cb05ca108eaf6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_float256_1aa952d4d0a2c5478c9ed185e6882a0df0" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_float256_1ae7656f2d4cd310216fa5fa1606d54809" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_float256_1a308e53a2d94cf1f65181b705093a6bba" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_float256_1ab30061ffe75d5d21b2002a164e9290c8" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_float256_1a4d8b001beff49cbc2bccc6f2e7b7c808" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_float256_1aa9aba695dee7af4a4f9ca445de26c6d6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_float256_1af168a23c01e2a76483a1d3a343cf95da" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_float256_1aed7e0cdd4977b96b0be87742ef8a932a" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_float256_1a2e303a1d7db3b475169cc20ce86d1260" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_float256_1afcfb28b03a2023860dc2cc042930b8a6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_float256_1ae1496dee50bec0487a0085a145671786" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_float256_1ab578a1c38df13f1b07dc23788bbfef83" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_float256_1a1cb1fb731d5d7224ff18878b1bf4725f" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_float256_1a1c836a6f30e03e48414adb1f8f223fea" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>save</name></member>
      <member refid="classavx_1_1_float256_1a533fc3c3dd7f4316e9b5ec14ca170bdb" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>save</name></member>
      <member refid="classavx_1_1_float256_1a5d4c07069167239aa2fa2d1a748a9043" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_float256_1a11ad422c06fc456499fbdad71e88a4fb" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>set</name></member>
      <member refid="classavx_1_1_float256_1af1a301e331306ac1ef47bb67feaacd51" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>size</name></member>
      <member refid="classavx_1_1_float256_1a1af5c742978243cce3b7869f4e4c47de" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_float256_1a905330b7b986cb226f76dad566996e9e" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>str</name></member>
      <member refid="classavx_1_1_float256_1a807f6126b6f82c9866f1b4754c052fe9" prot="private" virt="non-virtual"><scope>avx::Float256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
