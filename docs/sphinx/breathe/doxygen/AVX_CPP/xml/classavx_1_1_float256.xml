<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classavx_1_1_float256" kind="class" language="C++" prot="public">
    <compoundname>avx::Float256</compoundname>
    <includes refid="float256_8hpp" local="no">float256.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_float256_1a1af5c742978243cce3b7869f4e4c47de" prot="public" static="no">
        <type>float</type>
        <definition>using avx::Float256::storedType =  float</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="24" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_float256_1a807f6126b6f82c9866f1b4754c052fe9" prot="private" static="no" mutable="no">
        <type>__m256</type>
        <definition>__m256 avx::Float256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="20" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_float256_1af1a301e331306ac1ef47bb67feaacd51" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int avx::Float256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="23" column="34" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_float256_1aaf79eeaf2622f82dfec790eea4cc54a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>() noexcept</argsstring>
        <name>Float256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="26" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a933268afcc37f0a7f475933b8cbe8ddf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const Float256 &amp;init) noexcept</argsstring>
        <name>Float256</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="27" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a86589f56e127e08937446b56d0d379d1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const float value) noexcept</argsstring>
        <name>Float256</name>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="28" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa4c9a94de6d70094fb3a9ede6e65a4d5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const __m256 init) noexcept</argsstring>
        <name>Float256</name>
        <param>
          <type>const __m256</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="29" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa7ae3a7c2c9b794e4ba39878bd750af3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const std::array&lt; float, 8 &gt; &amp;init) noexcept</argsstring>
        <name>Float256</name>
        <param>
          <type>const std::array&lt; float, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="30" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1af7891223c869a8e30fa52e64cc45579d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(std::initializer_list&lt; float &gt; init) noexcept</argsstring>
        <name>Float256</name>
        <param>
          <type>std::initializer_list&lt; float &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="32" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="32" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a713fce05ff701807106ce98f34f9ad93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Float256::Float256</definition>
        <argsstring>(const float *pSrc)</argsstring>
        <name>Float256</name>
        <param>
          <type>const float *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="52" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1abe90ea496b0b2c8573c1f5e33efcf878" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const __m256</type>
        <definition>const __m256 avx::Float256::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="54" column="26" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a11ad422c06fc456499fbdad71e88a4fb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::set</definition>
        <argsstring>(__m256 val) noexcept</argsstring>
        <name>set</name>
        <param>
          <type>__m256</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="55" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ad55bae898da176a5b58b9caaa650affc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::load</definition>
        <argsstring>(const float *pSrc)</argsstring>
        <name>load</name>
        <param>
          <type>const float *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="61" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a84a67554fe5aeea85273662849841dec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::save</definition>
        <argsstring>(float *pDest) const</argsstring>
        <name>save</name>
        <param>
          <type>float *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="66" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1c836a6f30e03e48414adb1f8f223fea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::save</definition>
        <argsstring>(std::array&lt; float, 8 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <param>
          <type>std::array&lt; float, 8 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="70" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ad3136f9cbe502e28ac5b472e39c43c0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Float256::saveAligned</definition>
        <argsstring>(float *dest) const</argsstring>
        <name>saveAligned</name>
        <param>
          <type>float *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="74" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ae1496dee50bec0487a0085a145671786" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator==</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all fields in both vectors have the same value, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="84" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="84" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ab578a1c38df13f1b07dc23788bbfef83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator==</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with value for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all fields in vectors have the same value as b, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="109" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="109" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a07a0f2fdddbe88828844799e8ca159f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator!=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ANY field in one vector has different value than one in scond vector, <computeroutput>false</computeroutput> if vector are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="128" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="128" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a6265ed5e6545d82bac595edad19ea8e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Float256::operator!=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares with second vector for equality. This method is secured to return true when comparing 0.0f with -0.0f. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ANY field in vector has different value than passed value, <computeroutput>false</computeroutput> if vector are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="147" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="147" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a20bcd485318006ead8b11f3b2ac33d8d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator+</definition>
        <argsstring>(const Float256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="161" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a3f59fea160b9e7ee724cb05ca108eaf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator+</definition>
        <argsstring>(const float b) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="165" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a0abf3963afe5f0dd88c18c442c7cebec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256&amp; avx::Float256::operator+=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="169" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1afa1e5b54a3b542c12bcc344a987417eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256&amp; avx::Float256::operator+=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="174" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a308e53a2d94cf1f65181b705093a6bba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator-</definition>
        <argsstring>(const Float256 &amp;bV) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="179" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1ab30061ffe75d5d21b2002a164e9290c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator-</definition>
        <argsstring>(const float b) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="183" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a38cf906f465a2b8f865169c7ae0b2b6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256&amp; avx::Float256::operator-=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="187" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1acb6def11fd530792d02da63621309ce7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256&amp; avx::Float256::operator-=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="192" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a4597a6f234902d62a216850ccf90e79a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator*</definition>
        <argsstring>(const Float256 &amp;bV) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="197" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aa526a29c2d6a6c879e7c87c2c56bfd4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator*</definition>
        <argsstring>(const float b) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="201" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a87722e3c68df2c33cb4f6d9aa26ececd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256&amp; avx::Float256::operator*=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="205" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a23be8f2a6ee7682809842c4b77817b1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256&amp; avx::Float256::operator*=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="210" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1af168a23c01e2a76483a1d3a343cf95da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator/</definition>
        <argsstring>(const Float256 &amp;bV) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="215" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aed7e0cdd4977b96b0be87742ef8a932a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref></type>
        <definition>Float256 avx::Float256::operator/</definition>
        <argsstring>(const float b) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="219" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1736e460d24bb0db6f8b81611f24b859" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256&amp; avx::Float256::operator/=</definition>
        <argsstring>(const Float256 &amp;bV)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="223" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1aad2face90745e0062fa33ab2ab871670" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_float256" kindref="compound">Float256</ref> &amp;</type>
        <definition>Float256&amp; avx::Float256::operator/=</definition>
        <argsstring>(const float b)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="228" column="22" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a1cb1fb731d5d7224ff18878b1bf4725f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float avx::Float256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="233" column="19" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="233" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_float256_1a905330b7b986cb226f76dad566996e9e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Float256::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="244" column="25" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="244" bodyend="253"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>float</computeroutput>. Can hold 8 individual <computeroutput>float</computeroutput> values. Provides arithmetic operators.<itemizedlist>
<listitem><para>Provides comparison operators == != (optimization on the way). </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" line="18" column="5" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/float256.hpp" bodystart="18" bodyend="255"/>
    <listofallmembers>
      <member refid="classavx_1_1_float256_1aaf79eeaf2622f82dfec790eea4cc54a9" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a933268afcc37f0a7f475933b8cbe8ddf" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a86589f56e127e08937446b56d0d379d1" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1aa4c9a94de6d70094fb3a9ede6e65a4d5" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1aa7ae3a7c2c9b794e4ba39878bd750af3" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1af7891223c869a8e30fa52e64cc45579d" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1a713fce05ff701807106ce98f34f9ad93" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>Float256</name></member>
      <member refid="classavx_1_1_float256_1abe90ea496b0b2c8573c1f5e33efcf878" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>get</name></member>
      <member refid="classavx_1_1_float256_1ad55bae898da176a5b58b9caaa650affc" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>load</name></member>
      <member refid="classavx_1_1_float256_1a07a0f2fdddbe88828844799e8ca159f6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_float256_1a6265ed5e6545d82bac595edad19ea8e6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_float256_1a4597a6f234902d62a216850ccf90e79a" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_float256_1aa526a29c2d6a6c879e7c87c2c56bfd4c" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_float256_1a87722e3c68df2c33cb4f6d9aa26ececd" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_float256_1a23be8f2a6ee7682809842c4b77817b1e" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_float256_1a20bcd485318006ead8b11f3b2ac33d8d" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_float256_1a3f59fea160b9e7ee724cb05ca108eaf6" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_float256_1a0abf3963afe5f0dd88c18c442c7cebec" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_float256_1afa1e5b54a3b542c12bcc344a987417eb" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_float256_1a308e53a2d94cf1f65181b705093a6bba" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_float256_1ab30061ffe75d5d21b2002a164e9290c8" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_float256_1a38cf906f465a2b8f865169c7ae0b2b6c" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_float256_1acb6def11fd530792d02da63621309ce7" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_float256_1af168a23c01e2a76483a1d3a343cf95da" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_float256_1aed7e0cdd4977b96b0be87742ef8a932a" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_float256_1a1736e460d24bb0db6f8b81611f24b859" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_float256_1aad2face90745e0062fa33ab2ab871670" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_float256_1ae1496dee50bec0487a0085a145671786" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_float256_1ab578a1c38df13f1b07dc23788bbfef83" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_float256_1a1cb1fb731d5d7224ff18878b1bf4725f" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_float256_1a84a67554fe5aeea85273662849841dec" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>save</name></member>
      <member refid="classavx_1_1_float256_1a1c836a6f30e03e48414adb1f8f223fea" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>save</name></member>
      <member refid="classavx_1_1_float256_1ad3136f9cbe502e28ac5b472e39c43c0e" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_float256_1a11ad422c06fc456499fbdad71e88a4fb" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>set</name></member>
      <member refid="classavx_1_1_float256_1af1a301e331306ac1ef47bb67feaacd51" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>size</name></member>
      <member refid="classavx_1_1_float256_1a1af5c742978243cce3b7869f4e4c47de" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_float256_1a905330b7b986cb226f76dad566996e9e" prot="public" virt="non-virtual"><scope>avx::Float256</scope><name>str</name></member>
      <member refid="classavx_1_1_float256_1a807f6126b6f82c9866f1b4754c052fe9" prot="private" virt="non-virtual"><scope>avx::Float256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
