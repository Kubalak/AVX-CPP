<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classavx_1_1_int256" kind="class" language="C++" prot="public">
    <compoundname>avx::Int256</compoundname>
    <includes refid="int256_8hpp" local="no">int256.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_int256_1a96d8b359a100f18d16a97db104d77bbc" prot="public" static="no">
        <type>int</type>
        <definition>using avx::Int256::storedType =  int</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="45" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_int256_1a3da75e1c086411c5ff3b921c5993f0ef" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::Int256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="41" column="17" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_int256_1a0d87051c05a25923c0c570956c29b783" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int avx::Int256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="44" column="30" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_int256_1a8f3cb7b950f4a633d07281f63fbcee7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>()</argsstring>
        <name>Int256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes vector with zeros. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="50" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a273ee075b5d7d86d9271ea5e591803f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const int *init)</argsstring>
        <name>Int256</name>
        <param>
          <type>const int *</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector by loading data from memory (via <computeroutput>_mm256_lddq_si256</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid memory addres of minimal size of 256-bits (32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="55" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a3831640a2a0bc431a28e7761f4790ac9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const int &amp;init)</argsstring>
        <name>Int256</name>
        <param>
          <type>const int &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with const value. Each cell will be set with value of <computeroutput>init</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="61" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a237a4aedff1d91067a1390e038c3ce00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const __m256i &amp;init)</argsstring>
        <name>Int256</name>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from __m256i value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of type __m256i to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="67" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a162d22b1c369840124b0d3321a27e653" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const Int256 &amp;init)</argsstring>
        <name>Int256</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor. Initializes vector from another <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> vector to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="74" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a16a88e9ca75ecb004d3c31ea550f9848" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const std::array&lt; int, 8 &gt; &amp;init)</argsstring>
        <name>Int256</name>
        <param>
          <type>const std::array&lt; int, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from std::array of 8 int values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 8 int values to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="80" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a2473772a2259a70fc23036bf64ea3d8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const std::array&lt; short, 8 &gt; &amp;init)</argsstring>
        <name>Int256</name>
        <param>
          <type>const std::array&lt; short, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from std::array of 8 short values. Each short value is promoted to int. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 8 short values to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="87" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="87" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae37492d0058931f5b2585bbd8f081ea3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const std::array&lt; char, 8 &gt; &amp;init)</argsstring>
        <name>Int256</name>
        <param>
          <type>const std::array&lt; char, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from std::array of 8 char values. Each char value is promoted to int. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 8 char values to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="106" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a1e55fe9d67971f364e3dc49b543452a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(std::initializer_list&lt; int &gt; init)</argsstring>
        <name>Int256</name>
        <param>
          <type>std::initializer_list&lt; int &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from initializer_list of int values. If the list contains fewer than 8 elements, remaining elements are set to zero. If the list contains more than 8 elements, only the first 8 are used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list of int values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="125" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="125" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a472f0584182166f7b62a9b1cbfdf54e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::Int256::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="145" column="17" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a67b671bc8184ddba13cbae4ba89b0df3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::set</definition>
        <argsstring>(__m256i val)</argsstring>
        <name>set</name>
        <param>
          <type>__m256i</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="148" column="14" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1aa163ed57cb857b96412e6c475ea7ca77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::load</definition>
        <argsstring>(const int *sP)</argsstring>
        <name>load</name>
        <param>
          <type>const int *</type>
          <declname>sP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="154" column="18" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a82c3016f23324d426067ff969d06f266" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::save</definition>
        <argsstring>(std::array&lt; int, 8 &gt; &amp;dest) const</argsstring>
        <name>save</name>
        <param>
          <type>std::array&lt; int, 8 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves vector data into an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="163" column="14" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1acf842cb23ae4b372dbda30f5bd9b4a51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::save</definition>
        <argsstring>(int *pDest) const</argsstring>
        <name>save</name>
        <param>
          <type>int *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data into given memory address. Memory doesn&apos;t need to be aligned to any specific boundary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid (non-nullptr) memory address with size of at least 32 bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>When in debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. Otherwise if <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput> this function has no effect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="170" column="14" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="170" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a7b6e265c8697eb04ef077455723fb391" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::saveAligned</definition>
        <argsstring>(int *pDest) const</argsstring>
        <name>saveAligned</name>
        <param>
          <type>int *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data from vector into given memory address. Memory needs to be aligned on 32 byte boundary. See <ulink url="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html">https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid (non-NULL) memory address aligned to 32-byte boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>When in debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. Otherwise if <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput> this function has no effect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="184" column="14" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae0613d3870ed36959b32f07d8d0426e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Int256::operator==</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="192" column="14" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a0ea7beaa72ea9e4642045763d50c797d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Int256::operator==</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="197" column="14" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a8eaf278d22cdfca7d5f53f8e3ce01617" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Int256::operator!=</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="203" column="14" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a484a7c58a6d5e0135c9b1eccbbe56fb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Int256::operator!=</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="208" column="14" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1acf6d2fd3b7c3555942361cef0da15779" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int avx::Int256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. Does not support value assignment through this method (e.g. aV[0] = 1 won&apos;t work). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 7. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range and build type is debug will be thrown. Otherwise bitwise AND will prevent index to be out of range. Side effect is that in case of out of index it will behave like <computeroutput>index % 32</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="221" column="13" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="221" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a9dc99d4b3cd4fd0a80112cb3b5afc676" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator+</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds values from other vector and returns new vector. <simplesect kind="return"><para>New vector being a sum of this vector and <computeroutput>bv</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="238" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae2f0dcdd4039161ee75849b8d5010107" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator+</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds single value across all vector fields. <simplesect kind="return"><para>New vector being a sum of this vector and <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="244" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a9ae55f05b711ccbcfbaad366eb92ff62" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator-</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="247" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a749797664e4d1c4bcc2203f120127c4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator-</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="248" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a75f74c5f579250db23a284a37ed3410c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator*</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="251" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="251" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a020c2946c0ba73528999480d8865e110" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator*</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="252" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="252" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a578115211790bf40f4c2d6946c9b9952" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator/</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="255" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="255" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6dd388da037927cf03607e3b9c562910" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator/</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="269" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="269" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a44b60faab269e7542888d11d168383f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator%</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="286" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="286" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a854860ec8f28bb894dc6bcf45d9646d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator%</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator%</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="325" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="325" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6812eb236caedd3887e34735f65c947c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator^</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="366" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="366" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a94372beac04e031922df4c418c63fa56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator^</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="367" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="367" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a80dfa615ff20758550d7060c44defb89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator|</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="370" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="370" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a5e66bd7c42556ef2e4ec5ed34376033d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator|</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator|</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="371" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1afdea7c0eb55f376be77e68661099fa69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&amp;</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="374" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a504811450a1af1cdddb3a383134b69da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&amp;</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="375" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="375" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1aa52424c26f3ec87e764e5c208f618d71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator~</definition>
        <argsstring>() const</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="378" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="378" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae06cc8c901f0c09dcb86663cc57b8b88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&lt;&lt;</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="381" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="381" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae0ca0a4659e18f67736d615bd0cd5e5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&lt;&lt;</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="382" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a79165029fb3c1811c1cb41fec62f696b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&gt;&gt;</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="384" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="384" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1af9ca007c21ffbda42ec0cf48998cec1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&gt;&gt;</definition>
        <argsstring>(const int &amp;b) const</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="385" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a8ecf534a0e9cb5254f19d203b56b4048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator+=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="388" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="388" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae195f1531ac791acf02b3c8a94990861" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator+=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="393" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae409c34c6e2fc5f262fc3c5fc5269bbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator-=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="398" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a40063c04fa7362631900946d71afb238" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator-=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="403" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6660624b8d278d3087258d5114abb218" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator*=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="408" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="408" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6a8ebe39a9c8d39f01ede942af4f4d57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator*=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="413" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="413" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1addd1d62fd15be146b0d36a2cf2f624f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator/=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="419" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="419" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a77fe8c2acc2ecedd58a7476f5b0e4cf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator/=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="433" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="433" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6f388fb0e7c1d6cd6fd0d5d06e938d6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator%=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs integer division. IMPORTANT: Does not work for 0x8000&apos;0000 aka -2 147 483 648 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second modulo operand (divisor) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of modulo operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="453" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="453" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a348a1a8eebdd0dd9227590a11166a6db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator%=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator%=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="492" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="492" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a59265e3efd2ba3ed941fd49a4025c7aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator|=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="536" column="17" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="536" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a9822efa17bcdb01768d0d4c33e9a5dcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator|=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="542" column="17" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a8f39b3b605ef4dd04ec32abb9833cd23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator&amp;=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="548" column="17" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="548" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a84e4692c78001c6dcf5a7765a92d875e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator^=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="553" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ac5db90d4c93b44c6eb1d2341f9ec25fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator^=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="559" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="559" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ac1c995041506a9d12264f9f4027df53e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator&lt;&lt;=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="564" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1af947f7331aab9b8bd0b9baf2c2820039" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator&lt;&lt;=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="569" column="9" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a7e41957b0356534d4ce45c7c6528a976" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator&gt;&gt;=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="574" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="574" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1aa8843b605ff31975c1d6c27244093511" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256&amp; avx::Int256::operator&gt;&gt;=</definition>
        <argsstring>(const int &amp;b)</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const int &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="579" column="16" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1acc816d00ced8fc6291364d276c8dcfa1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Int256::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="584" column="21" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="584" bodyend="593"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classavx_1_1_int256_1a613bcc04cebe1a3d16349abc8430719d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 sum</definition>
        <argsstring>(std::vector&lt; Int256 &gt; &amp;)</argsstring>
        <name>sum</name>
        <param>
          <type>std::vector&lt; <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &gt; &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="595" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.cpp" bodystart="9" bodyend="15"/>
      </memberdef>
      <memberdef kind="friend" id="classavx_1_1_int256_1a48f6526a6b585065e4a0aa44d041b6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 sum</definition>
        <argsstring>(std::set&lt; Int256 &gt; &amp;)</argsstring>
        <name>sum</name>
        <param>
          <type>std::set&lt; <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &gt; &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="596" column="23" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.cpp" bodystart="18" bodyend="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>int</computeroutput>. Can hold 8 individual <computeroutput>int</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. Class providing vectorized version of <computeroutput>int</computeroutput>. Can hold 8 individual <computeroutput>int</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" line="38" column="5" bodyfile="/home/jakub/Publiczny/AVX-CPP/src/types/int256.hpp" bodystart="39" bodyend="597"/>
    <listofallmembers>
      <member refid="classavx_1_1_int256_1a472f0584182166f7b62a9b1cbfdf54e8" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>get</name></member>
      <member refid="classavx_1_1_int256_1a8f3cb7b950f4a633d07281f63fbcee7f" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a273ee075b5d7d86d9271ea5e591803f7" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a3831640a2a0bc431a28e7761f4790ac9" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a237a4aedff1d91067a1390e038c3ce00" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a162d22b1c369840124b0d3321a27e653" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a16a88e9ca75ecb004d3c31ea550f9848" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a2473772a2259a70fc23036bf64ea3d8d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1ae37492d0058931f5b2585bbd8f081ea3" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a1e55fe9d67971f364e3dc49b543452a6" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1aa163ed57cb857b96412e6c475ea7ca77" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>load</name></member>
      <member refid="classavx_1_1_int256_1a8eaf278d22cdfca7d5f53f8e3ce01617" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_int256_1a484a7c58a6d5e0135c9b1eccbbe56fb5" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_int256_1a44b60faab269e7542888d11d168383f5" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_int256_1a854860ec8f28bb894dc6bcf45d9646d1" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_int256_1a6f388fb0e7c1d6cd6fd0d5d06e938d6c" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_int256_1a348a1a8eebdd0dd9227590a11166a6db" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_int256_1afdea7c0eb55f376be77e68661099fa69" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_int256_1a504811450a1af1cdddb3a383134b69da" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_int256_1a8f39b3b605ef4dd04ec32abb9833cd23" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_int256_1a75f74c5f579250db23a284a37ed3410c" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_int256_1a020c2946c0ba73528999480d8865e110" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_int256_1a6660624b8d278d3087258d5114abb218" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_int256_1a6a8ebe39a9c8d39f01ede942af4f4d57" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_int256_1a9dc99d4b3cd4fd0a80112cb3b5afc676" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_int256_1ae2f0dcdd4039161ee75849b8d5010107" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_int256_1a8ecf534a0e9cb5254f19d203b56b4048" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_int256_1ae195f1531ac791acf02b3c8a94990861" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_int256_1a9ae55f05b711ccbcfbaad366eb92ff62" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_int256_1a749797664e4d1c4bcc2203f120127c4f" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_int256_1ae409c34c6e2fc5f262fc3c5fc5269bbe" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_int256_1a40063c04fa7362631900946d71afb238" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_int256_1a578115211790bf40f4c2d6946c9b9952" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_int256_1a6dd388da037927cf03607e3b9c562910" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_int256_1addd1d62fd15be146b0d36a2cf2f624f8" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_int256_1a77fe8c2acc2ecedd58a7476f5b0e4cf9" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_int256_1ae06cc8c901f0c09dcb86663cc57b8b88" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_int256_1ae0ca0a4659e18f67736d615bd0cd5e5a" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_int256_1ac1c995041506a9d12264f9f4027df53e" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_int256_1af947f7331aab9b8bd0b9baf2c2820039" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_int256_1ae0613d3870ed36959b32f07d8d0426e7" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_int256_1a0ea7beaa72ea9e4642045763d50c797d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_int256_1a79165029fb3c1811c1cb41fec62f696b" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_int256_1af9ca007c21ffbda42ec0cf48998cec1e" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_int256_1a7e41957b0356534d4ce45c7c6528a976" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_int256_1aa8843b605ff31975c1d6c27244093511" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_int256_1acf6d2fd3b7c3555942361cef0da15779" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_int256_1a6812eb236caedd3887e34735f65c947c" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_int256_1a94372beac04e031922df4c418c63fa56" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_int256_1a84e4692c78001c6dcf5a7765a92d875e" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_int256_1ac5db90d4c93b44c6eb1d2341f9ec25fb" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_int256_1a80dfa615ff20758550d7060c44defb89" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_int256_1a5e66bd7c42556ef2e4ec5ed34376033d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_int256_1a59265e3efd2ba3ed941fd49a4025c7aa" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_int256_1a9822efa17bcdb01768d0d4c33e9a5dcc" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_int256_1aa52424c26f3ec87e764e5c208f618d71" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_int256_1a82c3016f23324d426067ff969d06f266" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>save</name></member>
      <member refid="classavx_1_1_int256_1acf842cb23ae4b372dbda30f5bd9b4a51" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>save</name></member>
      <member refid="classavx_1_1_int256_1a7b6e265c8697eb04ef077455723fb391" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_int256_1a67b671bc8184ddba13cbae4ba89b0df3" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>set</name></member>
      <member refid="classavx_1_1_int256_1a0d87051c05a25923c0c570956c29b783" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>size</name></member>
      <member refid="classavx_1_1_int256_1a96d8b359a100f18d16a97db104d77bbc" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_int256_1acc816d00ced8fc6291364d276c8dcfa1" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>str</name></member>
      <member refid="classavx_1_1_int256_1a613bcc04cebe1a3d16349abc8430719d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>sum</name></member>
      <member refid="classavx_1_1_int256_1a48f6526a6b585065e4a0aa44d041b6bd" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>sum</name></member>
      <member refid="classavx_1_1_int256_1a3da75e1c086411c5ff3b921c5993f0ef" prot="private" virt="non-virtual"><scope>avx::Int256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
