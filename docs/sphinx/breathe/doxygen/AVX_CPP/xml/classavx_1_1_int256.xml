<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classavx_1_1_int256" kind="class" language="C++" prot="public">
    <compoundname>avx::Int256</compoundname>
    <includes refid="int256_8hpp" local="no">int256.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classavx_1_1_int256_1a96d8b359a100f18d16a97db104d77bbc" prot="public" static="no">
        <type>int</type>
        <definition>using avx::Int256::storedType =  int</definition>
        <argsstring></argsstring>
        <name>storedType</name>
        <qualifiedname>avx::Int256::storedType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type that is stored inside vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="47" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classavx_1_1_int256_1a3da75e1c086411c5ff3b921c5993f0ef" prot="private" static="no" mutable="no">
        <type>__m256i</type>
        <definition>__m256i avx::Int256::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <qualifiedname>avx::Int256::v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="36" column="25" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classavx_1_1_int256_1a0d87051c05a25923c0c570956c29b783" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int avx::Int256::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>avx::Int256::size</qualifiedname>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of individual values stored by object. This value can be used to iterate over elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="42" column="30" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classavx_1_1_int256_1a8f3cb7b950f4a633d07281f63fbcee7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>()</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes vector with zeros. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="52" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a85d223a3fb6288750f40fc55329bfb19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const int *pSrc)</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <param>
          <type>const int *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector by loading data from memory (via <computeroutput>_mm256_lddq_si256</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid memory addres of minimal size of 256-bits (32 bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="58" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a3831640a2a0bc431a28e7761f4790ac9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const int &amp;init)</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector with const value. Each cell will be set with value of <computeroutput>init</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="71" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a237a4aedff1d91067a1390e038c3ce00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const __m256i &amp;init)</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <param>
          <type>const __m256i &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from __m256i value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of type __m256i to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="77" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a162d22b1c369840124b0d3321a27e653" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const Int256 &amp;init)</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor. Initializes vector from another <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> vector to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="84" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a16a88e9ca75ecb004d3c31ea550f9848" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const std::array&lt; int, 8 &gt; &amp;init)</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <param>
          <type>const std::array&lt; int, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from std::array of 8 int values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 8 int values to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="90" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a2473772a2259a70fc23036bf64ea3d8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const std::array&lt; short, 8 &gt; &amp;init)</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <param>
          <type>const std::array&lt; short, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from std::array of 8 short values. Each short value is promoted to int. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 8 short values to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="97" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="97" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae37492d0058931f5b2585bbd8f081ea3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(const std::array&lt; char, 8 &gt; &amp;init)</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <param>
          <type>const std::array&lt; char, 8 &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from std::array of 8 char values. Each char value is promoted to int. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 8 char values to initialize the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="116" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a1e55fe9d67971f364e3dc49b543452a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>avx::Int256::Int256</definition>
        <argsstring>(std::initializer_list&lt; int &gt; init)</argsstring>
        <name>Int256</name>
        <qualifiedname>avx::Int256::Int256</qualifiedname>
        <param>
          <type>std::initializer_list&lt; int &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes vector from initializer_list of int values. If the list contains fewer than 8 elements, remaining elements are set to zero. If the list contains more than 8 elements, only the first 8 are used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list of int values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="135" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="135" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a472f0584182166f7b62a9b1cbfdf54e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__m256i</type>
        <definition>__m256i avx::Int256::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <qualifiedname>avx::Int256::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the internal __m256i value stored by the object. <simplesect kind="return"><para>The __m256i value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="159" column="17" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a67b671bc8184ddba13cbae4ba89b0df3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::set</definition>
        <argsstring>(__m256i val)</argsstring>
        <name>set</name>
        <qualifiedname>avx::Int256::set</qualifiedname>
        <param>
          <type>__m256i</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the internal __m256i value stored by the object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New value of type __m256i. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="165" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a55ca05d5cf9f23296eee9d32cfd0badf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::load</definition>
        <argsstring>(const int *pSrc)</argsstring>
        <name>load</name>
        <qualifiedname>avx::Int256::load</qualifiedname>
        <param>
          <type>const int *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads data from memory into vector (memory should be of size of at least 32 bytes). Memory doesn&apos;t need to be aligned to any specific boundary. If <computeroutput>sP</computeroutput> is <computeroutput>nullptr</computeroutput> this method has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory from which to load data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pSrc</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="172" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="172" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1acb0fd228f1559d620602a027612f13a9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::save</definition>
        <argsstring>(std::array&lt; int, 8 &gt; &amp;dest) const noexcept</argsstring>
        <name>save</name>
        <qualifiedname>avx::Int256::save</qualifiedname>
        <param>
          <type>std::array&lt; int, 8 &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the list to which vector will be saved. Array doesn&apos;t need to be aligned to any specific boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="185" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1acf842cb23ae4b372dbda30f5bd9b4a51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::save</definition>
        <argsstring>(int *pDest) const</argsstring>
        <name>save</name>
        <qualifiedname>avx::Int256::save</qualifiedname>
        <param>
          <type>int *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory doesn&apos;t have to be aligned to any specific boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>int</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="196" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="196" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a7b6e265c8697eb04ef077455723fb391" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void avx::Int256::saveAligned</definition>
        <argsstring>(int *pDest) const</argsstring>
        <name>saveAligned</name>
        <qualifiedname>avx::Int256::saveAligned</qualifiedname>
        <param>
          <type>int *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves data to destination in memory. The memory must be aligned at 32-byte boundary.</para>
<para>See <ulink url="https://en.cppreference.com/w/cpp/memory/c/aligned_alloc">https://en.cppreference.com/w/cpp/memory/c/aligned_alloc</ulink> for more details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a memory of at least 32 bytes (8x <computeroutput>int</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If in Debug mode and <computeroutput>pDest</computeroutput> is <computeroutput>nullptr</computeroutput>. In Release mode no checks are performed to improve efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="212" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="212" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae79cc208eb12f547fe28c45e99151d86" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Int256::operator==</definition>
        <argsstring>(const Int256 &amp;bV) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Int256::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vectors for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all values in both vectors are equal, false if any value doesn&apos;t match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="226" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="226" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ad5a2494d5bfe61d65ff54d3b909e8068" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Int256::operator==</definition>
        <argsstring>(const int b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>avx::Int256::operator==</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vectors for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all values in vector is equal to <computeroutput>b</computeroutput>, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="239" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="239" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ad6c7a95c8aebfa476173f25ba17cfa13" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Int256::operator!=</definition>
        <argsstring>(const Int256 &amp;bV) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Int256::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vectors for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if ANY value is different between vectors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="253" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a53615677174b229de247352c7025d4e0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool avx::Int256::operator!=</definition>
        <argsstring>(const int b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>avx::Int256::operator!=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares vectors for inequality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if ANY value in vector is different than <computeroutput>b</computeroutput>, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="266" column="14" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="266" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1acf6d2fd3b7c3555942361cef0da15779" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int avx::Int256::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>avx::Int256::operator[]</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing operator. Does not support value assignment through this method (e.g. aV[0] = 1 won&apos;t work). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of desired element between 0 and 7. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of underlying element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If index is not within the correct range and build type is debug will be thrown. Otherwise bitwise AND will prevent index to be out of range. Side effect is that only 3 LSBs are used from <computeroutput>index</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="282" column="13" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="282" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6cc3b4254bf4f92b2141957181d5361d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator+</definition>
        <argsstring>(const Int256 &amp;bV) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Int256::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds values from other vector and returns new vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being a sum of this vector and <computeroutput>bv</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="299" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6a1747a3d0ee4a0a12219294343db4ab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator+</definition>
        <argsstring>(const int b) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>avx::Int256::operator+</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds single value across all vector fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to add to vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being a sum of this vector and <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="306" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a36d4912a6bf4b52cdf01925aa621cfad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator-</definition>
        <argsstring>(const Int256 &amp;bV) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Int256::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts values from vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of subtracting <computeroutput>bV</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="313" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ad6ab7be854f141edea85cd499cf74d16" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator-</definition>
        <argsstring>(const int b) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>avx::Int256::operator-</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts a single value from all vector fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to subtract from vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of subtracting <computeroutput>b</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="320" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1af1770bc4a361ba2ed0f813ad4358ec36" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator*</definition>
        <argsstring>(const Int256 &amp;bV) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Int256::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of multiplying vector by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="327" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a7e2902d35add0047f2bfaac530143d40" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator*</definition>
        <argsstring>(const int b) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>avx::Int256::operator*</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies all vector fields by a single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of multiplying vector by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="334" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a7940facde9c75cdeac78b7008552542c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator/</definition>
        <argsstring>(const Int256 &amp;bV) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Int256::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of dividing vector by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="341" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="341" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6bea25420499ebb999a54970f0c2333d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator/</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator/</name>
        <qualifiedname>avx::Int256::operator/</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides all vector fields by a single value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of dividing vector by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="360" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="360" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a44b60faab269e7542888d11d168383f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator%</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::Int256::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates element-wise modulo of two vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of modulo operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="381" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="381" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a3ac597e26b87aa58d195c85e843a6d34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator%</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator%</name>
        <qualifiedname>avx::Int256::operator%</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates element-wise modulo of vector and scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of modulo operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="400" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="400" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a6812eb236caedd3887e34735f65c947c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator^</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::Int256::operator^</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of bitwise XOR with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="421" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a24027a6938a17957ca574cc57ad36c76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator^</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator^</name>
        <qualifiedname>avx::Int256::operator^</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to XOR with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of bitwise XOR with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="428" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="428" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a80dfa615ff20758550d7060c44defb89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator|</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::Int256::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of bitwise OR with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="435" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="435" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a27d3142e00f44996556c681eddcf93de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator|</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator|</name>
        <qualifiedname>avx::Int256::operator|</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to OR with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of bitwise OR with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="442" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="442" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1afdea7c0eb55f376be77e68661099fa69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&amp;</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::Int256::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of bitwise AND with <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="449" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="449" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a528d684d81f0c5d55ad52b16d9540be0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&amp;</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>avx::Int256::operator&amp;</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND operator with scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to AND with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector being result of bitwise AND with <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="456" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="456" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1aa52424c26f3ec87e764e5c208f618d71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator~</definition>
        <argsstring>() const</argsstring>
        <name>operator~</name>
        <qualifiedname>avx::Int256::operator~</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise NOT operator. <simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector with all bits inverted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="462" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="462" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ae06cc8c901f0c09dcb86663cc57b8b88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&lt;&lt;</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Int256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise left shift operator (element-wise). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing number of bits for which each corresponding element should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector after left shift. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="469" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="469" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a56688f62b0ebf215a1ff49999fc0303e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&lt;&lt;</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>avx::Int256::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise left shift operator by scalar. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits by which values should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector after left shift. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="476" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="476" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a79165029fb3c1811c1cb41fec62f696b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&gt;&gt;</definition>
        <argsstring>(const Int256 &amp;bV) const</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::Int256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise right shift operator (element-wise, arithmetic shift). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing number of bits for which each corresponding element should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector after right shift. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="483" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="483" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a40db13739bdf8c62cf8bb5a8ee7cb84e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref></type>
        <definition>Int256 avx::Int256::operator&gt;&gt;</definition>
        <argsstring>(const int b) const</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>avx::Int256::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise right shift operator by scalar (arithmetic shift). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits by which values should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> New vector after right shift. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="490" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="490" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a487877899bd9f5bc224026cc653f5b3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator+=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Int256::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two vectors together and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after adding <computeroutput>bV</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="497" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a0e8cc31b70f9dc16249e13808a02f39b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator+=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator+=</name>
        <qualifiedname>avx::Int256::operator+=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds scalar to vector and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after adding <computeroutput>b</computeroutput> to vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="507" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="507" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a0bf4b1689216cdf5cabee34b8ab421d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator-=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Int256::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after subtracting <computeroutput>bV</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="517" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="517" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a0ebd9dc14cbbd2af326eaeb401b821a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator-=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator-=</name>
        <qualifiedname>avx::Int256::operator-=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts scalar from vector and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to be subtracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after subtracting <computeroutput>b</computeroutput> from vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="527" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ab3a724ec01cc456d35e86facf81f9b01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator*=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Int256::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after multiplying by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="537" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="537" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a324dad8062d1cfd9205ad84cdc158aab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator*=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator*=</name>
        <qualifiedname>avx::Int256::operator*=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies vector by scalar and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after multiplying by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="547" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="547" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1aadd00dd0408cbd4a79682d51b9ee40d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator/=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Int256::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two vectors and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after dividing by <computeroutput>bV</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="558" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="558" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a34cf1c8edef4b36970a6d6bdc9e92493" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator/=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator/=</name>
        <qualifiedname>avx::Int256::operator/=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides vector by scalar and stores result inside original vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to same vector after dividing by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="577" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="577" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a7535c84c01f2e1608827ac620581d691" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator%=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::Int256::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs modulo operation. It does so by dividing vectors, multiplying result and subtracting from vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second modulo operand (divisor) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of modulo operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="597" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="597" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1ab503c18200599638ce7427b11d727398" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator%=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator%=</name>
        <qualifiedname>avx::Int256::operator%=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs modulo operation. It does so by dividing vectors, multiplying result and subtracting from vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second modulo operand (divisor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the original vector holding modulo operation results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="619" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="619" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1aeddfcac9dc9e4c6566057b0228350008" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator|=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::Int256::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR assignment operator. Applies bitwise OR between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="649" column="17" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a5167f3df7cfc941b72b72fb7581d6ead" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator|=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator|=</name>
        <qualifiedname>avx::Int256::operator|=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise OR assignment operator. Applies bitwise OR between this vector and the given integer value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="660" column="17" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="660" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a28623855e6818d3afdd3b4bc21e1eb0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator&amp;=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::Int256::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND assignment operator. Applies bitwise AND between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="671" column="17" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="671" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a01590bc9bd9c2d9b815bac5865c9652d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator&amp;=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>avx::Int256::operator&amp;=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise AND assignment operator. Applies bitwise AND between this vector and the given integer value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="682" column="17" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="682" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a06879e079ab65650ba3e4777c40018ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator^=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::Int256::operator^=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR assignment operator. Applies bitwise XOR between this vector and the given vector, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="693" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="693" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a898882296487e6df03b4210895006939" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator^=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator^=</name>
        <qualifiedname>avx::Int256::operator^=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitwise XOR assignment operator. Applies bitwise XOR between this vector and the given integer value, storing the result in this vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="704" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="704" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a166cfbe31da81567490017593fa2b228" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator&lt;&lt;=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::Int256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shifts values left while shifting in 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing number of bits for which each corresponding element should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="714" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="714" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1acab08a7c4c353cc2658d1c2e04503277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator&lt;&lt;=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator&lt;&lt;=</name>
        <qualifiedname>avx::Int256::operator&lt;&lt;=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shifts values right while shifting in 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits by which values should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="724" column="9" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1a46d25bbebec9bd2ad5ab923cc0bc9f75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator&gt;&gt;=</definition>
        <argsstring>(const Int256 &amp;bV)</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::Int256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
          <declname>bV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shifts values right while shifting in sign bit. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bV</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing number of bits for which each corresponding element should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="734" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="734" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1aca008c2319aa8e247396eff61fe09436" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classavx_1_1_int256" kindref="compound">Int256</ref> &amp;</type>
        <definition>Int256 &amp; avx::Int256::operator&gt;&gt;=</definition>
        <argsstring>(const int b)</argsstring>
        <name>operator&gt;&gt;=</name>
        <qualifiedname>avx::Int256::operator&gt;&gt;=</qualifiedname>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shifts values right while shifting in sign bit. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits by which values should be shifted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to modified object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="744" column="16" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="744" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classavx_1_1_int256_1acc816d00ced8fc6291364d276c8dcfa1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string avx::Int256::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <qualifiedname>avx::Int256::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns string representation of vector. Printing will result in Int256(&lt;vector_values&gt;) eg. Int256(1, 2, 3, 4, 5, 6, 7, 8) <simplesect kind="return"><para>String representation of underlying vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="754" column="21" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="754" bodyend="763"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class providing vectorized version of <computeroutput>int</computeroutput>. Can hold 8 individual <computeroutput>int</computeroutput> values. Provides arithmetic and bitwise operators. Provides comparison operators == !=. </para>
    </detaileddescription>
    <location file="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" line="32" column="5" bodyfile="/home/jakub/git-repos/AVX-CPP/src/types/int256.hpp" bodystart="34" bodyend="765"/>
    <listofallmembers>
      <member refid="classavx_1_1_int256_1a472f0584182166f7b62a9b1cbfdf54e8" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>get</name></member>
      <member refid="classavx_1_1_int256_1a8f3cb7b950f4a633d07281f63fbcee7f" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a85d223a3fb6288750f40fc55329bfb19" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a3831640a2a0bc431a28e7761f4790ac9" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a237a4aedff1d91067a1390e038c3ce00" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a162d22b1c369840124b0d3321a27e653" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a16a88e9ca75ecb004d3c31ea550f9848" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a2473772a2259a70fc23036bf64ea3d8d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1ae37492d0058931f5b2585bbd8f081ea3" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a1e55fe9d67971f364e3dc49b543452a6" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>Int256</name></member>
      <member refid="classavx_1_1_int256_1a55ca05d5cf9f23296eee9d32cfd0badf" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>load</name></member>
      <member refid="classavx_1_1_int256_1ad6c7a95c8aebfa476173f25ba17cfa13" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_int256_1a53615677174b229de247352c7025d4e0" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator!=</name></member>
      <member refid="classavx_1_1_int256_1a44b60faab269e7542888d11d168383f5" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_int256_1a3ac597e26b87aa58d195c85e843a6d34" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator%</name></member>
      <member refid="classavx_1_1_int256_1a7535c84c01f2e1608827ac620581d691" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_int256_1ab503c18200599638ce7427b11d727398" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator%=</name></member>
      <member refid="classavx_1_1_int256_1afdea7c0eb55f376be77e68661099fa69" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_int256_1a528d684d81f0c5d55ad52b16d9540be0" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&amp;</name></member>
      <member refid="classavx_1_1_int256_1a28623855e6818d3afdd3b4bc21e1eb0b" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_int256_1a01590bc9bd9c2d9b815bac5865c9652d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&amp;=</name></member>
      <member refid="classavx_1_1_int256_1af1770bc4a361ba2ed0f813ad4358ec36" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_int256_1a7e2902d35add0047f2bfaac530143d40" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator*</name></member>
      <member refid="classavx_1_1_int256_1ab3a724ec01cc456d35e86facf81f9b01" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_int256_1a324dad8062d1cfd9205ad84cdc158aab" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator*=</name></member>
      <member refid="classavx_1_1_int256_1a6cc3b4254bf4f92b2141957181d5361d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_int256_1a6a1747a3d0ee4a0a12219294343db4ab" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator+</name></member>
      <member refid="classavx_1_1_int256_1a487877899bd9f5bc224026cc653f5b3d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_int256_1a0e8cc31b70f9dc16249e13808a02f39b" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator+=</name></member>
      <member refid="classavx_1_1_int256_1a36d4912a6bf4b52cdf01925aa621cfad" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_int256_1ad6ab7be854f141edea85cd499cf74d16" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator-</name></member>
      <member refid="classavx_1_1_int256_1a0bf4b1689216cdf5cabee34b8ab421d2" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_int256_1a0ebd9dc14cbbd2af326eaeb401b821a6" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator-=</name></member>
      <member refid="classavx_1_1_int256_1a7940facde9c75cdeac78b7008552542c" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_int256_1a6bea25420499ebb999a54970f0c2333d" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator/</name></member>
      <member refid="classavx_1_1_int256_1aadd00dd0408cbd4a79682d51b9ee40d2" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_int256_1a34cf1c8edef4b36970a6d6bdc9e92493" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator/=</name></member>
      <member refid="classavx_1_1_int256_1ae06cc8c901f0c09dcb86663cc57b8b88" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_int256_1a56688f62b0ebf215a1ff49999fc0303e" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&lt;&lt;</name></member>
      <member refid="classavx_1_1_int256_1a166cfbe31da81567490017593fa2b228" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_int256_1acab08a7c4c353cc2658d1c2e04503277" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classavx_1_1_int256_1ae79cc208eb12f547fe28c45e99151d86" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_int256_1ad5a2494d5bfe61d65ff54d3b909e8068" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator==</name></member>
      <member refid="classavx_1_1_int256_1a79165029fb3c1811c1cb41fec62f696b" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_int256_1a40db13739bdf8c62cf8bb5a8ee7cb84e" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&gt;&gt;</name></member>
      <member refid="classavx_1_1_int256_1a46d25bbebec9bd2ad5ab923cc0bc9f75" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_int256_1aca008c2319aa8e247396eff61fe09436" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classavx_1_1_int256_1acf6d2fd3b7c3555942361cef0da15779" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator[]</name></member>
      <member refid="classavx_1_1_int256_1a6812eb236caedd3887e34735f65c947c" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_int256_1a24027a6938a17957ca574cc57ad36c76" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator^</name></member>
      <member refid="classavx_1_1_int256_1a06879e079ab65650ba3e4777c40018ca" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_int256_1a898882296487e6df03b4210895006939" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator^=</name></member>
      <member refid="classavx_1_1_int256_1a80dfa615ff20758550d7060c44defb89" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_int256_1a27d3142e00f44996556c681eddcf93de" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator|</name></member>
      <member refid="classavx_1_1_int256_1aeddfcac9dc9e4c6566057b0228350008" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_int256_1a5167f3df7cfc941b72b72fb7581d6ead" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator|=</name></member>
      <member refid="classavx_1_1_int256_1aa52424c26f3ec87e764e5c208f618d71" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>operator~</name></member>
      <member refid="classavx_1_1_int256_1acb0fd228f1559d620602a027612f13a9" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>save</name></member>
      <member refid="classavx_1_1_int256_1acf842cb23ae4b372dbda30f5bd9b4a51" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>save</name></member>
      <member refid="classavx_1_1_int256_1a7b6e265c8697eb04ef077455723fb391" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>saveAligned</name></member>
      <member refid="classavx_1_1_int256_1a67b671bc8184ddba13cbae4ba89b0df3" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>set</name></member>
      <member refid="classavx_1_1_int256_1a0d87051c05a25923c0c570956c29b783" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>size</name></member>
      <member refid="classavx_1_1_int256_1a96d8b359a100f18d16a97db104d77bbc" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>storedType</name></member>
      <member refid="classavx_1_1_int256_1acc816d00ced8fc6291364d276c8dcfa1" prot="public" virt="non-virtual"><scope>avx::Int256</scope><name>str</name></member>
      <member refid="classavx_1_1_int256_1a3da75e1c086411c5ff3b921c5993f0ef" prot="private" virt="non-virtual"><scope>avx::Int256</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
